<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaun&#39;s Space</title>
  <subtitle>求知！ 视界！ 未来！ ↖(^ω^)↗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cniter.github.io/"/>
  <updated>2021-02-17T12:35:56.577Z</updated>
  <id>http://cniter.github.io/</id>
  
  <author>
    <name>Shaun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scala 学习小结</title>
    <link href="http://cniter.github.io/posts/8d3d87a2.html"/>
    <id>http://cniter.github.io/posts/8d3d87a2.html</id>
    <published>2021-02-16T16:12:28.000Z</published>
    <updated>2021-02-17T12:35:56.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　最近要改行做大数据相关的东西了，经调研大数据开发的语言还是用 Scala 好，当然 Java 也可以，毕竟都运行在 JVM 上，不过 Java 也有很长时间没用过了，所以对于 Shaun 来说用 Scala 和 Java 的代价是一样的，都需要学习一下，所以决定用对大数据更友好的 Scala。</p><a id="more"></a><p>　　以 Martin Odersky 14 年写的「Scala By Example」为参考，虽然是 14 年的，但 Scala 的基本语法还是没变的，就学习本身而言没问题，毕竟不兼容的只是更上层的 API，Shaun 学习用的 Scala 版本为 2.12.12。Alvin Alexander 的「Scala Cookbook, 2nd Edition」预计今年 8 月会出版，到时可能这本书用来入门更好，但 Shaun 不需要系统的学，就简单的能上手写出比较理想的 Scala 代码就行了。</p><h2 id="学习篇">学习篇</h2><h3 id="第一章入门基础">第一章：入门基础</h3><h4 id="helloworld">HelloWorld</h4><p>　　由于「Scala By Example」第一章没啥内容，也为了在正式写 Scala 之前简单熟悉一下，这里先用「A Scala Tutorial for Java Programmers」简单上手一下，首先写个 HelloWorld，具体代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        println(<span class="string">"Hello, world!"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　和 C 语言类似，程序唯一入口函数都是 main 函数，但 Scala 的变量在前，声明的类型在后，相比常规的语言是有点奇怪了，但这种语法规则和 Typescript 一样，所以很容易接受，但其模板的表示就有点奇怪了，Array[String] 表示一个 String 类型的数组，即表示方法为 Array[T]，常规的模板方式为 <code>Array&lt;T&gt;</code> 或 <code>T[]</code>，def 关键字用来定义一个函数，object 用来表示一个单例类，即在定义类的同时，又创建了一个类的实例。Scala 中没有 static 关键字，需要用 static 修饰的都放在 object 中即可。</p><h4 id="调用-java">调用 Java</h4><p>Scala 中默认已导入 java.lang 中的全部类，但其它类需要显式导入，以格式化输出本地日期为例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">Date</span>, <span class="type">Locale</span>&#125;</div><div class="line"><span class="keyword">import</span> java.text.<span class="type">DateFormat</span>._</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">LocalDate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> now = <span class="keyword">new</span> <span class="type">Date</span></div><div class="line">        <span class="keyword">val</span> df = getDateInstance(<span class="type">LONG</span>, <span class="type">Locale</span>.<span class="type">CHINA</span>)</div><div class="line">        println(df format now) <span class="comment">// df format(now)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　Scala 中的导入和 java 中 import 基本一样，但功能更强大，可以使用 <code>{}</code> 导入部分，也使用 <code>_</code> 导入全部（java 导入全部为 <code>*</code>，这不一样），当一个函数只有一个参数，可以通过 <em>空格+参数</em> 的形式调用，而不需要使用 <em>括号包裹</em> 的形式。这里采用 <code>val</code> 关键字声明的是常量，而要声明变量需要用 <code>var</code>。</p><h4 id="对象">对象</h4><p>Scala 中万物皆对象，一个数字也是一个对象，一个函数也是一个对象，具体如下图：</p><figure><img src="http://coredumper.cn/wordpress/wp-content/uploads/2017/06/MacHi-2017-06-03-17-18-18.png" alt="enter image description here"><figcaption>enter image description here</figcaption></figure><p>以简单计时器函数为例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Timer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oncePerSecond</span></span>(callback: () =&gt; <span class="type">Unit</span>) &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">            callback();</div><div class="line">            <span class="type">Thread</span> sleep <span class="number">1000</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeFiles</span></span>() &#123;</div><div class="line">        println(<span class="string">"time files like an arrow..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="comment">// oncePerSecond(timeFiles);</span></div><div class="line">        oncePerSecond(() =&gt; &#123;</div><div class="line">            println(<span class="string">"time files like an arrow..."</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　这个和 Typescript 函数式编程的用法基本差不多，唯一不同这里声明的函数返回的是 <code>Unit</code> ，这个 Unit 可认为是无返回的函数，大部分情况等同于 void，在 Scala 中真正的没有值指的是 Nothing。</p><h4 id="类">类</h4><p>Scala 中同样有类，具体代码示例如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>(<span class="params">real: <span class="type">Double</span>, imaginary: <span class="type">Double</span></span>) </span>&#123;</div><div class="line">    <span class="comment">// def re() = real;</span></div><div class="line">    <span class="comment">// def im() = imaginary;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">re</span> </span>= real;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">im</span> </span>= imaginary;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>(): <span class="type">String</span> = <span class="string">""</span> + re + (<span class="keyword">if</span> (im &lt; <span class="number">0</span>) <span class="string">""</span> <span class="keyword">else</span> <span class="string">"+"</span>) + im + <span class="string">"i"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ComplexNumbers</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> c = <span class="keyword">new</span> <span class="type">Complex</span>(<span class="number">1.2</span>, <span class="number">-3.4</span>);</div><div class="line">        <span class="comment">// println("real part: " + c.re() + " imaginary part: " + c.im());</span></div><div class="line">        println(c.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　在 Scala 中所有类都会继承某个父类，若没有显式声明父类，则默认继承 scala.AnyRef 类，如上面的 Complex 类，若需要覆盖父类的函数，则需要在函数声明前加上 override 关键字。当函数没有参数时，可以不用加括号，在调用时也不用加括号，如上面示例的注释和非注释的代码。</p><h4 id="模式匹配与条件类">模式匹配与条件类</h4><p>　　接下来用 Scala 来写一个树结构表示表达式的示例代码，树的非叶节点表示操作符，叶子节点表示数值（这里为常量或变量），具体代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Sum</span>(<span class="params">l: <span class="type">Tree</span>, r: <span class="type">Tree</span></span>) <span class="keyword">extends</span> <span class="title">Tree</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Var</span>(<span class="params">n: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Tree</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Const</span>(<span class="params">v: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Tree</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">object</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Environment</span> </span>= <span class="type">String</span> =&gt; <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>(t: <span class="type">Tree</span>, env: <span class="type">Environment</span>): <span class="type">Int</span> = t <span class="keyword">match</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="type">Sum</span>(l, r) =&gt; eval(l, env) + eval(r, env)</div><div class="line">        <span class="keyword">case</span> <span class="type">Var</span>(n) =&gt; env(n)</div><div class="line">        <span class="keyword">case</span> <span class="type">Const</span>(v) =&gt; v</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derive</span></span>(t: <span class="type">Tree</span>, v: <span class="type">String</span>): <span class="type">Tree</span> = t <span class="keyword">match</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="type">Sum</span>(l, r) =&gt; <span class="type">Sum</span>(derive(l, v), derive(r, v))</div><div class="line">        <span class="keyword">case</span> <span class="type">Var</span>(n) <span class="keyword">if</span> (v == n) =&gt; <span class="type">Const</span>(<span class="number">1</span>)</div><div class="line">        <span class="keyword">case</span> _ =&gt; <span class="type">Const</span>(<span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> exp: <span class="type">Tree</span> = <span class="type">Sum</span>(<span class="type">Sum</span>(<span class="type">Var</span>(<span class="string">"x"</span>), <span class="type">Var</span>(<span class="string">"x"</span>)), <span class="type">Sum</span>(<span class="type">Const</span>(<span class="number">7</span>), <span class="type">Var</span>(<span class="string">"y"</span>))) </div><div class="line">        <span class="keyword">val</span> env: <span class="type">Environment</span> = &#123;<span class="keyword">case</span> <span class="string">"x"</span> =&gt; <span class="number">5</span> <span class="keyword">case</span> <span class="string">"y"</span> =&gt; <span class="number">7</span>&#125;</div><div class="line">        println(<span class="string">"Expression: "</span> + exp)</div><div class="line">        println(<span class="string">"Evalution with x=5, y=7: "</span> + eval(exp, env))</div><div class="line">        println(<span class="string">"Derivative relative to x:\n"</span> + derive(exp, <span class="string">"x"</span>))</div><div class="line">        println(<span class="string">"Derivative relative to y:\n"</span> + derive(exp, <span class="string">"y"</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　该示例主要用来说明两种 case 关键字，分别为：case class 和 … match case …，前者可认为是一个结构体，实例化时可以省略 new 关键字，参数有默认的 getter 函数，整个 case class 有默认的 equals 和 hashCode 方法实现，通过这两个方式可实现根据值判断类的两个实例是否相等，而不是通过引用，条件类同样有默认的 toString 方法实现；后者可认为是一种特殊的 switch case ，只不过 case 的判定和执行是函数式的，case class 可直接参与 match case 的判定（判定是不是属于该类）。第 7 行中有个 type 关键字，可认为是定义了一种新的类型（不是数据类型），示例中是函数类型，通过这个 type ，可直接将字符串映射为整型，23 行中将这个 type 与 case 结合使用，定义多个字符串映射多个整型的变量。第 18 行中有个 <code>_</code> ，这是 scala 中的通配符，不同的语义下表示的含义不同，这里的含义是指，当上面的模式都不匹配时，将执行这个，相当于 switch case 中的 default。</p><h4 id="scala-中的-trait">Scala 中的 trait</h4><p>　　简单理解就是 Java 中的 Interface（接口），Scala 中没有 interface 关键字，但是 trait 比 Interface 的功能更多，其中可直接定义属性和方法的实现，Scala 中可通过 trait 来实现多重继承。下面的示例用 trait 简单实现了一个比较接口：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Ord</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">&lt;</span></span>(that: <span class="type">Any</span>): <span class="type">Boolean</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">&lt;=</span></span>(that: <span class="type">Any</span>): <span class="type">Boolean</span> = (<span class="keyword">this</span> &lt; that) || (<span class="keyword">this</span> == that)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">&gt;</span></span>(that: <span class="type">Any</span>): <span class="type">Boolean</span> = !(<span class="keyword">this</span> &lt;= that)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">&gt;=</span></span>(that: <span class="type">Any</span>): <span class="type">Boolean</span> = !(<span class="keyword">this</span> &lt; that)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>(<span class="params">y: <span class="type">Int</span>, m: <span class="type">Int</span>, d: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Ord</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">year</span> </span>= y</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">month</span> </span>= m</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day</span> </span>= d</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>(): <span class="type">String</span> = year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + day</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">equals</span></span>(that: <span class="type">Any</span>): <span class="type">Boolean</span> = &#123;</div><div class="line">        that.isInstanceOf[<span class="type">Date</span>] &amp;&amp; &#123;</div><div class="line">            <span class="keyword">val</span> o = that.asInstanceOf[<span class="type">Date</span>]</div><div class="line">            o.day == day &amp;&amp; o.month == month &amp;&amp; o.year == year</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">&lt;</span></span>(that: <span class="type">Any</span>): <span class="type">Boolean</span> = &#123;</div><div class="line">        <span class="keyword">if</span> (!that.isInstanceOf[<span class="type">Date</span>]) &#123;</div><div class="line">            sys.error(<span class="string">"cannot compare "</span> + that + <span class="string">" and a Date"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> o = that.asInstanceOf[<span class="type">Date</span>]</div><div class="line">        (year &lt; o.year) || (year == o.year &amp;&amp; (month &lt; o.month || (month == o.month &amp;&amp; day &lt; o.day)))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Comparable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> d1 = <span class="keyword">new</span> <span class="type">Date</span>(<span class="number">2021</span>, <span class="number">1</span>, <span class="number">3</span>);</div><div class="line">        <span class="keyword">val</span> d2 = <span class="keyword">new</span> <span class="type">Date</span>(<span class="number">2021</span>, <span class="number">1</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">        println(d1 &lt; d2)</div><div class="line">        println(d1 &lt;= d2)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　比较关系一般只需要确定 小于 和 等于 关系即可，其它关系都可由这两关系推出来，由于等于方法默认存在于所有对象中，所以只需要重写小于即可， 其它的比较方法都可以在 trait 中定义好。在上面的示例中有两个函数 isInstanceOf 和 asInstanceOf，前者用来判断对象是否是指定类型，后者用来将对象转换为指定类型，一般用在将父类转为子类时，在使用 asInstanceOf 之前一般需要先使用 isInstanceOf。</p><h4 id="泛型">泛型</h4><p>　　这东西没啥好说的，基本有编程经验的或见过或用过，只是 Scala 的泛型语法确实有点奇怪就是了，可能也是为了函数式那些乱七八糟的操作符，具体示例代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reference</span>[<span class="type">T</span>] </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> contents: <span class="type">T</span> = _</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span></span>(value: <span class="type">T</span>) &#123;</div><div class="line">        contents = value</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>: <span class="type">T</span> = contents</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">IntegerReference</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> cell = <span class="keyword">new</span> <span class="type">Reference</span>[<span class="type">Int</span>]</div><div class="line">        cell.set(<span class="number">13</span>)</div><div class="line">        println(<span class="string">"Reference contains the half of "</span> + (cell.get * <span class="number">2</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　这里同样有个 <code>_</code>，这里表示的是默认值，对于数字类型来说是 0，对于 boolean 来说是 false，对于 Unit（函数签名）来说是()（无参数无返回），对于其他来说是 null。</p><p>简单的了解 Scala 就到这里了。</p><hr><h3 id="第二章快排">第二章：快排</h3><p>开场就是一个快排，示例代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">qSort</span></span>(xs: <span class="type">Array</span>[<span class="type">Int</span>]) &#123;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">swap</span></span>(i: <span class="type">Int</span>, j: <span class="type">Int</span>) &#123;</div><div class="line">            <span class="keyword">val</span> t = xs(i); xs(i) = xs(j); xs(j) = t;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sort</span></span>(l: <span class="type">Int</span>, r: <span class="type">Int</span>) &#123;</div><div class="line">            <span class="keyword">val</span> pivot = xs(l);</div><div class="line">            <span class="keyword">var</span> i = l+<span class="number">1</span>; <span class="keyword">var</span> j = r;</div><div class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</div><div class="line">                <span class="keyword">while</span> (i &lt;= r &amp;&amp; xs(i) &lt; pivot) i += <span class="number">1</span>;</div><div class="line">                <span class="keyword">while</span> (j &gt; l &amp;&amp; xs(j) &gt; pivot) j -= <span class="number">1</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (i &lt; j) &#123;</div><div class="line">                    swap(i, j);</div><div class="line">                    i += <span class="number">1</span>;</div><div class="line">                    j -= <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (i &gt; j) &#123;</div><div class="line">                    i = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (i &gt; l &amp;&amp; xs(i) &gt; pivot) &#123;</div><div class="line">                i -= <span class="number">1</span>; j -= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            swap(i, l);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (l &lt; j<span class="number">-1</span>) sort(l, j<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (j+<span class="number">1</span> &lt; r) sort(j+<span class="number">1</span>, r);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sort(<span class="number">0</span>, xs.length<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="comment">// val xs = Array(4, 1, 2, 5, 6);</span></div><div class="line">        <span class="comment">// val xs = Array(1, 2, 4, 4, 55, 5, 6);</span></div><div class="line">        <span class="comment">// val xs = Array(55, 6, 6);</span></div><div class="line">        <span class="keyword">val</span> xs = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>);</div><div class="line">        qSort(xs);</div><div class="line">        println(xs.mkString(<span class="string">" "</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　从这段快排代码可看出，Scala 支持函数嵌套和闭包，即在函数内部定义子函数，子函数可直接使用父函数的变量，同时，这里也简单说明一下 Scala 中数组的一些使用方法，用下标取数组元素时使用的是小括号 <code>()</code>，而不是其它语言常见的中括号 <code>[]</code>。当然 Scala 作为一种函数式语言，提供了非常多的函数式操作符，这篇也只会简单介绍。</p><h3 id="第三章actor">第三章：Actor</h3><p>　　Actor，Scala 中的多线程编程模型，下方的示例代码在 Scala 2.11 及之后的版本无法运行，因为 Actor 已从 Scala 库独立出来，见 <a href="https://stackoverflow.com/questions/29343770/object-actors-is-not-a-member-of-package-scala" target="_blank" rel="external">object-actors-is-not-a-member-of-package-scala</a>。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.actors.<span class="type">Actor</span></div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuctionMessage</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Offer</span>(<span class="params">bin: <span class="type">Int</span>, client: <span class="type">Actor</span></span>) <span class="keyword">extends</span> <span class="title">AuctionMessage</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Inquire</span>(<span class="params">client: <span class="type">Actor</span></span>) <span class="keyword">extends</span> <span class="title">AuctionMessage</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">abstract</span> <span class="title">class</span> <span class="title">AuctionReply</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Status</span>(<span class="params">asked: <span class="type">Int</span>, expire: <span class="type">Date</span></span>) <span class="keyword">extends</span> <span class="title">AuctionReply</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">BestOffer</span> <span class="keyword">extends</span> <span class="title">AuctionReply</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">BeatenOffer</span>(<span class="params">maxBid: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">AuctionReply</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">AuctionConCluded</span>(<span class="params">seller: <span class="type">Actor</span>, client: <span class="type">Actor</span></span>) <span class="keyword">extends</span> <span class="title">AuctionReply</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">AuctionFailed</span> <span class="keyword">extends</span> <span class="title">AuctionReply</span></span></div><div class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">AuctionOver</span> <span class="keyword">extends</span> <span class="title">AuctionReply</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">class</span> <span class="title">Auction</span>(<span class="params">seller: <span class="type">Actor</span>, minBid: <span class="type">Int</span>, closing: <span class="type">Date</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> timeToShutdown = <span class="number">36000000</span> <span class="comment">// msec</span></div><div class="line">    <span class="keyword">val</span> bidIncrement = <span class="number">10</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>() &#123;</div><div class="line">        <span class="keyword">var</span> maxBid = minBid - bidIncrement</div><div class="line">        <span class="keyword">var</span> maxBidder: <span class="type">Actor</span> = <span class="literal">null</span></div><div class="line">        <span class="keyword">var</span> running = <span class="literal">true</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (running) &#123;</div><div class="line">            receiveWithin ((closing.getTime() - <span class="keyword">new</span> <span class="type">Date</span>().getTime())) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="type">Offer</span>(bid, client) =&gt; &#123;</div><div class="line">                    <span class="keyword">if</span> (bid &gt;= maxBid + bidIncrement) &#123;</div><div class="line">                        <span class="keyword">if</span> (maxBid &gt;= minBid)   maxBidder ! <span class="type">BeatenOffer</span>(bid)</div><div class="line">                        maxBid = bid; maxBidder = client; client ! <span class="type">BestOffer</span></div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        client ! <span class="type">BeatenOffer</span>(maxBid)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> <span class="type">Inquire</span>(client) =&gt; &#123;</div><div class="line">                    client ! <span class="type">BeatenOffer</span>(maxBid)</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> <span class="type">TIMEOUT</span> =&gt; &#123;</div><div class="line">                    <span class="keyword">if</span> (maxBid &gt;= minBid) &#123;</div><div class="line">                        <span class="keyword">val</span> reply = <span class="type">AuctionConCluded</span>(seller, maxBidder)</div><div class="line">                        maxBidder ! reply; seller ! reply</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        seller ! <span class="type">AuctionFailed</span></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    receiveWithin(timeToShutdown) &#123;</div><div class="line">                        <span class="keyword">case</span> <span class="type">Offer</span>(_, client) =&gt; client ! <span class="type">AuctionOver</span></div><div class="line">                        <span class="keyword">case</span> <span class="type">TIMEOUT</span> =&gt; running = <span class="literal">false</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>() &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">            receive &#123;</div><div class="line">                <span class="keyword">case</span> name: <span class="type">String</span> =&gt; println(<span class="string">"Hello, "</span> + name)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">AuctionService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> seller: <span class="type">Actor</span> = <span class="keyword">new</span> <span class="type">HelloActor</span></div><div class="line">        <span class="keyword">val</span> client: <span class="type">Actor</span> = <span class="keyword">new</span> <span class="type">HelloActor</span></div><div class="line">        <span class="keyword">val</span> minBid = <span class="number">10</span></div><div class="line">        <span class="keyword">val</span> closing = <span class="keyword">new</span> <span class="type">Date</span>()</div><div class="line"></div><div class="line">        <span class="keyword">val</span> helloActor = <span class="keyword">new</span> <span class="type">HelloActor</span></div><div class="line">        helloActor.start()</div><div class="line">        helloActor ! <span class="string">"leo"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　通过重写 Actor 中的 <code>act</code> 方法即可简单的实现多线程编程，Actor 中有个特殊的标识符 <code>!</code>，该符号其实是是一种缩写，即可将 <code>helloActor.!(&quot;leo&quot;)</code> 缩写为 <code>helloActor ! &quot;leo&quot;</code>，代表将数据传递给 Actor，由 Actor 内部的 <code>receive case</code> 接受数据并处理，当然也可通过 <code>receiveWithin</code> 控制数据传递时间，若超时，则默认触发 <code>TIMEOUT</code> 处理模式。</p><h3 id="第四章表达式与简单函数">第四章：表达式与简单函数</h3><p>该章主要有两个例子：1、牛顿法求平方根；2、尾递归，具体如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Sqrt</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sqrtIter</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</div><div class="line">            <span class="keyword">if</span> (isGoodEnough(guess, x)) guess</div><div class="line">            <span class="keyword">else</span> sqrtIter(improve(guess, x), x)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">improve</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) = &#123;</div><div class="line">            (guess + x / guess) / <span class="number">2</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isGoodEnough</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) = (guess * guess - x).abs &lt; <span class="number">0.001</span>    <span class="comment">// guess * guess == x</span></div><div class="line"></div><div class="line">        sqrtIter(<span class="number">1.0</span>, x)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">TailRecursion</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">facorial</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> n * facorial(n<span class="number">-1</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">facorialTail</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">facorialIter</span></span>(n: <span class="type">Int</span>, res: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">            <span class="keyword">if</span> (n == <span class="number">0</span>) res</div><div class="line">            <span class="keyword">else</span> facorialIter(n<span class="number">-1</span>, res * n)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        facorialIter(n, <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleFunc</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> sqrtValue = <span class="type">Sqrt</span>.sqrt(<span class="number">0.01</span>)</div><div class="line">        println(sqrtValue)</div><div class="line"></div><div class="line">        <span class="keyword">val</span> gcdValue = <span class="type">TailRecursion</span>.gcd(<span class="number">14</span>,<span class="number">21</span>)</div><div class="line">        println(gcdValue)</div><div class="line"></div><div class="line">        <span class="keyword">val</span> facorialValue = <span class="type">TailRecursion</span>.facorial(<span class="number">5</span>)</div><div class="line">        println(facorialValue)</div><div class="line"></div><div class="line">        <span class="keyword">val</span> facorialTailValue = <span class="type">TailRecursion</span>.facorialTail(<span class="number">5</span>)</div><div class="line">        println(facorialTailValue)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　由于并没有引入新的语法，就简单聊聊这两个例子吧。牛顿法求平方根主要在于构造一个特殊的二分函数 <span class="math inline">\(y_{i+1} = (y_i + x / y_i)/2, i=0,1,2,3,..., y_0=1\)</span> ，如此迭代，直到 <span class="math inline">\(|y_i^2-x| &lt; \epsilon\)</span> ，得到 <span class="math inline">\(y_i\)</span> 即为 x 的平方根，更朴素一点的求多次方根就是利用二分法，分 [0, 1] 和 [1, +∞] 两个区间即可，对应从 [x, 1] 和 [1, x] 开始二分取值。至于尾递归，以前简单的写过一点，即最后递归调用原函数时，原函数不会再参与任何计算表达式。尾递归的好处在于当编译器或解释器支持尾递归时，将不会产生普通递归时的压栈操作，即不用担心递归层次太深，尾递归将类似循环迭代处理。</p><h3 id="第五章高阶函数">第五章：高阶函数</h3><p>　　高阶函数（First-Class Functions），支持以函数作为参数或返回值，也可将函数赋值给其它变量，由此也可引出闭包和柯里化，闭包是指将内嵌函数作为返回值，而柯里化是指将多个参数分解为独立参数传递给函数，如：<span class="math inline">\(f(args_1,args_2,...,args_n)=f(args_1)(args_2)(...)(args_n)\)</span>。下面以求函数的不动点为例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">FirstClassFunctions</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> tolerance = <span class="number">0.0001</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isCloseEnough</span></span>(x: <span class="type">Double</span>, y: <span class="type">Double</span>) = ((x-y) / x).abs &lt; tolerance</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fixedPoint</span></span>(f: <span class="type">Double</span> =&gt; <span class="type">Double</span>)(firstGuess: <span class="type">Double</span>) = &#123;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">iterate</span></span>(guess: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</div><div class="line">            <span class="keyword">val</span> next = f(guess)</div><div class="line">            <span class="keyword">if</span> (isCloseEnough(guess, next)) next</div><div class="line">            <span class="keyword">else</span> iterate(next)</div><div class="line">        &#125;</div><div class="line">        iterate(firstGuess)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averageDamp</span></span>(f: <span class="type">Double</span> =&gt; <span class="type">Double</span>)(x: <span class="type">Double</span>) = (x + f(x)) / <span class="number">2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = fixedPoint(averageDamp(y =&gt; x/y))(<span class="number">1.0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        println(sqrt(<span class="number">0.01</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　该示例简单明了的展示了 Scala 中匿名函数，函数柯里化以及闭包。</p><h3 id="第六章类和对象">第六章：类和对象</h3><p>直接看下面的有理数示例吧，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 主构造函数</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">n: <span class="type">Int</span>, d: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">AnyRef</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) y</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">0</span>) gcd(-x, y)</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; <span class="number">0</span>) -gcd(x, -y)</div><div class="line">        <span class="keyword">else</span> gcd(y % x, x)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> g = gcd(n, d)</div><div class="line"></div><div class="line">    <span class="comment">// 构造函数重载（辅助构造函数）</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>() &#123;</div><div class="line">        <span class="keyword">this</span>(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment">// 调用主构造函数</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> number: <span class="type">Int</span> = <span class="keyword">if</span> (g != <span class="number">0</span>) n / g <span class="keyword">else</span> <span class="number">0</span></div><div class="line">    <span class="keyword">val</span> denom: <span class="type">Int</span> = <span class="keyword">if</span> (g != <span class="number">0</span>) d / g <span class="keyword">else</span> <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">+</span></span>(that: <span class="type">Rational</span>) = <span class="keyword">new</span> <span class="type">Rational</span>(number * that.denom + that.number * denom, denom * that.denom)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">-</span></span>(that: <span class="type">Rational</span>) = <span class="keyword">new</span> <span class="type">Rational</span>(number * that.denom - that.number * denom, denom * that.denom)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">*</span></span>(that: <span class="type">Rational</span>) = <span class="keyword">new</span> <span class="type">Rational</span>(number * that.number, denom * that.denom)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">/</span></span>(that: <span class="type">Rational</span>) = <span class="keyword">new</span> <span class="type">Rational</span>(number * that.denom, denom * that.number)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toNumber</span></span>: <span class="type">Double</span> = <span class="keyword">if</span> (denom != <span class="number">0</span>) number.toDouble / denom <span class="keyword">else</span> <span class="number">0.0</span></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">""</span> + number + <span class="string">"/"</span> + denom</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Rational</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> rational = <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">2</span>,<span class="number">1</span>) / <span class="keyword">new</span> <span class="type">Rational</span>()</div><div class="line">        println(rational.toNumber);</div><div class="line">        println(rational.toString);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　从有理数这个示例可以看出，Scala 的类支持操作符重载，也支持构造函数重载，同样支持继承，多继承也是支持的，每个父类用 <code>with</code> 关键字分隔就行。</p><h3 id="第七章条件类和模式匹配">第七章：条件类和模式匹配</h3><p>大致和第一章内容差不多，就不重复写了。</p><h3 id="第八章泛型">第八章：泛型</h3><p>　　大致也和第一章内容差不多，<em>值得一提的书中实现的泛型栈本质是一个链表，实现方法挺有意思的</em>。通过 <code>&lt;:</code> 标识符可约束泛型的类型，如 <code>[T &lt;: P[T]]</code> 表明泛型 T 必须类型 P 的子类型。而标识符 <code>&lt;%</code> 比 <code>&lt;:</code> 约束性弱一点，只要 T 能够通过隐式类型变换为 P 即可。若想约束为父类型，则需使用 <code>&gt;:</code> 标识符。</p><p>　　Scala 中有一种特殊的泛型，就是变化型注解，<code>trait List[+T]</code> 代表协变，表示当 B 类型是 A 类型子类时，<code>List[B]</code> 也可认为是 <code>List[A]</code> 的子类；<code>trait List[-T]</code> 代表逆变，当 B 类型是 A 类型子类时，<code>List[B]</code> 可认为是 <code>List[A]</code> 的父类。</p><p>　　Scala 中同样有元组，使用时也很方便，简单使用直接用括号声明即可，如 <code>def divmod(x: Int, y: Int): (Int, Int) = (x / y, x % y)</code>，该函数即返回一个元组，也可声明一个元组 <code>case class Tuple2[A, B](_1: A, _2: B)</code>，若需要取元组的元素可通过 <code>_i</code> 的方式，如 <code>val xy = divmod(3, 4); xy._1; xy._2;</code>，也可通过 match-case 语句取，如 <code>xy match { case (n, d) =&gt; println(&quot;quotient: &quot; + n + &quot;, rest: &quot; + d) }</code>。</p><h3 id="第九章list">第九章：List</h3><p>　　Scala 中的 List 其实是数组结构，并且是不可变的，可认为是 C++ 里的静态数组，不能往其中添加或删除元素，下面用数组排序示例下 List 的用法：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Sort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertSort</span></span>(xsl: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] = &#123;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(x: <span class="type">Int</span>, xs: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] = &#123;</div><div class="line">            xs <span class="keyword">match</span> &#123;</div><div class="line">                <span class="comment">// case Nil =&gt; List(x)</span></div><div class="line">                <span class="keyword">case</span> <span class="type">List</span>() =&gt; <span class="type">List</span>(x)</div><div class="line">                <span class="keyword">case</span> y :: ys =&gt; <span class="keyword">if</span> (x &lt;= y) x :: xs <span class="keyword">else</span> y :: insert(x, ys)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (xsl.isEmpty) <span class="type">Nil</span></div><div class="line">        <span class="keyword">else</span> insert(xsl.head, insertSort(xsl.tail))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span></span>[<span class="type">A</span>](less: (<span class="type">A</span>, <span class="type">A</span>) =&gt; <span class="type">Boolean</span>)(xs: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = &#123;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(xs1: <span class="type">List</span>[<span class="type">A</span>], xs2: <span class="type">List</span>[<span class="type">A</span>]): <span class="type">List</span>[<span class="type">A</span>] = &#123;</div><div class="line">            <span class="keyword">if</span> (xs1.isEmpty) xs2</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (xs2.isEmpty) xs1</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (less(xs1.head, xs2.head)) xs1.head :: merge(xs1.tail, xs2)</div><div class="line">            <span class="keyword">else</span>  xs2.head :: merge(xs1, xs2.tail)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> n = xs.length / <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) xs</div><div class="line">        <span class="keyword">else</span> merge(mergeSort(less)(xs take n), mergeSort(less)(xs drop n))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> xs = <span class="type">List</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>);</div><div class="line">        <span class="comment">// val xs = 3::2::1::1::Nil;</span></div><div class="line">        println(xs(<span class="number">0</span>), xs(<span class="number">1</span>), xs(xs.length<span class="number">-1</span>)) <span class="comment">// (4,1,6)</span></div><div class="line">        <span class="comment">// val ys = insertSort(xs);</span></div><div class="line">        <span class="keyword">val</span> ys = mergeSort((x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x &gt; y)(xs);</div><div class="line">        println(ys.mkString(<span class="string">" "</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　List 中有两个操作符非常类似，即 <code>::</code> 和 <code>:::</code>， 前者用于 List 中的元素和 List 连接，即创建一个新 List，新 List 为原 List 头插入元素后的 List，后者用于连接两个 List，即创建一个新 List ，新 List 为将第二个 List 的元素全部放入第一个 List 尾部的 List。字符 <code>Nil</code> 代表空 List 和 <code>List()</code> 等效，<code>head</code> 方法返回 List 的第一个元素，<code>tail</code> 方法返回除第一个元素之外的其它所有元素，还是一个 List，<code>isEmpty</code> 方法当 List 为空时返回 <code>true</code>。List 的 case-match 方法中，<code>case y :: ys</code> 其中 y 代表 xs.head，ys 代表 xs.tail。<code>(xs take n)</code> 表示取 List 前 n 个元素，<code>(xs drop n)</code> 表示取 List 前 n 个元素之外的元素，即与 (xs take n) 取得元素正好互补，而 <code>(xs split n)</code> 返回一个元组，元组中第一个元素为 (xs take n)，第二个元素为 (xs drop n)。关于 List 还有些更高阶得方法：filter，map, flatMap, reduceRight, foldRight 等方法就不继续写了。至于动态 List 可用 <code>ListBuffer</code> 结构，当然 Scala 中直接用 <code>Seq</code> 作为返回值和参数一般会更好些。</p><h3 id="第十章序列理解">第十章：序列理解</h3><p>　　Scala 中用来做序列理解的表达式是 <code>For-Comprehensions</code>，具体示例如下：<code>for (p &lt;persons if p.age &gt; 20) yield p.name</code> 相当于 <code>persons filter (p =&gt; p.age &gt; 20) map (p =&gt; p.name)</code>，可以简单认为 for-yield 方法是 filter 和 map 的集合体。下面具体用个 N-皇后（特例是 8 皇后）的示例来具体说明：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">NQueen</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">queens</span></span>(n: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isSafe</span></span>(col: <span class="type">Int</span>, queenList: <span class="type">List</span>[<span class="type">Int</span>], delta: <span class="type">Int</span>): <span class="type">Boolean</span> = &#123;</div><div class="line">            <span class="keyword">val</span> curRow = queenList.length<span class="number">-1</span> + delta</div><div class="line">            <span class="keyword">for</span> (row &lt;- <span class="type">List</span>.range(<span class="number">0</span>, queenList.length)) &#123;</div><div class="line">                <span class="keyword">val</span> queenCol = queenList(row)</div><div class="line">                <span class="keyword">val</span> queenRow = queenList.length<span class="number">-1</span> - row</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (queenCol == col) <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">                <span class="keyword">if</span> (queenRow == curRow) <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">                <span class="keyword">if</span> ((queenCol - col).abs == (queenRow - curRow).abs) <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">            <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">placeQueens</span></span>(k: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = &#123;</div><div class="line">            <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="type">List</span>(<span class="type">List</span>())</div><div class="line">            <span class="keyword">else</span> <span class="keyword">for</span> &#123; </div><div class="line">                queens &lt;- placeQueens(k<span class="number">-1</span>);</div><div class="line">                column &lt;- <span class="type">List</span>.range(<span class="number">0</span>, n);</div><div class="line">                <span class="keyword">if</span> isSafe(column, queens, <span class="number">1</span>) </div><div class="line">            &#125; <span class="keyword">yield</span> column :: queens</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        placeQueens(n)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">        <span class="keyword">val</span> queenList = queens(<span class="number">8</span>);</div><div class="line">        println(<span class="string">"queenCount: "</span> + queenList.length)  <span class="comment">// 92</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>for-yield 表达式中 for 中可以写多条语句，代表多重循环，第 5 行的 for 代表 for 循环，<code>&lt;-</code> 表示取 List 中的元素。</p><hr><p>　　剩下的几章就没啥特别要写的，重点就两个特性，一个是 Stream ，一个 Lazy，Stream 和 List 有点类似，主要区别在于 Stream 是即时返回的，算一个返回一个，而 List 一般是全部计算完再返回一个 List；Lazy 一般用作常量的修饰符，主要作用是只用该常量被用到时才赋值，否则一直为空，有点类似常见的先判空再取值的封装。</p><h2 id="后记">后记</h2><p>　　曾看到过通过刷题去学习新语言的方式，一直都以为很粗暴，但这次照着「Scala By Example」敲下来，感觉还挺有效的，同时也巩固了一下基本的算法知识，后续再把 twitter 的 「Effective Scala」再看一下应该就差不多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　最近要改行做大数据相关的东西了，经调研大数据开发的语言还是用 Scala 好，当然 Java 也可以，毕竟都运行在 JVM 上，不过 Java 也有很长时间没用过了，所以对于 Shaun 来说用 Scala 和 Java 的代价是一样的，都需要学习一下，所以决定用对大数据更友好的 Scala。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="language" scheme="http://cniter.github.io/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>时空查询之ECQL</title>
    <link href="http://cniter.github.io/posts/489fa7b3.html"/>
    <id>http://cniter.github.io/posts/489fa7b3.html</id>
    <published>2021-01-23T12:59:21.000Z</published>
    <updated>2021-01-24T13:00:55.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　ECQL 是 CQL 的扩展，CQL 是 OGC 标准查询语言，而 ECQL 是 GeoTools 为更好的方便查询，在编程实现时扩展了 CQL，主要扩展在于其移除了 CQL 的一些限制（属性必须在比较运算符的左边，不能创建 Id Filter 进行查询等限制），也和 SQL 更相似。所以可简单认为 CQL 是书面上的标准，而 ECQL 是事实上的标准。</p><a id="more"></a><h2 id="谓词篇">谓词篇</h2><p>时间查询主要有以下几个查询谓词：</p><table><colgroup><col style="width:36%"><col style="width:63%"></colgroup><thead><tr class="header"><th>谓词</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>T <strong>TEQUALS</strong> Time</td><td>测试 T 和给定时间相等，相当于 T == Time。</td></tr><tr class="even"><td>T <strong>BEFORE</strong> Time</td><td>测试 T 在给定时间之前，相当于 T &lt; Time。</td></tr><tr class="odd"><td>T <strong>BEFORE OR DURING</strong> Time Period</td><td>测试 T 在给定时间段之前或其中，相当于 T &lt;= TimePeriod[1]。</td></tr><tr class="even"><td>T <strong>DURING</strong> Time Period</td><td>测试 T 在给定时间段其中，相当于 TimePeriod[0] &lt;= T &lt;= TimePeriod[1]。</td></tr><tr class="odd"><td>T <strong>DURING OR AFTER</strong> Time Period</td><td>测试 T 在给定时间段其中或之后，相当于 TimePeriod[0] &lt;= T。</td></tr><tr class="even"><td>T <strong>AFTER</strong> Time</td><td>测试 T 在给定时间之后，相当于 T &gt; Time。</td></tr></tbody></table><p>时间段以 <code>/</code> 分隔符区分前后两个时间，时间格式一般为 yyyy-MM-dd’T’HH:mm:ss.SSS’Z’。</p><p>空间查询主要有以下几个查询谓词：</p><table><colgroup><col style="width:50%"><col style="width:50%"></colgroup><thead><tr class="header"><th>谓词</th><th>作用</th></tr></thead><tbody><tr class="odd"><td><strong>INTERSECTS</strong>(A: Geometry, B: Geometry)</td><td>测试 A 与 B 相交，与 DISJOINT 相反。</td></tr><tr class="even"><td><strong>DISJOINT</strong>(A: Geometry, B: Geometry)</td><td>测试 A 与 B 不相交，与 INTERSECTS 相反。</td></tr><tr class="odd"><td><strong>CONTAINS</strong>(A: Geometry, B: Geometry)</td><td>测试 A 包含 B，与 WITHIN 相反。</td></tr><tr class="even"><td><strong>WITHIN</strong>(A: Geometry, B: Geometry)</td><td>测试 B 包含 A，即 A 在 B 中，与 CONTAINS 相反。</td></tr><tr class="odd"><td><strong>TOUCHES</strong>(A: Geometry, B: Geometry)</td><td>测试 A 的边界是否与 B 的边界接触，但内部不相交。</td></tr><tr class="even"><td><strong>CROSSES</strong>(A: Geometry, B: Geometry)</td><td>测试 A 与 B 是否相交，但不存在包含关系。</td></tr><tr class="odd"><td><strong>OVERLAPS</strong>(A: Geometry, B: Geometry)</td><td>测试 A 与 B 是否重叠，需满足 A 与 B 是同一类型（如都是 POLYGON），并且相交区域同样是 A 和 B 的类型（只能是 POLYGON，不能是 POINT）。</td></tr><tr class="even"><td><strong>EQUALS</strong>(A: Geometry, B: Geometry)</td><td>测试 A 与 B 完全相等。</td></tr><tr class="odd"><td><strong>RELATE</strong>(A: Geometry, B: Geometry, nineIntersectionModel: String)</td><td>测试 A 与 B 是否满足 <strong>DE-9IM</strong> 模型，该模型可模拟上述所有情况。</td></tr><tr class="even"><td><strong>DWITHIN</strong>(A: Geometry, B: Geometry, distance: double, units: String)</td><td>测试 A 与 B 的最短距离是否不超过多少距离，单位有（<code>feet</code>, <code>meters</code>, <code>statute miles</code>, <code>nautical miles</code>, <code>kilometers</code>）。</td></tr><tr class="odd"><td><strong>BEYOND</strong>(A: Geometry, B: Geometry, distance: Double, units: String)</td><td>测试 A 与 B 的最短距离是否超过多少距离。</td></tr><tr class="even"><td><strong>BBOX</strong>(A: Geometry, leftBottomLng: Double, leftBottomLat: Double, rightTopLng: Double, rightTopLat: Double, crs=“EPSG:4326”)</td><td>测试 A 是否与给定 box 相交。</td></tr></tbody></table><p>Geometry 是指 WKT 格式的数据，主要有以下几种：</p><table><colgroup><col style="width:26%"><col style="width:73%"></colgroup><thead><tr class="header"><th>类型</th><th>示例</th></tr></thead><tbody><tr class="odd"><td><strong>POINT</strong></td><td>POINT(6 10)</td></tr><tr class="even"><td><strong>LINESTRING</strong></td><td>LINESTRING(3 4,10 50,20 25)</td></tr><tr class="odd"><td><strong>POLYGON</strong></td><td>POLYGON((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2))</td></tr><tr class="even"><td><strong>MULTIPOINT</strong></td><td>MULTIPOINT(3.5 5.6, 4.8 10.5)</td></tr><tr class="odd"><td><strong>MULTILINESTRING</strong></td><td>MULTILINESTRING((3 4,10 50,20 25),(-5 -8,-10 -8,-15 -4))</td></tr><tr class="even"><td><strong>MULTIPOLYGON</strong></td><td>MULTIPOLYGON(((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2)),((6 3,9 2,9 4,6 3)))</td></tr><tr class="odd"><td><strong>GEOMETRYCOLLECTION</strong></td><td>GEOMETRYCOLLECTION(POINT(4 6),LINESTRING(4 6,7 10))</td></tr></tbody></table><p><strong><em>※注：</em></strong> POLYGON 中的边界点必须闭合，即首尾点相同，若存在多个边界，则需要遵循 逆时针,顺时针,逆时针,顺时针… 的点排列顺序，逆时针封闭，顺时针开孔，以形成具有岛和洞的复杂多边形。</p><p>　　由于 WKT 标准只支持二维的坐标，为支持三维坐标以及齐次线性计算，所以在 PostGIS 中又有 EWKT 标准实现，EWKT 扩展了 WKT，带 <code>Z</code> 结尾用来支持三维坐标，带 <code>M</code> 结尾用来支持齐次线性计算，如 <code>POINTZ(6 10 3)</code>，<code>POINTM(6 10 1)</code>，<code>POINTZM(6 10 3 1)</code>，同时还支持坐标内嵌空间参考系，如 <code>SRID=4326;LINESTRING(-134.921387 58.687767, -135.303391 59.092838)</code>。GeoTools 19.0 之后也默认以 EWKT 进行解析和编码。</p><h2 id="查询篇">查询篇</h2><h3 id="属性字段查询">属性字段查询</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// 查询属性 ATTR1 小于 7 的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;ATTR1 &lt; (1 + ((3 / 2) * 4))&quot; );</div><div class="line"></div><div class="line">// 查询属性 ATTR1 小于属性 ATTR2 绝对值的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;ATTR1 &lt; abs(ATTR2)&quot; );</div><div class="line"></div><div class="line">// 查询属性 ATTR1 为 test 字符串的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;ATTR1 == &apos;test&apos;&quot; );</div><div class="line"></div><div class="line">// 查询属性 ATTR1 在 10 和 20 之间的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;ATTR1 BETWEEN 10 AND 20&quot; );</div><div class="line">Filter filter = ECQL.toFilter( &quot;ATTR1 &gt;= 10 AND ATTR1 &lt;= 20&quot; );</div><div class="line"></div><div class="line">// 多条件查询</div><div class="line">Filter filter = ECQL.toFilter(&quot;ATTR1 &lt; 10 AND ATTR2 &lt; 2 OR ATTR3 &gt; 10&quot; );</div><div class="line"></div><div class="line">// 查询属性 ATTR1 为 silver 或 oil 或 gold 的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;ATTR1 IN (&apos;silver&apos;,&apos;oil&apos;, &apos;gold&apos; )&quot;);</div><div class="line"></div><div class="line">// 以 ID 主键进行查询</div><div class="line">Filter filter = ECQL.toFilter(&quot;IN (&apos;river.1&apos;, &apos;river.2&apos;)&quot;);</div><div class="line">Filter filter = ECQL.toFilter(&quot;IN (300, 301)&quot;);</div></pre></td></tr></table></figure></div><h3 id="模糊查询">模糊查询</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 查询属性 ATTR1 包含 abc 字符串的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;ATTR1 LIKE &apos;%abc%&apos;&quot; );</div><div class="line"></div><div class="line">// 查询属性 ATTR1 开头不为 abc 字符串的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;ATTR1 NOT LIKE &apos;abc%&apos;&quot; );</div><div class="line"></div><div class="line">// 查询属性 cityName 开头为 new 的数据，忽略 new 的大小写</div><div class="line">Filter filter = ECQL.toFilter(&quot;cityName ILIKE &apos;new%&apos;&quot;);</div><div class="line"></div><div class="line">// 测试字符串是否包含</div><div class="line">Filter filter = ECQL.toFilter(&quot;&apos;aabbcc&apos; LIKE &apos;%bb%&apos;&quot;);</div></pre></td></tr></table></figure></div><h3 id="空属性查询">空属性查询</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 查询有属性 ATTR1 存在的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;ATTR1 EXISTS&quot; );</div><div class="line"></div><div class="line">// 查询属性 ATTR1 不存在的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;ATTR1 DOES-NOT-EXIST&quot; );</div><div class="line"></div><div class="line">// 查询 Name 为 NULL 的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;Name IS NULL&quot;);</div></pre></td></tr></table></figure></div><h3 id="时间查询">时间查询</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 查询时间属性 dtg 等于的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;dtg TEQUALS 2006-11-30T01:30:00Z&quot; );</div><div class="line"></div><div class="line">// 查询时间属性 dtg 在之后的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;dtg AFTER 2006-11-30T01:30:00Z&quot;);</div><div class="line"></div><div class="line">// 查询时间属性 dtg 在之前的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;dtg BEFORE 2006-11-30T01:30:00Z&quot;);</div><div class="line"></div><div class="line">// 查询时间属性 dtg 在之间的数据，+3:00 代表 GMT 时间 +3 小时，以 Z 结尾的时间就是 GMT 时间</div><div class="line">Filter filter = ECQL.toFilter( &quot;dtg DURING 2006-11-30T00:30:00+03:00/2006-11-30T01:30:00+03:00 &quot;);</div><div class="line"></div><div class="line">// 查询时间属性 dtg 等于的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;dtg = 1981-06-20&quot;);</div><div class="line"></div><div class="line">// 查询时间属性 dtg 小于等于的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;dtg &lt;= 1981-06-20T12:30:01Z&quot;);</div></pre></td></tr></table></figure></div><h3 id="空间查询">空间查询</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 查询空间属性 geom 包含点的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;CONTAINS(geom, POINT(1 2))&quot; );</div><div class="line"></div><div class="line">// 查询空间属性 geom 与 box 相交的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;BBOX(geom, 10,20,30,40)&quot; );</div><div class="line"></div><div class="line">// 查询空间属性 geom 与点最短距离不超过 10 千米的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;DWITHIN(geom, POINT(1 2), 10, kilometers)&quot; );</div><div class="line"></div><div class="line">// 查询空间属性 geom 与线相交的数据（geom 也必须是线）</div><div class="line">Filter filter = ECQL.toFilter( &quot;CROSS(geom, LINESTRING(1 2, 10 15))&quot; );</div><div class="line"></div><div class="line">// 查询空间属性 geom 与 GEOMETRYCOLLECTION 相交的数据（geom 也必须是 GEOMETRYCOLLECTION）</div><div class="line">Filter filter = ECQL.toFilter( &quot;INTERSECT(geom, GEOMETRYCOLLECTION (POINT (10 10),POINT (30 30),LINESTRING (15 15, 20 20)) )&quot; );</div><div class="line"></div><div class="line">// 查询空间属性 geom 与线相交的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;CROSSES(geom, LINESTRING(1 2, 10 15))&quot; );</div><div class="line"></div><div class="line">// 查询空间属性 geom 与 GEOMETRYCOLLECTION 相交的数据</div><div class="line">Filter filter = ECQL.toFilter( &quot;INTERSECTS(geom, GEOMETRYCOLLECTION (POINT (10 10),POINT (30 30),LINESTRING (15 15, 20 20)) )&quot; );</div><div class="line"></div><div class="line">// 查询空间属性 geom 与包含线的数据</div><div class="line">Filter filter = ECQL.toFilter(&quot;RELATE(geom, LINESTRING (-134.921387 58.687767, -135.303391 59.092838), T*****FF*)&quot;);</div></pre></td></tr></table></figure></div><hr><p>　　在 GeoTools 中，可通过 FilterFactory 来构造 Filter，而不是直接写字符串，具体示例如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="JAVA"><figure class="highlight hljs java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();</div><div class="line"></div><div class="line"><span class="comment">// 相当于 Filter filter1 = ECQL.toFilter("ATTR1 = 1 AND ATTR2 &lt; 4" );</span></div><div class="line">List&lt;Filter&gt; filterList = ECQL.toFilterList(<span class="string">"ATTR1=1; ATTR2&lt;4"</span>);</div><div class="line">Filter filter1 = ff.and(filterList);</div><div class="line"></div><div class="line"><span class="comment">// 相当于 Filter filter2 = ECQL.toFilter( "BBOX(geom, 10,20,30,40)" );</span></div><div class="line">Filter filter2 = ff.bbox(<span class="string">"geom"</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="string">"EPSG:4326"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 相当于 Filter filter3 = ECQL.toFilter( "dtg DURING 2006-11-29T00:30:00Z/2006-11-30T00:30:00Z");</span></div><div class="line">Date startTime = ZonedDateTime.of(<span class="number">2006</span>, <span class="number">11</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneOffset.UTC);</div><div class="line">Date endTime = Date.from(startTime.plusDays(<span class="number">1</span>).toInstant());</div><div class="line">Filter filter3 = ff.between(ff.property(<span class="string">"dtg"</span>), ff.literal(startTime), ff.literal(endTime));</div></pre></td></tr></table></figure></div><h2 id="后记">后记</h2><p>　　基本可认为 CQL 和 SQL 中查询条件差不多，虽然不支持分组查询等复杂 SQL 特性，但对于一般的时空查询基本够用，CQL 中还有些空间操作函数就不继续写了，如取面积，取缓冲区，取交集，取长度等等，有需要的可自行查询 <a href="http://udig.github.io/docs/user/concepts/Constraint%20Query%20Language.html" target="_blank" rel="external">uDig Common Query Language</a>。</p><h2 id="参考资料">参考资料</h2><p><a href="http://docs.geotools.org/latest/userguide/library/cql/cql.html" target="_blank" rel="external">GeoTools CQL</a></p><p><a href="http://docs.geotools.org/stable/userguide/library/cql/ecql.html" target="_blank" rel="external">GeoTools ECQL</a></p><p><a href="https://docs.geoserver.org/latest/en/user/filter/ecql_reference.html#ecql-reference" target="_blank" rel="external">GeoServer ECQL Reference</a> / <a href="https://blog.csdn.net/neimeng0/article/details/79914880" target="_blank" rel="external">GeoServer 属性查询和空间查询支持 CQL / ECQL过滤器语言</a></p><p><a href="https://blog.csdn.net/ucs426/article/details/99780891" target="_blank" rel="external">WKT解读</a></p><p><a href="https://www.cnblogs.com/denny402/p/4968201.html" target="_blank" rel="external">GEOS库学习之三：空间关系、DE-9IM和谓词</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　ECQL 是 CQL 的扩展，CQL 是 OGC 标准查询语言，而 ECQL 是 GeoTools 为更好的方便查询，在编程实现时扩展了 CQL，主要扩展在于其移除了 CQL 的一些限制（属性必须在比较运算符的左边，不能创建 Id Filter 进行查询等限制），也和 SQL 更相似。所以可简单认为 CQL 是书面上的标准，而 ECQL 是事实上的标准。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="language" scheme="http://cniter.github.io/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>GeoMesa踩坑指北</title>
    <link href="http://cniter.github.io/posts/9978824c.html"/>
    <id>http://cniter.github.io/posts/9978824c.html</id>
    <published>2021-01-16T09:52:09.000Z</published>
    <updated>2021-01-16T14:39:38.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　需要做个 GeoMesa 的微服务，简单熟悉一下 GeoMesa。</p><a id="more"></a><h2 id="基础篇">基础篇</h2><p>　　GeoMesa 可以说是大数据中的 PostGIS，主要用来在存储和处理 GIS 数据时提供相应的索引，从而加快处理速度。GeoMesa 基于 GeoTools，其中最重要的两个概念就是 SimpleFeatureType 和 SimpleFeature，SimpleFeatureType 对应的是关系型数据库中表的描述（表明，表的列字段属性信息等），而 SimpleFeature 对应的是表中每行数据。下面重点谈谈 GeoMesa 中的 SimpleFeatureType 以及其创建索引方式。</p><p>　　在 GeoMesa 中通常使用 SimpleFeatureTypes.createType 方法进行创建，该方法有两个重载，以没有 namespace 参数的方法为例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createType</span></span>(typeName: <span class="type">String</span>, spec: <span class="type">String</span>): <span class="type">SimpleFeatureType</span> = &#123;</div><div class="line">    <span class="keyword">val</span> (namespace, name) = parseTypeName(typeName)</div><div class="line">    createType(namespace, name, spec)</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>先通过 parseTypeName 解析 typeName，以 <code>:</code> 作为分隔符，取最后一个有效（不为空）字符串作为表名（name），其余部分如有效则作为 namespace，否则 namespace 则为 null。spec 参数的通用形式有以下几种：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> spec = <span class="string">"name:String,dtg:Date,*geom:Point:srid=4326"</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> spec = <span class="string">"name:String,dtg:Date,*geom:Point:srid=4326;geomesa.indices.enabled='z2,id,z3'"</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> spec = <span class="string">"name:String:index=true,tags:String:json=true,dtg:Date:default=true,*geom:Point:srid=4326;geomesa.indices.enabled='z2,id,z3'"</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> spec = <span class="string">"userId:String,trackId:String,altitude:Double,dtg:Date,*geom:Point:srid=4326;geomesa.index.dtg='dtg',geomesa.table.sharing='true',geomesa.indices='z3:4:3,z2:3:3,id:2:3',geomesa.table.sharing.prefix='\\u0001'"</span></div></pre></td></tr></table></figure></div><p>先使用 <code>;</code> 分隔符，再使用 <code>,</code> 分隔符，最后使用 <code>:</code> 分隔符。<code>;</code> 分隔符将 spec 分割为两个字符串：前者表示表中的全部列属性信息，列属性经过 <code>,</code> 分隔符分割为多列，列又经过 <code>:</code> 分隔符分割为 列名，列数据类型，列的一些属性（是否是索引，json 数据，默认索引等），而列名首字母 <code>*</code> 代表该字段是用于索引的 geometry 类型，一般采用 WKT 格式进行描述，当然存在数据库时会以字节码进行压缩；后者表示创建表时的 userData，同样经过 <code>,</code> 分隔符分割为多个 userData，userData 的一些默认属性可在 SimpleFeatureTypes.Configs 中看到，其它的可以用户自定义，这里重点说一下 <code>geomesa.indices.enabled</code> 属性，目前 GeoMesa 支持 8 种索引，分别为：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&quot;attr&quot;, // 属性索引</div><div class="line">&quot;id&quot;, // 主键索引</div><div class="line">&quot;s2&quot;, // Hilbert 曲线点空间索引</div><div class="line">&quot;s3&quot;, // Hilbert 曲线点时空索引</div><div class="line">&quot;z2&quot;, // Z 型曲线点空间索引</div><div class="line">&quot;xz2&quot;, // Z 型曲线线面空间索引</div><div class="line">&quot;z3&quot;,  // Z 型曲线点时空索引</div><div class="line">&quot;xz3&quot; // Z 型曲线线面时空索引</div></pre></td></tr></table></figure></div><p>　　由于 GeoMesa 中的索引一般存在多个版本，而 <code>geomesa.indices.enabled</code> 默认使用最新的版本，若需要指定版本，需要使用 <code>geomesa.indices</code>，<strong><em>该属性是 geomesa 内部属性，不对外开放</em></strong>，通用格式为：</p><p></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">s"<span class="subst">$name</span>:<span class="subst">$version</span>:<span class="subst">$&#123;mode.flag&#125;</span>:<span class="subst">$&#123;attributes.mkString(":")&#125;</span>"</span></div></pre></td></tr></table></figure></div><p></p><p>name 代表索引类别，version 代表索引版本，mode.flag 代表索引模式（是否支持读写，一般为3，支持读也支持写），attributes 代表是哪些字段需要建立该索引。spec 参数可以只有描述列属性的字段，即不带任何 useData 信息，GeoMesa 会默认添加索引信息，若存在空间和时间字段，则会默认建立 z3（空间字段为点 Point 类型） 或 xz3（空间字段为线面 非Point 类型） 索引，若有多个空间和时间字段，建立索引的字段为第一个空间和第一个时间字段；若只存在空间字段，则会建立 z2 或 xz2 索引；若只有时间字段，则默认建立时间属性索引。当然如没有在 spec 指明索引信息，可以在后续继续添加信息，如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="JAVA"><figure class="highlight hljs java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.locationtech.geomesa.utils.interop.SimpleFeatureTypes;</div><div class="line"></div><div class="line">String spec = <span class="string">"name:String,dtg:Date,*geom:Point:srid=4326"</span>;</div><div class="line">SimpleFeatureType sft = SimpleFeatureTypes.createType(<span class="string">"mySft"</span>, spec);</div><div class="line"><span class="comment">// enable a default z3 and a default attribute index</span></div><div class="line">sft.getUserData().put(<span class="string">"geomesa.indices.enabled"</span>, <span class="string">"z3,attr:name"</span>);</div><div class="line"><span class="comment">// or, enable a default z3 and an attribute index with a Z2 secondary index</span></div><div class="line">sft.getUserData().put(<span class="string">"geomesa.indices.enabled"</span>, <span class="string">"z3,attr:name:geom"</span>);</div><div class="line"><span class="comment">// or, enable a default z3 and an attribute index with a temporal secondary index</span></div><div class="line">sft.getUserData().put(<span class="string">"geomesa.indices.enabled"</span>, <span class="string">"z3,attr:name:dtg"</span>);</div></pre></td></tr></table></figure></div><h2 id="坑篇">坑篇</h2><h3 id="导入-osm-数据问题">导入 OSM 数据问题</h3><p>　　在<a href="https://www.geomesa.org/documentation/stable/user/convert/premade/osm.html" target="_blank" rel="external">导入 osm 数据</a>时，若使用 osm-ways 作为 SimpleFeatureType，则 geomesa 会使用数据库存储 node 临时使用，这时其默认使用 H2 Database，若想使用其它数据库，则需要在 lib 导入相应 jdbc 包，若使用 postgresql 数据库，则 geomesa 会触发一个 bug，因为 postgresql 没有 double 类型，只有 double precision 类型，这将导致建表出错。详情见 geomesa/geomesa-convert/geomesa-convert-osm/src/main/scala/org/locationtech/geomesa/convert/osm/OsmWaysConverter.scala 中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SCALA"><figure class="highlight hljs scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">createNodesTable</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> sql = <span class="string">"create table nodes(id BIGINT NOT NULL PRIMARY KEY, lon DOUBLE, lat DOUBLE);"</span></div><div class="line">    <span class="type">WithClose</span>(connection.prepareStatement(sql))(_.execute())</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>所以若需要使用 geomesa-convert-osm 导入 osm 数据时，需要进入 geomesa/geomesa-convert/geomesa-convert-osm 文件夹中输入命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn dependency:copy-dependencies -DoutputDirectory=./depLib</div></pre></td></tr></table></figure></div><p>导出 geomesa-convert-osm 依赖包，将其中的 h2，osm4j，dynsax，trove4j 等一系列库放入 $GEOMESA_HBASE_HOME/lib 中。</p><h3 id="s2-索引问题">s2 索引问题</h3><p>　　s2 索引即 Google S2 Geometry 算法基于 Hilbert 曲线生成一种索引，GeoMesa 的 s2 索引是一个国人提交的，目前 3.2 版本只支持点的时空索引，不支持线面的时空索引，当然官方也在实现自己的 Hilbert 曲线，希望后续 GeoMesa 中会有 h2 索引。Shaun 在导入 osm 数据并启用 s2 索引时，报错，被提示不支持，对比 geomesa-index-api22Index.scala 和 geomesa-index-api22Index.scala 两文件的 defaults 函数可发现 S2Index 直接返回空，而在 geomesa-index-api.scala 中 fromName 函数需要调用 defaults 函数，从而导致 s2 索引不支持，修改 S2Index 的 defaults 函数即可（别忘了在 S2Index 类中首行加上 <code>import org.locationtech.geomesa.utils.geotools.RichSimpleFeatureType.RichSimpleFeatureType</code>）。</p><h2 id="后记">后记</h2><p>　　暂时就了解了这么多，等后续熟悉的更多再继续更吧 (ง •_•)ง。</p><h2 id="附录">附录</h2><h3 id="geomesa-命令行工具部分参数">GeoMesa 命令行工具部分参数</h3><p>Geomesa 命令行参数：</p><table><colgroup><col style="width:25%"><col style="width:74%"></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-c, –catalog *</td><td>存放 schema 元数据的catalog 表（相当于数据库）</td></tr><tr class="even"><td>-f, –feature-name</td><td>schema 名（相当于数据库中的表）</td></tr><tr class="odd"><td>-s, –spec</td><td>要创建 SimpleFeatureType 的说明（即表中列的描述信息，表的 schema，如 &quot;name:String,age:Int,dtg:Date,*geom:Point:srid=4326&quot;）</td></tr><tr class="even"><td>-C, –converter</td><td>指定转换器，必须为一下之一：1、已经在classpath中的converter 名；2、converter 的配置（一个字符串）；3、包括converter的配置的名</td></tr><tr class="odd"><td>–converter-error-mode</td><td>自定义的转换器的error mode</td></tr><tr class="even"><td>-t, –threads</td><td>指定并行度</td></tr><tr class="odd"><td>–input-format</td><td>指定输入源格式（如csv, tsv, avro, shp, json,）</td></tr><tr class="even"><td>–no-tracking</td><td>指定提交的 ingest job何时终止（在脚本中常用）</td></tr><tr class="odd"><td>–run-mode</td><td>指定运行模式，必须为：local（本地）、distributed （分布式）、distributedcombine（分布式组合）之一</td></tr><tr class="even"><td>–split-max-size</td><td>在分布式中，指定切片最大大小（字节）</td></tr><tr class="odd"><td>–src-list</td><td>输入文件为文本文件，按行输入</td></tr><tr class="even"><td>–force</td><td>禁用任何的提示</td></tr><tr class="odd"><td>[files]…</td><td>指定输入的文件</td></tr></tbody></table><p>参考资料：<a href="https://blog.csdn.net/qq_21705851/article/details/93392202" target="_blank" rel="external">GeoMesa命令行工具—摄取命令</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　需要做个 GeoMesa 的微服务，简单熟悉一下 GeoMesa。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="bigdata" scheme="http://cniter.github.io/tags/bigdata/"/>
    
      <category term="geomesa" scheme="http://cniter.github.io/tags/geomesa/"/>
    
  </entry>
  
  <entry>
    <title>IDEA使用Docker环境开发调试</title>
    <link href="http://cniter.github.io/posts/3692cd6.html"/>
    <id>http://cniter.github.io/posts/3692cd6.html</id>
    <published>2021-01-10T08:50:12.000Z</published>
    <updated>2021-01-17T09:51:15.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　IDEA 以前基本没用过，只是简单用过 Android Studio，还基本都忘记了 ( ╯□╰ )，以后应该会用 Scala 做一些大数据方面的东西，而大数据的环境都是 Linux 下的，而 Shaun 日常都是在 Windows 下开发，所以需要用日前做的容器环境来测试调试运行程序，简单记录一下 IDEA 在这方面的使用方法。</p><a id="more"></a><h2 id="运行篇">运行篇</h2><p>　　右键项目名（HelloWorld），新建文件（New =》File），指定文件名为 <code>Dockerfile</code> 。写入内容示例如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="DOCKERFILE"><figure class="highlight hljs dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> stc:<span class="number">2.0</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> ./target/classes/ /tmp</span></div><div class="line"><span class="bash">WORKDIR /tmp</span></div><div class="line"><span class="bash">ENTRYPOINT [<span class="string">"scala"</span>,<span class="string">"HelloWorld"</span>]</span></div></pre></td></tr></table></figure></div><p>点击左上角绿色双箭头，可编辑 Dockerfile（Edit ‘Dockerfile’） ，指定当前上下文目录（Context folder），Contaier name 等容器启动选项。直接运行 Dockerfile（Run ‘Dockerfile’），IDEA 即可自动创建容器，并在容器中运行程序，程序运行完则容器自动停止，若需要运行存在外部依赖的程序，则只能以 jar 包的方式运行。</p><p>　　设置 IDEA 生成 jar 包如下：在最上面的菜单栏中 File =》Project Structure =》Artifacts =》+ =》JAR =》From modules with dependencies，选择 Main Class，点击右边的文件夹图标即可选择相应类，由于存在外部依赖，所以不能直接用默认的 extract to the target JAR，而是应该选择下面的 <strong>copy to the output directory and link via manifest</strong>，点击 OK 后，自动或手动选择导出的依赖 jar 包，点击 OK。在最上面的菜单栏中 Build =》Build Artifacts…，可在 out/artifacts/HelloWorld_jar 文件夹中生成所有 jar 包。之后编辑 Dockerfile， <strong>更改 Dockerfile 上下文目录</strong>为 out/artifacts/HelloWorld_jar ，指定容器名，在 Command 中输入 <code>java -jar HelloWorld.jar</code> 修改 Dockerfile 中第 2 行命令为 <code>COPY . /tmp</code>，修改第 4 行命令为 <code>CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;HelloWorld.jar&quot;]</code>。之后运行 Dockerfile 即可在下面 Services 栏对应 Docker 容器 Attached Console 中看到程序运行结果。</p><h2 id="调试篇">调试篇</h2><p>　　除了使用 IDEA 生成 jar 包外，还需要使用 IDEA 的远程调试功能，设置 IDEA 远程调试功能如下：在最上面的菜单栏中 Run =》Edit Configurations… =》+ =》Remote JVM Debug，上方的 Debugger mode 中使用默认的 Attach to remote JVM， 在下面的 Before launch 添加 Launch Docker before debug。在弹窗中选择相应 Dockerfile，在下方的 Custom command 中输入 <code>java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 -jar HelloWorld.jar</code>， 完成后即可使用该配置在 IDEA 调试容器中运行的程序。</p><h2 id="后记">后记</h2><p>　　用这种方式使用 IDEA 确实达到了 Shaun 理想的结果，Windows 下开发，Docker 中调试和运行，应付简单的代码调试和运行确实是没问题，但是在复杂的分布式环境下总会碰到一些莫名奇妙的问题，这些问题就是纯粹的经验了。</p><h2 id="参考资料">参考资料</h2><p><a href="https://www.jetbrains.com/help/idea/supported-languages.html/running-a-java-app-in-a-container.html" target="_blank" rel="external">Run a Java application in a Docker container</a></p><p><a href="https://www.jetbrains.com/help/idea/supported-languages.html/debug-a-java-application-using-a-dockerfile.html#create-dockerfile-run-config" target="_blank" rel="external">Debug a Java application using a Dockerfile</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　IDEA 以前基本没用过，只是简单用过 Android Studio，还基本都忘记了 ( ╯□╰ )，以后应该会用 Scala 做一些大数据方面的东西，而大数据的环境都是 Linux 下的，而 Shaun 日常都是在 Windows 下开发，所以需要用日前做的容器环境来测试调试运行程序，简单记录一下 IDEA 在这方面的使用方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="devtool" scheme="http://cniter.github.io/tags/devtool/"/>
    
  </entry>
  
  <entry>
    <title>大数据环境搭建笔记</title>
    <link href="http://cniter.github.io/posts/af5e9ace.html"/>
    <id>http://cniter.github.io/posts/af5e9ace.html</id>
    <published>2021-01-03T01:50:26.000Z</published>
    <updated>2021-01-15T15:03:36.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　准备开始搞时空数据了，先简单搭一下环境。</p><a id="more"></a><p>准备搭的环境为：jdk-1.8.0，hadoop-3.2.1，hbase-2.2.6，geomesa-hbase_2.11-3.1.0，spark-3.0.1-bin-hadoop3.2，geoserver-2.16.5-bin，geomesa-hbase_2.11-3.2.0-SNAPSHOT，所用的包都已下好并解压到 /home 目录下。</p><p><strong><em>※注</em></strong>： <em>hbase-2.2.6 暂不支持最新的 hadoop-3.3.0</em>，Hadoop 也最好使用 jdk-1.8.0，java-11 会有问题。</p><h2 id="hadoop-环境">Hadoop 环境</h2><p>　　首先修改 /etc/hosts 文件中本机 ip 对应的名称为 master，若在容器中安装则需要在 run 开启容器就指定 <code>--hostname master</code>，否则改了也没用，下次启动容器时 hostname 又会回到初始状态，下面开启正式的配置。</p><p>修改 /home/hadoop-3.2.1/etc/hadoop/hadoop-env.sh 文件，添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_HOME</span></div></pre></td></tr></table></figure></div><p>修改 /home/hadoop-3.2.1/etc/hadoop/core-site.xml 文件，添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="XML"><figure class="highlight hljs xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- master 前面配置的主机名称 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- &lt;property&gt;</span></div><div class="line"><span class="comment">    &lt;name&gt;fs.default.name&lt;/name&gt;</span></div><div class="line"><span class="comment">    &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span></div><div class="line"><span class="comment">  &lt;/property&gt; --&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></div><p>修改 /home/hadoop-3.2.1/etc/hadoop/hdfs-site.xml 文件，添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="XML"><figure class="highlight hljs xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--指定SecondaryNameNode位置--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></div><p>修改 /home/hadoop-3.2.1/etc/hadoop/yarn-site.xml 文件，添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="XML"><figure class="highlight hljs xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></div><p>修改 /home/hadoop-3.2.1/etc/hadoop/mapred-site.xml 文件，添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="XML"><figure class="highlight hljs xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></div><p>在 /home/hadoop-3.2.1/sbin/start-dfs.sh 和 /home/hadoop-3.2.1/sbin/stop-dfs.sh 文件头添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line">HDFS_DATANODE_USER=root</div><div class="line">HDFS_DATANODE_SECURE_USER=hdfs</div><div class="line">HDFS_NAMENODE_USER=root</div><div class="line">HDFS_SECONDARYNAMENODE_USER=root</div></pre></td></tr></table></figure></div><p>在 /home/hadoop-3.2.1/sbin/start-yarn.sh 和 /home/hadoop-3.2.1/sbin/stop-yarn.sh 文件头添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line">YARN_RESOURCEMANAGER_USER=root</div><div class="line">HADOOP_SECURE_DN_USER=yarn</div><div class="line">YARN_NODEMANAGER_USER=root</div></pre></td></tr></table></figure></div><p>设置环境变量，在 /etc/profile 中添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SHELL"><figure class="highlight hljs shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">Hadoop Environment Setting</span></div><div class="line">export HADOOP_HOME=/home/hadoop-3.2.1</div><div class="line">export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native</div><div class="line">export LD_LIBRARY_PATH=$JAVA_LIBRARY_PATH</div><div class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</div></pre></td></tr></table></figure></div><p>由于容器中默认为 root 用户，所以在 /root/.bashrc 文件末尾添加 <code>source /etc/profile</code>，以开机启用设置的环境变量。</p><p>在启动 Hadoop 之前需要执行 <code>hdfs namenode -format</code> 进行格式化，启动命令为 <code>/home/hadoop-3.2.1/sbin/start-all.sh</code>。<em>后续若需要清空并重新设置 Hadoop 时，必须先删除 /home/hadoop/ 目录，再重新进行格式化。</em></p><h2 id="hbase-环境">HBase 环境</h2><p>修改 /home/hbase-2.2.6/conf/hbase-env.sh 文件，添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_HOME</span></div><div class="line"><span class="comment"># 使用自带的ZooKeeper管理</span></div><div class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span></div></pre></td></tr></table></figure></div><p>修改 /home/hbase-2.2.6/conf/hbase-site.xml 文件，添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="XML"><figure class="highlight hljs xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.dynamic.jars.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase/lib<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.maxclockskew<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>180000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Time difference of regionserver from master<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 修改默认8080 端口--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rest.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 2181 默认端口，尽量不要修改，geomesa-hbase 导入数据时默认连接端口为 2181--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.clientPort<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hbase/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- geomesa-hbase --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.coprocessor.user.region.classes<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.locationtech.geomesa.hbase.server.coprocessor.GeoMesaCoprocessor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></div><p>修改 /home/hbase-2.2.6/conf/regionservers 文件，修改为（原来为 localhost）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">master</div></pre></td></tr></table></figure></div><p>设置环境变量，在 /etc/profile 中添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SHELL"><figure class="highlight hljs shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">HBase Environment Setting</span></div><div class="line">export HBASE_HOME=/home/hbase-2.2.6</div><div class="line">export PATH=$PATH:$HBASE_HOME/bin</div></pre></td></tr></table></figure></div><p>配置好之后，执行 <code>start-hbase.sh</code> 启动 HBase。</p><h2 id="spark-环境">Spark 环境</h2><p>修改 /home/spark-3.0.1-bin-hadoop3.2/conf/spark-env.sh 文件，在文件末尾添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 配置JAVA_HOME，一般来说，不配置也可以，但是可能会出现问题，还是配上吧</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_HOME</span></div><div class="line"><span class="comment"># 一般来说，spark任务有很大可能性需要去HDFS上读取文件，所以配置上</span></div><div class="line"><span class="comment"># 如果说你的spark就读取本地文件，也不需要yarn管理，不用配</span></div><div class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$HADOOP_HOME</span>/etc/hadoop</div><div class="line"></div><div class="line"><span class="comment"># 设置Master的主机名</span></div><div class="line"><span class="built_in">export</span> SPARK_MASTER_HOST=master</div><div class="line"><span class="comment"># 提交Application的端口，默认就是这个，万一要改呢，改这里</span></div><div class="line"><span class="built_in">export</span> SPARK_MASTER_PORT=7077</div><div class="line"><span class="comment"># 每一个Worker最多可以使用的cpu core的个数，我虚拟机就一个...</span></div><div class="line"><span class="comment"># 真实服务器如果有32个，你可以设置为32个</span></div><div class="line"><span class="built_in">export</span> SPARK_WORKER_CORES=1</div><div class="line"><span class="comment"># 每一个Worker最多可以使用的内存，我的虚拟机就2g</span></div><div class="line"><span class="comment"># 真实服务器如果有128G，你可以设置为100G</span></div><div class="line"><span class="built_in">export</span> SPARK_WORKER_MEMORY=2g</div><div class="line"><span class="comment"># master web UI端口默认8080</span></div><div class="line"><span class="built_in">export</span> SPARK_MASTER_WEBUI_PORT=8090</div><div class="line"><span class="comment"># worker web UI端口默认8081</span></div><div class="line"><span class="built_in">export</span> SPARK_WORKER_WEBUI_PORT=8089</div></pre></td></tr></table></figure></div><p>复制 /home/spark-3.0.1-bin-hadoop3.2/conf/slaves.template 文件，并重命名为 slaves，将该文件尾修改为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 里面的内容原来为localhost，改为master </span></div><div class="line">master</div></pre></td></tr></table></figure></div><p>设置环境变量，在 /etc/profile 中添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SHELL"><figure class="highlight hljs shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export SPARK_HOME=/home/spark-3.0.1-bin-hadoop3.2</div><div class="line">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</div></pre></td></tr></table></figure></div><p>将 /home/spark-3.0.1-bin-hadoop3.2/sbin/start-all.sh 重命名为 start-spark-all.sh，将 /home/spark-3.0.1-bin-hadoop3.2/sbin/stop-all.sh 重命名为 stop-spark-all.sh，执行 <code>start-spark-all.sh</code> 启动 Spark。</p><h2 id="geomesa-hbase-环境">geomesa-hbase 环境</h2><h3 id="编译-geomesa">编译 geomesa</h3><p>克隆 <a href="https://gitee.com/mirrors/geomesa" target="_blank" rel="external">LocationTech GeoMesa</a> ，<strong>修改 pom.xml</strong>，即修改对应依赖的 hadoop 和 hbase 以及 spark 版本（spark 最新的3.0.1版本由 Scala-2.12 编译，而 Geomesa 编译目前采用 Scala-2.11， 所以 Spark 不能使用最新的版本，只能用 2.4.7）。进入 geomesa 根目录，使用命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mvn clean install -DskipTests</div><div class="line"></div><div class="line"><span class="comment"># 或仅编译 geomesa-hbase</span></div><div class="line">mvn clean install -pl geomesa-hbase -am -DskipTests</div></pre></td></tr></table></figure></div><p>编译 geomesa，中间可能会失败很多次，包下不来，可能需要挂代理或换源，重复使用命令多次即可。</p><h3 id="配置-geomesa-hbase">配置 geomesa-hbase</h3><p>将 /home/geomesa/geomesa-hbase/geomesa-hbase-dist/target/geomesa-hbase_2.11-3.2.0-SNAPSHOT-bin.tar.gz 解压为 /home/geomesa-hbase_2.11-3.2.0-SNAPSHOT，<strong>将 /home/geomesa-hbase_2.11-3.2.0-SNAPSHOT/dist/hbase/geomesa-hbase-distributed-runtime-hbase2_2.11-3.2.0-SNAPSHOT.jar 复制到 /home/hbase-2.2.6/lib/ 文件夹中</strong>，修改 /home/geomesa-hbase_2.11-3.2.0-SNAPSHOT/conf/dependencies.sh 文件，设置正确的Hadoop 和 hbase 版本，依次执行 /home/geomesa-hbase_2.11-3.2.0-SNAPSHOT/bin/install-dependencies.sh 和 /home/geomesa-hbase_2.11-3.2.0-SNAPSHOT/bin/install-shapefile-support.sh。设置环境变量，在 /etc/profile 中添加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GEOMESA_HBASE_HOME=/home/geomesa-hbase_2.11-3.2.0-SNAPSHOT</div><div class="line"><span class="built_in">export</span> GEOMESA_LIB=<span class="variable">$GEOMESA_HBASE_HOME</span>/lib</div><div class="line"><span class="built_in">export</span> GEOMESA_CONF_DIR=<span class="variable">$&#123;GEOMESA_HBASE_HOME&#125;</span>/conf</div><div class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:<span class="variable">$GEOMESA_LIB</span>:<span class="variable">$GEOMESA_CONF_DIR</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GEOMESA_HBASE_HOME</span>/bin</div></pre></td></tr></table></figure></div><h3 id="测试-geomesa-hbase">测试 geomesa-hbase</h3><p>启动 Hadoop 和 HBase 之后，可直接使用命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">geomesa-hbase ingest --catalog TestGeomesa --feature-name road --input-format shp <span class="string">"/home/shpdata/road.shp"</span></div></pre></td></tr></table></figure></div><p>导入 shp 数据，<strong>shp 不能有 id 字段</strong>，因为 Geomesa 在创建表时会默认生成一个 id 字段。</p><p>也可克隆 <a href="https://gitee.com/xfilove/geomesa-tutorials" target="_blank" rel="external">geomesa-tutorials</a> ，同样修改其中的 pom.xml 文件，进入 geomesa-tutorials 根目录，使用命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean install -pl geomesa-tutorials-hbase/geomesa-tutorials-hbase-quickstart -am</div></pre></td></tr></table></figure></div><p>编译 geomesa-tutorials，编译完成后，使用命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -cp geomesa-tutorials-hbase/geomesa-tutorials-hbase-quickstart/target/geomesa-tutorials-hbase-quickstart-3.2.0-SNAPSHOT.jar org.geomesa.example.hbase.HBaseQuickStart --hbase.zookeepers localhost --hbase.catalog geomesaTest</div></pre></td></tr></table></figure></div><p>导入数据进 Hbase，导入成功后可通过 <code>hbase shell</code> 进入 hbase，在 hbase shell 中通过 <code>list</code> 查看 hbase 现有的表。</p><h3 id="整合-geoserver">整合 geoserver</h3><p>导入依赖插件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">manage-geoserver-plugins.sh -l <span class="variable">$&#123;GEOSERVER_HOME&#125;</span>/webapps/geoserver/WEB-INF/lib/ -i</div></pre></td></tr></table></figure></div><p>修改 /home/geomesa-hbase_2.11-3.2.0-SNAPSHOT/bin/install-dependencies.sh 中第33行：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SH"><figure class="highlight hljs sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># install_dir="$&#123;GEOMESA_HBASE_HOME&#125;/lib"</span></div><div class="line">install_dir=<span class="string">"<span class="variable">$&#123;GEOSERVER_HOME&#125;</span>/webapps/geoserver/WEB-INF/classes"</span></div></pre></td></tr></table></figure></div><p>执行 install-dependencies.sh 安装插件，安装完后将 classes 中的 lib 都移到 ${GEOSERVER_HOME}/webapps/geoserver/WEB-INF/lib中。</p><h2 id="后记">后记</h2><p>　　环境搞起来真麻烦，在编译和运行 Geomesa 时总能遇到一些莫名奇妙的问题，Java 系的这一套确实很麻烦，尤其是各种依赖关系，不过最后总算是搞好了，能直接在 geoserver 中看到 geomesa 存在 hbase 里的地图。</p><h2 id="参考资料">参考资料</h2><p><a href="https://www.cnblogs.com/Mr-lin66/p/13378248.html" target="_blank" rel="external">Centos7系统 Hadoop+HBase+Spark环境搭建</a></p><p><a href="https://blog.csdn.net/weixin_41834634/article/details/89176473" target="_blank" rel="external">GeoMesa-HBase操作篇——安装</a></p><p><a href="https://blog.csdn.net/hsg77/article/details/82221531" target="_blank" rel="external">centos7安装geomesa2.0.2_hbase_geoserver2.13.2的方法</a></p><p><a href="https://www.cnblogs.com/heidsoft/p/8558419.html" target="_blank" rel="external">hadoop fs 命令使用</a></p><p><a href="https://www.geomesa.org/documentation/stable/tutorials/geomesa-quickstart-hbase.html" target="_blank" rel="external">GeoMesa HBase Quick Start</a></p><p><a href="https://www.geomesa.org/documentation/stable/user/hbase/install.html" target="_blank" rel="external">Installing GeoMesa HBase</a></p><p><a href="https://www.cnblogs.com/yszd/p/10039249.html" target="_blank" rel="external">Spark完全分布式集群搭建【Spark2.4.4+Hadoop3.2.1】</a></p><h2 id="附录">附录</h2><p>最后附上一些常用的端口及说明：</p><h3 id="hbase">Hbase</h3><table><thead><tr class="header"><th>配置</th><th>端口</th><th>说明</th><th></th></tr></thead><tbody><tr class="odd"><td>hbase.master.port</td><td>16000</td><td>HMaster绑定端口</td><td></td></tr><tr class="even"><td><strong>hbase.master.info.port</strong></td><td><strong>16010</strong></td><td><strong>HBase Master的Web UI端口</strong></td><td></td></tr><tr class="odd"><td>hbase.regionserver.port</td><td>16020</td><td>HBase RegionServer绑定的端口</td><td></td></tr><tr class="even"><td><strong>hbase.regionserver.info.port</strong></td><td><strong>16030</strong></td><td><strong>HBase RegionServer的Web UI端口</strong></td><td></td></tr><tr class="odd"><td>hbase.zookeeper.property.clientPort</td><td>2181</td><td>Zookeeper客户端连接端口</td><td></td></tr><tr class="even"><td>hbase.zookeeper.peerport</td><td>2888</td><td>Zookeeper节点内部之间通信的端口</td><td></td></tr><tr class="odd"><td>hbase.zookeeper.leaderport</td><td>3888</td><td>Zookeeper用来选举主节点的端口</td><td></td></tr><tr class="even"><td>hbase.rest.port</td><td>8080</td><td>HBase REST server的端口</td><td></td></tr><tr class="odd"><td>hbase.master.port</td><td>60000</td><td>HMaster的RPC端口</td><td></td></tr><tr class="even"><td>hbase.master.info.port</td><td>60010</td><td>HMaster的http端口</td><td></td></tr><tr class="odd"><td>hbase.regionserver.port</td><td>60020</td><td>HRegionServer的RPC端口</td><td></td></tr><tr class="even"><td>hbase.regionserver.info.port</td><td>60030</td><td>HRegionServer的http端口</td><td></td></tr><tr class="odd"><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="hadoop">Hadoop</h3><table><thead><tr class="header"><th>配置</th><th>端口</th><th>说明</th><th></th></tr></thead><tbody><tr class="odd"><td>fs.defaultFS</td><td>9000</td><td>hdfs访问端口</td><td></td></tr><tr class="even"><td>dfs.namenode.rpc-address</td><td>9001</td><td>DataNode会连接这个端口</td><td></td></tr><tr class="odd"><td>dfs.datanode.address</td><td>9866</td><td>DataNode的数据传输端口</td><td></td></tr><tr class="even"><td><strong>dfs.namenode.http-address</strong></td><td><strong>9870</strong></td><td><strong>namenode的web UI 端口</strong></td><td></td></tr><tr class="odd"><td><strong>yarn.resourcemanager.webapp.address</strong></td><td><strong>8088</strong></td><td><strong>YARN的http端口</strong></td><td></td></tr></tbody></table><h3 id="spark">Spark</h3><table><thead><tr class="header"><th></th><th>端口</th><th>说明</th><th></th></tr></thead><tbody><tr class="odd"><td></td><td>8080</td><td>master的webUI，Tomcat的端口号（已修改为8090）</td><td></td></tr><tr class="even"><td></td><td>8081</td><td>worker的webUI的端口号（已修改为8089）</td><td></td></tr><tr class="odd"><td></td><td>18080</td><td>historyServer的webUI的端口号</td><td></td></tr></tbody></table><p>需开放端口 22，2181，5432，8080，8088，8089，8090，9870，16010，16030。</p><p><code>docker run -dit --privileged=true --name STC2 --hostname master -v E:/Docker/ShareFile:/mnt/sharefile -p 22:22 -p 80:80 -p 2181:2181 -p 5432:5432 -p 8080-8090:8080-8090 -p 9870:9870 -p 16010:16010 -p 16030:16030 stc:2.0 init</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　准备开始搞时空数据了，先简单搭一下环境。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="note" scheme="http://cniter.github.io/tags/note/"/>
    
      <category term="bigdata" scheme="http://cniter.github.io/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>设计模式浅谈</title>
    <link href="http://cniter.github.io/posts/ae780057.html"/>
    <id>http://cniter.github.io/posts/ae780057.html</id>
    <published>2020-12-27T10:28:56.000Z</published>
    <updated>2020-12-31T14:17:10.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　进入职场一年半以来，Shaun 完全独立从 0 到 1 开发了 1.5 个项目（当然也有参与其它项目，但不是 Shaun 独立从 0 到 1 开发的，没多少控制权，就不谈了），一个网页版的高精地图编辑器，半个地图可视化系统，这里面 Shaun 用了不少设计模式，这篇就谈谈 Shaun 用过的和没用过的一些设计模式。</p><a id="more"></a><p>　　以「Head First 设计模式」为参考，Shaun 用 C++ 实现了一遍书中的例子（代理模式及其后面的模式除外），下面进入正文。</p><h2 id="模式篇">模式篇</h2><h3 id="策略模式">策略模式</h3><p>　　Shaun 个人认为最能体现面向对象编程思想（抽象封装继承多态）的一种模式，换句话说，只要真正理解和运用面向对象编程，一定会自然而然的用到策略模式。Shaun 在做高精地图编辑器时，需要设计一个渲染模块，渲染模块会包含高亮行为，高亮有两种，一种是直接改变颜色，一种是使用后期处理（OutlinePass 或 UnrealBloomPass 等）进行高亮，这时就需要在渲染类中组合高亮行为。</p><p>　　策略模式中涉及到的原则有：1、封装变化；2、多用组合，少用继承；3、针对接口编程，不针对实现编程。封装变化这点很考验程序员的经验水平，在写代码之初，往往预料不到变化，所以这一点一般是在编码过程中逐渐完善的，不断进行抽象，从而生成比较合理的基类；第二点一般也是对的，但有时在编码过程中难免会碰到到底是用继承还是组合的问题，这时候可以多想想，组合并不是万能的，有时继承更合适，这时可以请教身边更有经验的程序员，组合的优势在于当子类不想要这个对象时，可以随时丢弃，而继承的优势在于，当子类不想实现这个行为时，可以有默认的行为，而且有些时候只能用继承；针对接口编程没啥好说的，就是抽象。</p><h3 id="观察者模式">观察者模式</h3><p>　　这个模式如果在分布式系统中又叫发布订阅模式，该模式常用于消息通知。前端有个 RxJS 的库将这一模式玩出花来了，Shaun 在高精地图编辑器的事件流管理中就使用了该库。在 threejs 中所有渲染对象的都有一个统一的基类 EventDispatcher，该类中就实现了一个简单的观察者模式，用来处理事件监听触发和通知，和真正的观察者相比，区别在于观察者只是一个函数，而不是一个类，其实浏览器的事件监听机制实现方式也和这个类差不多。</p><p>　　观察者模式中涉及到原则有：松耦合。这里的松耦合是指主题和观察者之间是隔离的，观察者可自行实现自己的更新行为，而主题同样可实现自己的通知机制，两者虽有关联但互不影响。松耦合原则说起来人人会说，但真正能实现松耦合的却不多，实现松耦合的关键在于怎样分离两个系统，两个系统的连接点在哪，这有时很难理清，从而造成逻辑混乱，bug 丛生。</p><h3 id="装饰者模式">装饰者模式</h3><p>　　利用该模式可以很方便的扩展一些方法和属性，尤其是遇到主体和配件这样的关系时，可以很轻松的添加配件到主体上。Shaun 没用过这个模式，本来在扩展 threejs 一个类时想用，但确实没找到非常明确的主体和配件这样的关系，最后还是简单的使用继承了。</p><p>　　装饰者模式涉及到的原则有：开放——封闭原则。设计一个类需要考虑对扩展开放，对修改关闭。修改和扩展看似矛盾，但实则可以独立存在，装饰者的配件可以无限加，这是扩展，是开放，而在加配件时无需修改现有代码，这是封闭。当然这一原则并不独属于装饰者模式，应该说是只要用到面向对象的思想开发程序，就一定会用到该原则，否则也就失去了面向对象的意义。但有时这个原则又没必要贯彻彻底，因为对于有些需求可能很难弄清修改和扩展的界限，这时就达到能尽量重用父类的方法就好。</p><h3 id="工厂模式">工厂模式</h3><p>　　该模式在稍微大一点的系统中应该都会用到，根据不同的输入，生成不同的对象，这就是工厂模式的本质。至于工厂模式的实现方式一般会根据需求的复杂度来决定：1、只有一个工厂，一类产品，只是为了集中一层 if-else，可用简单工厂模式，甚至一个 builder 函数即可；2、有多个工厂，还是只有一类产品，用工厂模式，多个工厂继承一个工厂父类即可，相当于多个简单工厂组合；3、有多个工厂，多类产品，哪个工厂生产什么产品可能有变化，这时需要用到抽象工厂模式，除正常的继承之外，还需使用组合，组合组成产品的父类，相当于再组合一个工厂。Shaun 在高精地图编辑器中当然是大量使用的工厂模式和简单工厂模式，主要是为了集中 if-else 的处理，比如根据不同的数据类型创建不同的属性栏界面（枚举用下拉框，字符串用文本框，数字用数字栏等），根据不同的路网元素创建对应的渲染器对象以及对应的属性界面等。</p><p>　　工厂模式涉及到的原则有：依赖倒置原则。尽量依赖抽象，而不是具体类。这其实也是抽象一种作用或好处，即在使用过程中尽量使用最上层的父类，具体类只在创建实例时使用。</p><h3 id="单例模式">单例模式</h3><p>　　写程序的基本都会用到该模式，主要用来创建全局唯一对象，可用来存储和处理系统中常用的各个模块都会用到的一些数据。Shaun 在编辑器中单例模式用了好几个，比如全局唯一的 viewport，用力绘制 3d 图形；全局唯一的路网数据；当然系统中存在太多的单例模式也不好，最好是只有一个，如 Shaun 的编辑器中最好的模式就是创建一个单例的 Editor 类，需要做单例的对象都可以放在该类中，如此保证系统中只有一个单例类，以进行统一管理。</p><p>　　该模式与面向对象倒是没多大关系了，可以认为是全局变量的优化版，毕竟大的系统中全局变量基本不可避免，这时就可以使用单例模式。</p><h3 id="命令模式">命令模式</h3><p>　　该模式主要用来将函数方法封装成类，这样做的好处就是可以更灵活的执行该方法（将方法放进队列中依次执行，将方法持久化以便系统启动执行），同时也可以保存该方法的一些中间状态，以便撤销操作，回到系统执行该方法前的状态。Shaun 在编辑器中主要用命令模式做撤销重做功能，这基本也是编辑器的必备功能了，可以说没有撤销重做功能的编辑器是不完整的，要实现撤销重做功能除了基本的命令模式之外，还要提供撤销和重做两个栈以保存操作命令。</p><p>　　该模式与面向对象也没很大关系，只是提供了一个实现一些特殊功能的标准或通用方案。</p><h3 id="适配器模式">适配器模式</h3><p>　　该模式正如其名，主要用来转换接口，将一个类的方法用其它类封装一下，以达到兼容其它类接口的目的，同时对外可接口保持不变，该模式通过对象组合实现。Shaun 没使用过该模式，就 Shaun 感觉这个模式应该可以用在维护了好几年的系统上，当新作的东西需要兼容老接口时，可以用适配器模式将新街口封装一下。</p><p>　　该模式同样只是提供了一种新接口兼容老接口的一种优良方案，当然实际使用过程中可能很难这么完美，但算是一种思路。</p><h3 id="外观模式">外观模式</h3><p>　　该模式算是封装的一种体现。当一个功能需要经过多次函数调用才能完成时，这时可以用另一个方法将这些函数都封装起来，从而简化调用方式。Shaun 用该模式处理整个渲染模块的初始化和资源释放，因为初始化时需要分配好很多东西（光照，viewport，固定图层，地面，天空盒等），而释放时同样需要释放这些东西。该模式同样只能算是提供了一种好的编程实践，实际使用过程可能每个函数都有很多参数，调用顺序可能有变，这时简化调用反而没有必要，让用户自己决定怎样调用更好。</p><p>　　外观模式涉及到的原则有：最少知识原则。该原则主要用来减少对象依赖，即尽量不将类中组合的对象直接暴露出去，而应该将组合对象的方法再简单封装一下，再将封装后的方法暴露出去，以减少另外的类又依赖类中组合对象的现象。该原则可以适当遵守，因为有时直接使用更方便一点，多次封装之后反而显得逻辑混乱，增加系统的复杂度。</p><h3 id="模板方法模式">模板方法模式</h3><p>　　该模式是抽象的一种体现。首先抽象出一套固定化的流程，流程中每个步骤的具体行为并一致，有些默认，有些可以重写，父类固定流程，子类负责重写流程中每个步骤，这就时模板方法模式。Shaun 没写过完全符合该模式的代码，只是写了个类似该模式的模块，该模块有三个功能（编辑道路节点，编辑车道节点，编辑车道线），做完前两个功能后，发现这里有一套逻辑是通用的，那就是滑过节点高亮，选择节点，出现 gizmo，拖动 gizmo，完成编辑（当然还有选择节点后不拖动 gizmo 等一套 if-else 中间处理状态），于是 Shaun 把这一套流程抽象出来，固化方法，这三个功能都继承该类，方法该重写的重写，不仅减少了代码量，同时整个流程也更清晰了，很快完成了第三个功能。</p><p>　　模板方法涉及到的原则有：好莱坞原则。即由父类负责函数调用，而子类负责重写被调用的函数，不用管父类的调用逻辑，也最好不要调用父类的函数。该原则用来理清流程很方便，只需要看父类即可，但实际编程过程中可能也会遇到子类不可避免的会调用父类的一些公共函数的情况，Shaun 觉得只要流程没问题的话，调用父类函数也能接受，并不需要严格遵守模式。</p><h3 id="迭代器模式">迭代器模式</h3><p>　　迭代器，即对遍历进行封装，一般只能顺序执行，提供 next() 方法获取下一个元素，集合容器的遍历方式一般都会用迭代器进行封装。Shaun 在这一个半项目里没写过迭代器，毕竟这是非常底层的一个模式，语言库本身有的数据结构大多自己实现了迭代器，除非需要设计一个新的集合或容器数据结构，才需要提供相应的迭代器。因为 js 没有 SortedMap 数据结构，为了高效分配路网元素 id，Shaun 利用 object 简单实现了一个，提供了相应的 forEach 方法。</p><p>　　迭代器模式涉及到的原则有：单一责任原则。即一类只做一件事，这个原则对于涉及最最底层的接口很实用，而大多具体类很难只做一件事。迭代器模式对于顺序访问来说还是非常有用的，毕竟使用迭代器的人不需要管底层到底用的什么数据结构，反正可以顺序遍历即可。</p><h3 id="组合模式">组合模式</h3><p>　　组合模式与其说是一种模式，更不如说就是一颗树，只是树的节点都是可供继承的类。在标准的组合模式中，父类中一定会有全部子类的全部函数，即所有子类的函数要么是继承自父类，要么是重写父类函数的，这其实是违背上面单一责任原则的，因为这必然会造成有些子类不需要这么多函数。而从组合模式会存储孩子节点这点来看，和装饰者模式有点类似，只不过装饰者只会存一个孩子，而组合模式可能会存多个，当然两者做的事是不一样，只是实现手法类似而已。Shaun 没写过标准的组合模式，如果只要符合树形模式都可认为是组合模式，那在高精地图编辑器中，所有路网元素都会继承一个父类，而道路中又包含车道簇，车道簇中包含车道，这也算组合模式。在 threejs 中有个 Object3D 的基类，所有渲染对象都会继承该类，该类中又包含若干孩子，threejs 计算 Model 矩阵时就是一层层孩子的 Model 矩阵乘下去，直到最后的孩子，结果就是最后 Shader 中的 Model 矩阵。</p><h3 id="状态模式">状态模式</h3><p>　　状态机的状态转移可以说是程序设计中最麻烦的部分之一了，这部分如果写不好的话，根本没法修改维护，同时会造成 bug 频发。在高精地图编辑器中鼠标操作有两类模式，一种是选择模式，另一种是编辑模式，选择模式又分为点选和框选，而编辑模式就非常多了，针对路网的不同元素，编辑模式的具体实现都不会一样，Shaun 首先使用 RxJS 封装了一个鼠标操作类（左键右键中键移动等），后续的鼠标操作都继承自该类，可以算是状态模式的父类，后续的鼠标操作就针对相应的需求实现相应的方法即可，当然其中鼠标操作自身也存在状态转移（左键到右键，左键到鼠标移动等），这些一般都是针对特定需求来的，所以这些小的状态转移一般在鼠标操作内部实现，但需要支持随时从编辑模式到选择模式，这意味着编辑模式编辑到一半的东西都需要支持随时释放，恢复编辑前的样子，这算是一个麻烦的地方，有时忘了释放就会出现问题。</p><p>　　状态模式算是为解决状态转移问题提供一种理想的方案，但其具体实现并不一定要和书上一样，Shaun 在用 C++ 实现时就采用另一套方案，状态类是独立的，控制状态转移的代码都在状态机内，而不是书中这种直接在状态类中控制状态机。好处坏处都有，看具体需求，Shaun 的方式就是状态类和状态机是分离的，状态类不需要管状态机怎么实现的，只需要管当前状态的情况，但需要在状态机中管理状态转移，而书中实现方式状态机的状态转移放到状态类中了，也因此状态类需要依赖状态机。</p><hr><p><em>剩下的模式，Shaun 就没直接写代码实践了，因为大多都需要跨模块实现，有的甚至就是个小项目了，所以就简要谈谈 Shaun 的个人理解</em>。</p><h3 id="代理模式">代理模式</h3><p>　　主要可以用来做权限控制，在模块与模块之间的调用过程中，有时不想要一个模块可以访问另一个模块的全部内容，这时可以使用代理模式，创建一个中间模块，避免两个模块直接调用，同时进行访问控制。代理模式在如今的互联网时代不可避免的会用到，或直接或间接，往最小的说，对象组合也可用来实现代理模式。</p><h3 id="复合模式">复合模式</h3><p>　　将多种模式组合在一起使用，比如 MVC 模式，这种模式与其说是模式，更不如说就是一种架构，一种开发包含客户端系统的通用架构，当然每一层都会有很多模式进行组合，从而造成具体实现差异非常大。</p><h3 id="反模式">反模式</h3><p>　　反模式指的是用“不好的解决方案”去解决一个问题，Shaun 主要想谈谈开发反模式，因为这非常常见。有时候一个解决方案好不好要从多个角度进行衡量，比如现有技术，长期短期，上手难度，开发效率，维护难度等角度，当出现一个新问题时，往往意味着就有解决方案有缺陷，这种缺陷可能很容易弥补，更可能很难，当很难解决时，往往要采用全新的解决方案，这时团队对新解决方案可能都不熟，也没有魄力去采用新解决方案，只能去老解决方案继续强行打补丁，直到最后没法维护，白白浪费了大量的人力和时间，这是非常典型的一种反模式。</p><h3 id="桥接模式">桥接模式</h3><p>　　将抽象接口和实现分开，并独立派生，以支持抽象和实现的同时改变，并相互独立，可适用在需要跨平台跨不同设备的系统上。</p><h3 id="生成器模式">生成器模式</h3><p>　　有点像是模板方法模式和工厂模式的结合版，使用多个步骤创建一个对象，但步骤没有固定顺序，可适用于流程复杂的规划系统中。</p><h3 id="责任链模式">责任链模式</h3><p>　　可以认为是模板方法模式的进阶版，只是模板的步骤方法变成了一个个对象，并且支持步骤的增加和删除，以及更换顺序，一旦某个步骤成功执行，则整个链条终止，可适用于消除显式的 if-else，处理键盘或鼠标事件时，需要针对不同按键触发不同操作，这时可以采用该模式，缺点是链条很长时，要写很多类，导致执行啥很不直观。</p><h3 id="蝇量模式">蝇量模式</h3><p>　　这个模式算是一种优化内存占用的方案，通过牺牲类的独立性来减少内存，更彻底一点就是不创建类，直接用函数调用来处理就行。</p><h3 id="解释器模式">解释器模式</h3><p>　　可用来实现简单语法规则语言的解释器或编译器，每个语法规则都由一个类进行解析，然后组合。</p><h3 id="中介者模式">中介者模式</h3><p>　　可认为是状态模式和代理模式的结合版，不过各个状态可以是不同类，由中介者控制系统流转，集中控制逻辑，使被控制对象解耦，但可能会造成中介者本身非常复杂。</p><h3 id="备忘录模式">备忘录模式</h3><p>　　可用于系统（游戏）存档，存储系统中关键对象的运行状态，通常实现的方案一般是序列化/持久化，为了效率考虑，难的是有时需要增量存档。</p><h3 id="原型模式">原型模式</h3><p>　　js 的原型链应该是原型模式的典型，不仅实现了动态扩展实例，更实现了动态扩展对象，即继承。在高精地图编辑器中，由于需要做自动保存，所以在做序列化和反序列化的同时也简单实现了对象的 clone()，即从当前实例中创建一个完全一样的实例，可认为是 C++ 中的深拷贝。</p><h3 id="访问者模式">访问者模式</h3><p>　　相当于加个中间层，从而以最小的代价修改现有系统（一般是增加一个方法），达到外部可以取得系统内部信息的目的。</p><h2 id="后记">后记</h2><p>　　曾看过这样一句话：抽象能力决定编程能力，Shaun 个人认为，所谓抽象即提炼事物的共同点，这也是设计模式中反复使用接口的原因，接口即一组具体类的共同点，接口中的函数和变量即为这些具体类共有的，虽然具体行为可以不一样，但行为本身总是存在的。而又有这样一句话：程序等于数据结构加算法，Shaun 的理解是，狭义上的程序确实是这样，一段代码解决一个问题，这是程序，多段代码解决一个问题，这也是程序，多段代码解决多个问题，这亦是程序，一个软件，一个系统，一个平台，都是程序，但显然这些程序不是简单的数据结构和算法就能概括的，其内部必然有一套合理的逻辑进行组织，这套逻辑可以称之为“设计模式”，但这个“设计模式”不仅仅是上面谈的这些模式概念。Shaun 认为好的数据结构和算法确实能使程序达到当前最优，但对于一个大型系统或平台来说，这种最优只能是一种局部最优，这对整个系统的全局最优来说可能是微不足道的，而“设计模式”要解决的是怎样使一个系统达到全局最优，怎么合理组织局部最优。面对现代的超大型系统或平台，传统意义上的设计模式也只能达到局部最优，全局最优基本很少有人能驾驭，都是针对特定的业务需要，不断的试错改进优化，逐渐趋于稳定，但这种稳定可能很难抽象，放进其它的业务中，又得花费大量的人力物力去修改。</p><p>　　Shaun 个人对现代大型系统架构的理解就是分层分模块，功能太多分模块，模块太多就分层，一层不够分两层，两层不够分三层，三层不够继续分，根据数据流的处理分层，根据功能的不同分模块，模块内部依靠设计模式进行组织，设计模式调度的就是数据结构与算法。Shaun 目前的设计原则就是：每层一个独立的服务控制模块，每个模块一个对外服务功能（或事件或 socket ），同层的各模块之间尽量保持独立，不相互依赖，若各模块存在共同点，则将共同点抽出来，将其作为公共模块或独立为小层，层与层之间通过服务控制模块进行数据流的传输，除服务控制模块之外，模块之间尽量避免相互通信，即每个模块的对外服务功能一般只对本层服务控制模块提供服务，最好是只负责接收数据。如果系统实在太大，就只能保持纵向分层，横向保证各模块间数据流依次传输，并在特定模块节点上进行上下层的数据传输。</p><p>　　数据结构与算法重不重要？当然重要，数据结构与算法不过关，面试都过不去 ( ╯□╰ )，工作都没有，还何谈什么设计模式，什么架构。设计模式重不重要？当然也重要，不会合理使用设计模式，写出一堆别人没法维护的垃圾代码（当然，这或许是好事 :p ），改个需求要半天，加个功能要半个月，效率太低，这样即使有好的数据结构与算法作用也不大。但是设计模式也不是万能的，针对不同的需求，同一种设计模式有不同的实现方式，所以书中的设计模式也仅供参考而已，与其说设计模式重要，还不如说书中那几个设计原则更重要些。同时一味的追求设计模式也不见得是件好事，设计模式可以参考，但不能生搬硬套，毕竟人是活的，需求也是活的，固定的模式也需要有所改变，总而言之，能以最小的代价解决问题完成需求的模式就是好模式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　进入职场一年半以来，Shaun 完全独立从 0 到 1 开发了 1.5 个项目（当然也有参与其它项目，但不是 Shaun 独立从 0 到 1 开发的，没多少控制权，就不谈了），一个网页版的高精地图编辑器，半个地图可视化系统，这里面 Shaun 用了不少设计模式，这篇就谈谈 Shaun 用过的和没用过的一些设计模式。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="thought" scheme="http://cniter.github.io/tags/thought/"/>
    
  </entry>
  
  <entry>
    <title>积分计算</title>
    <link href="http://cniter.github.io/posts/eee1c041.html"/>
    <id>http://cniter.github.io/posts/eee1c041.html</id>
    <published>2020-11-29T10:28:56.000Z</published>
    <updated>2020-11-30T14:14:04.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　最近需要计算一下曲线长度，无法直接得到被积函数的原函数，常规的积分解法牛顿莱布尼茨公式没法使用，所以只能使用数值积分计算积分。</p><a id="more"></a><p>　　下面主要介绍两种数值积分方法：龙贝格积分（Romberg Quadrature） 和 高斯-克朗罗德积分（Gauss-kronrod Quadrature）。 <em>下面附带的代码只做简单测试，不保证正确性，语言使用 Typescript。</em></p><h2 id="romberg-篇">Romberg 篇</h2><p>　　计算积分最简单的当然是使用复化梯形公式，即 <span class="math inline">\(I=\int_a^b{f(x)dx}=\frac{b-a}{2n}[f(a)+f(b)+2\sum\limits_{i=1}^{n-1}f(x_i)]= T_n,　x_i=a+i*h, h=(b-a)/n\)</span> ，若将 n 段每段一分为 2，可得到 <span class="math inline">\(T_{2n}=T_n/2+\frac{b-a}{2n}\sum\limits_{i=0}^{n-1}f(x_{i+1/2})\)</span> 。考虑数列 <span class="math inline">\(T=\{T_1,T_2,T_{2^2},...,T_{2^k}\}\)</span>，显然该数列必收敛，最后收敛为对应积分，当 <span class="math inline">\(|T_{2^k}-T_{2^{k-1}}| &lt; ε\)</span> （<span class="math inline">\(ε\)</span> 为精度）时，可取 <span class="math inline">\(T_{2^k}\)</span> 作为最后的积分结果。但是，直接利用梯形公司求解，收敛很慢，导致计算效率很差，所以需要使用理查德森（Richardson）外推法加速收敛，设 <span class="math inline">\(T_{2^k}^{(m)}\)</span> 为 m 次加速值，当 m 为 0 时，表示没加速，为原梯形公司，则 <span class="math inline">\(T_{2^k}^{(m)} = \frac{4^m}{4^m-1}T_{2^{k+1}}^{(m-1)}-\frac{1}{4^m-1}T_{2^k}^{(m-1)}\)</span>，当 <span class="math inline">\(|T_{2^{k+1}}^{(m)}-T_{2^k}^{(m)}| &lt; ε\)</span> 时，则收敛，并取其中一值作为最终的积分值。未经修饰的代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="TYPESCRIPT"><figure class="highlight hljs typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">function rombergIntegrator(f: (x: number) =&gt; number, a: number, b: number, tolerance = 1e-8) &#123;</div><div class="line">    <span class="keyword">let</span> h = b - a;</div><div class="line">    <span class="keyword">let</span> n = <span class="number">1</span>;</div><div class="line">    <span class="keyword">let</span> preTK = ((f(a) + f(b)) * h) / <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> tkmArray = [];</div><div class="line">    <span class="keyword">let</span> m = <span class="number">0</span>;</div><div class="line">    tkmArray[m] = preTK;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        m += <span class="number">1</span>;</div><div class="line">        <span class="built_in">console</span>.log(m, tkmArray[m - <span class="number">1</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">let</span> tk = getTK(f, preTK, n, a, h);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(tk - preTK) &lt; tolerance) <span class="keyword">return</span> tk;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> preTKM = tkmArray[<span class="number">0</span>];</div><div class="line">        <span class="keyword">let</span> preTK1M = tk;</div><div class="line">        tkmArray[<span class="number">0</span>] = tk;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="keyword">let</span> newTKM = getTKM(preTK1M, preTKM, i);</div><div class="line">            preTKM = tkmArray[i];</div><div class="line">            preTK1M = newTKM;</div><div class="line">            tkmArray[i] = newTKM;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (preTKM !== <span class="literal">undefined</span> &amp;&amp; <span class="built_in">Math</span>.abs(preTK1M - preTKM) &lt; tolerance) <span class="keyword">return</span> preTK1M;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        preTK = tk;</div><div class="line">        n *= <span class="number">2</span>;</div><div class="line">        h /= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function getTK(f: (x: number) =&gt; number, preTK: number, n: number, a: number, h: number) &#123;</div><div class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">let</span> x = a + (i + <span class="number">0.5</span>) * h;</div><div class="line">            sum += f(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (preTK + h * sum) / <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getTKM</span>(<span class="params">preTK1M: <span class="built_in">number</span>, preTKM: <span class="built_in">number</span>, m = 0</span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> m4 = <span class="number">1</span> &lt;&lt; (<span class="number">2</span> * m); <span class="comment">// 4 ** m;</span></div><div class="line">        <span class="keyword">return</span> (m4 * preTK1M - preTKM) / (m4 - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　由于采用闭型积分规则（积分上下限值参与积分计算），所以以上代码不适合计算两端点值被积函数值无限大的情况（如 1/4 圆弧积分等）。而且该方法不合适求取被积函数在积分区间内导数值变化较大（如被积函数在积分下限附近剧烈波动，在积分上限附近不变化等）的积分，因为该方法是均匀分段，这种情况将导致计算量剧增，这时就需要用到下面的自适应积分。</p><h2 id="自适应篇">自适应篇</h2><p>　　自适应积分主要包括两类：全局自适应积分和局部自适应积分，通常情况下全局自适应积分的会比局部自适应积分的表现要好，全局自适应积分一般通过二分递归实现，当满足一定条件时，递归终止，即通过二分分别计算两边的积分，若一边满足一定条件，则不继续划分，从而减少计算量。全局自适应积分中比较经典的有基于辛普森（Simpson）公式的自适应算法，普通辛普森积分公式为：<span class="math inline">\(I=\int_a^b{f(x)dx}=\frac{b-a}{6}[f(a)+4f(m)+f(b)]= S(a,b),　m=(a+b)/2\)</span>，复化辛普森公式为 <span class="math inline">\(I=\int_a^b{f(x)dx}=\frac{h}{3}[f(a)+4\sum\limits_{i=1}^{n}f(x_{2i-1})+2\sum\limits_{i=1}^{n-1}f(x_{2i})+f(b)]= S(a,b)\)</span>，其中 <span class="math inline">\(x_i=a+i*h　(i=1,2,3,...,2n),h=\frac{b-a}{2n}\)</span>，基于辛普森公式的自适应基本原理如下：令 <span class="math inline">\(S_2(a,b) = S(a,m)+S(m,b)\)</span>，m 为 a,b 中值，若 <span class="math inline">\(|S(a,b) - S_2(a,b)| &lt; 15ε\)</span>，则取 <span class="math inline">\(S_2(a,b)\)</span> 或 <span class="math inline">\(S_2(a,b)+(S(a,b)-S_2(a,b))/15\)</span> 作为该区间的积分值，否则，将区间二分递归，同时因为误差会累积，所以每次递归都需要将精度提高两倍，即 <span class="math inline">\(ε = ε/2\)</span>，如此最后的精度才能达到最初的精度。具体 ts 代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="TYPESCRIPT"><figure class="highlight hljs typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">function adaptiveSimpsonIntegrator(f: (x: number) =&gt; number, a: number, b: number, epsilon = 1e-8) &#123;</div><div class="line">    <span class="keyword">let</span> S = complexSimpson(f, a, b);</div><div class="line">    <span class="keyword">return</span> adsimp(f, a, b, epsilon, S);</div><div class="line"></div><div class="line">    function adsimp(f: (x: number) =&gt; number, a: number, b: number, epsilon = 1e-8, S = 0): number &#123;</div><div class="line">        <span class="keyword">let</span> m = a + (b - a) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">let</span> LS = complexSimpson(f, a, m);</div><div class="line">        <span class="keyword">let</span> RS = complexSimpson(f, m, b);</div><div class="line">        <span class="keyword">const</span> S2 = LS + RS;</div><div class="line">        <span class="keyword">const</span> tolerance = <span class="number">15</span> * epsilon;</div><div class="line">        <span class="keyword">let</span> delta = S - S2;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(delta) &lt; tolerance) <span class="keyword">return</span> S2 + delta / <span class="number">15</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> doubleEPS = epsilon / <span class="number">2</span>;</div><div class="line">            <span class="keyword">return</span> adsimp(f, a, m, doubleEPS, LS) + adsimp(f, m, b, doubleEPS, RS);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function complexSimpson(f: (x: number) =&gt; number, a: number, b: number, n = 1) &#123;</div><div class="line">        <span class="keyword">const</span> n2 = n * <span class="number">2</span>;</div><div class="line">        <span class="keyword">const</span> h = (b - a) / n2;</div><div class="line">        <span class="keyword">let</span> sum = f(a) + f(b);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n2; i += <span class="number">2</span>) &#123;</div><div class="line">            sum += <span class="number">4</span> * f(a + i * h);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; n2 - <span class="number">1</span>; i += <span class="number">2</span>) &#123;</div><div class="line">            sum += <span class="number">2</span> * f(a + i * h);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (sum * h) / <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　在 D.V. Fedorov 写的「Introduction to Numerical Methods with examples in Javascript」一书中介绍了一种全局自适应方法，即分别使用高阶和低阶的权值分别计算积分，两者之间的差值 <span class="math inline">\(E\)</span> 作为误差估计，设绝对精度为 <span class="math inline">\(\delta\)</span> ，相对精度为 <span class="math inline">\(\epsilon\)</span> ，若 <span class="math inline">\(|E|&lt;\delta+\epsilon*Q\)</span>，Q 为高阶权值计算的积分，则取 Q 作为积分值，否则将积分区间二分，同时使 <span class="math inline">\(\delta/\sqrt{2}\)</span>，<span class="math inline">\(\epsilon\)</span> 保持不变。具体 ts 代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="TYPESCRIPT"><figure class="highlight hljs typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">function recursiveAdaptiveIntegrator(f: (x: number) =&gt; number, a: number, b: number, accuracy = 1e-15) &#123;</div><div class="line">    <span class="keyword">return</span> recursiveAdaptiveIntegrate(f, a, b, accuracy);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">recursiveAdaptiveIntegrate</span>(<span class="params"></span></span></div><div class="line">        f: (x: number) =&gt; number,</div><div class="line">        a: <span class="built_in">number</span>,</div><div class="line">        b: <span class="built_in">number</span>,</div><div class="line">        accuracy = <span class="number">1e-15</span>,</div><div class="line">        epsilon = <span class="built_in">Number</span>.EPSILON,</div><div class="line">        preFValue?: <span class="built_in">number</span>[],</div><div class="line">    ): <span class="built_in">number</span> &#123;</div><div class="line">        <span class="keyword">const</span> abscissae = [<span class="number">1</span> / <span class="number">6</span>, <span class="number">2</span> / <span class="number">6</span>, <span class="number">4</span> / <span class="number">6</span>, <span class="number">5</span> / <span class="number">6</span>];</div><div class="line">        <span class="keyword">const</span> highOrderWeights = [<span class="number">2</span> / <span class="number">6</span>, <span class="number">1</span> / <span class="number">6</span>, <span class="number">1</span> / <span class="number">6</span>, <span class="number">2</span> / <span class="number">6</span>];</div><div class="line">        <span class="keyword">const</span> lowOrderWeights = [<span class="number">1</span> / <span class="number">4</span>, <span class="number">1</span> / <span class="number">4</span>, <span class="number">1</span> / <span class="number">4</span>, <span class="number">1</span> / <span class="number">4</span>];</div><div class="line">        <span class="keyword">const</span> isRecompute = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>];</div><div class="line">        <span class="keyword">const</span> h = b - a;</div><div class="line"></div><div class="line">        <span class="keyword">const</span> fValue: <span class="built_in">number</span>[] = [];</div><div class="line">        <span class="keyword">if</span> (preFValue === <span class="literal">undefined</span>) &#123;</div><div class="line">            abscissae.forEach(<span class="function">(<span class="params">abscissa</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">const</span> x = a + abscissa * h;</div><div class="line">                fValue.push(f(x));</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; abscissae.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (isRecompute[i]) fValue.push(f(a + abscissae[i] * h));</div><div class="line">                <span class="keyword">else</span> fValue.push(preFValue[k++]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> highResult = <span class="number">0</span>;</div><div class="line">        <span class="keyword">let</span> lowResult = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; highOrderWeights.length; i++) &#123;</div><div class="line">            highResult += highOrderWeights[i] * fValue[i];</div><div class="line">            lowResult += lowOrderWeights[i] * fValue[i];</div><div class="line">        &#125;</div><div class="line">        highResult *= h;</div><div class="line">        lowResult *= h;</div><div class="line"></div><div class="line">        <span class="keyword">const</span> tolerance = accuracy + epsilon * <span class="built_in">Math</span>.abs(highResult);</div><div class="line">        <span class="keyword">let</span> errorEstimate = <span class="built_in">Math</span>.abs(highResult - lowResult) / <span class="number">3</span>;</div><div class="line">        <span class="keyword">if</span> (errorEstimate &lt; tolerance) &#123;</div><div class="line">            <span class="keyword">return</span> highResult;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            accuracy /= <span class="built_in">Math</span>.sqrt(<span class="number">2</span>);</div><div class="line">            <span class="keyword">let</span> m = a + h / <span class="number">2</span>;</div><div class="line">            <span class="keyword">let</span> midIndex = <span class="built_in">Math</span>.trunc(abscissae.length / <span class="number">2</span>);</div><div class="line">            <span class="keyword">let</span> leftFValue = fValue.slice(<span class="number">0</span>, midIndex);</div><div class="line">            <span class="keyword">let</span> rightFValue = fValue.slice(midIndex);</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                recursiveAdaptiveIntegrate(f, a, m, accuracy, epsilon, leftFValue) +</div><div class="line">                recursiveAdaptiveIntegrate(f, m, b, accuracy, epsilon, rightFValue)</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　该方法很巧妙的设计了一组插值点，使得当前计算的函数值正好可以被下次迭代所使用，从而提高性能，同时该方法可以得到 1/4 圆弧长，虽然精度只能到小数点后 8 位，至于 Shaun 写的其它测试函数，都能得到理想精度。</p><h2 id="gauss-篇">Gauss 篇</h2><p>　　高斯求积法是一种多项式插值积分法，同时由于不计算被积函数在区间两个端点处的值，所以高斯积分法采用的开型积分规则，高斯积分法的衍生方法有很多种，下面主要介绍高斯-勒让德（Gauss-Legendre Quadrature）以及其迭代改良的高斯-克朗罗德法。高斯-勒让德积分法的公式为积分的原始形态，即 <span class="math inline">\(\int_a^bf(x)dx=\sum\limits_{i=1}^{∞}w_if(x_{i})\approx\sum\limits_{i=1}^{n}w_if(x_{i})\)</span> ，只不过 <span class="math inline">\(x_i \in [-1,1]\)</span>，并且 <span class="math inline">\(x_i\)</span> 和 <span class="math inline">\(w_i\)</span> 都通过勒让德多项式求出，所以其原则上只能用在积分区间为 [-1, 1] 上的积分，但是可以将积分从任意区间通过简单的变形变换到 [-1, 1] 上，即 <span class="math inline">\(\int_a^b{f(x)dx} = \frac{b-a}{2}\int_{-1}^1{f(\frac{b-a}{2}t+\frac{b+a}{2})dt}\)</span> ，从而可以将高斯-勒让德方法扩展到任意积分上。由于每个 n 对应的 <span class="math inline">\(x_i\)</span> 和 <span class="math inline">\(w_i\)</span> 都可以查表可得，所以具体代码方面就很简单了，以 n = 4，即插值点个数为 4 为例，ts 代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="TYPESCRIPT"><figure class="highlight hljs typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">function gaussLegendreIntegrate(f: (x: number) =&gt; number, a: number, b: number, n: 4 | 8 = 4) &#123;</div><div class="line">    <span class="keyword">const</span> weightsAndAbscissae = getWeightsAndAbscissae(n);</div><div class="line">    <span class="keyword">const</span> weights = weightsAndAbscissae.weights;</div><div class="line">    <span class="keyword">const</span> abscissae = weightsAndAbscissae.abscissae;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> halfH = (b - a) / <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; abscissae.length; i++) &#123;</div><div class="line">        <span class="keyword">let</span> xi = halfH * abscissae[i] + a + halfH;</div><div class="line">        sum += weights[i] * f(xi);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sum * halfH;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getWeightsAndAbscissae</span>(<span class="params">n: 4 | 8 = 4</span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (n) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    weights: [</div><div class="line">                        <span class="number">0.362683783378362</span>,</div><div class="line">                        <span class="number">0.362683783378362</span>,</div><div class="line">                        <span class="number">0.3137066458778873</span>,</div><div class="line">                        <span class="number">0.3137066458778873</span>,</div><div class="line">                        <span class="number">0.2223810344533745</span>,</div><div class="line">                        <span class="number">0.2223810344533745</span>,</div><div class="line">                        <span class="number">0.1012285362903763</span>,</div><div class="line">                        <span class="number">0.1012285362903763</span>,</div><div class="line">                    ],</div><div class="line">                    abscissae: [</div><div class="line">                        <span class="number">-0.1834346424956498</span>,</div><div class="line">                        <span class="number">0.1834346424956498</span>,</div><div class="line">                        <span class="number">-0.525532409916329</span>,</div><div class="line">                        <span class="number">0.525532409916329</span>,</div><div class="line">                        <span class="number">-0.7966664774136267</span>,</div><div class="line">                        <span class="number">0.7966664774136267</span>,</div><div class="line">                        <span class="number">-0.9602898564975363</span>,</div><div class="line">                        <span class="number">0.9602898564975363</span>,</div><div class="line">                    ],</div><div class="line">                &#125;;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    weights: [<span class="number">0.6521451548625461</span>, <span class="number">0.6521451548625461</span>, <span class="number">0.3478548451374538</span>, <span class="number">0.3478548451374538</span>],</div><div class="line">                    abscissae: [<span class="number">-0.3399810435848563</span>, <span class="number">0.3399810435848563</span>, <span class="number">-0.8611363115940526</span>, <span class="number">0.8611363115940526</span>],</div><div class="line">                &#125;;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　若要提高高斯-勒让德积分法的精度，可通过增加插值点或分多个区间进行积分来实现，但是由于没有误差估计，所以还是没法精确控制精度，对与某些被积函数积分精度高，但对于其它被积函数，积分精度却有限，当然可以简单的引入一些常用的误差估计法，但一般需要重新计算积分，导致效率很低，而高斯-克朗罗德法为其引入了一种基于 Kronrod 点的误差估计法，可充分利用现有计算值，从而达到有效控制精度的同时，性能没有太大的损失。设 <span class="math inline">\(G(f,n)=\sum\limits_{i=1}^{n}w_if(x_{i})\)</span> 为具有 n 个插值点的高斯-勒让德法计算结果，<span class="math inline">\(GK(f,n) = \sum\limits_{i=1}^{n}w&#39;_if(x_{i})+\sum\limits_{k=n+1}^{2n+1}w&#39;_kf(x_{k})\)</span> 为高斯-克朗罗德法的计算结果，则 <span class="math inline">\(|GK(f,n)-G(f,n)|\)</span> 可作为误差估计，有了误差估计，最后再使用全局自适应策略，即可得到精度可控的高斯积分结果。具体 ts 代码如下，以 n = 7 为例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="TYPESCRIPT"><figure class="highlight hljs typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">function gaussKronrodIntegrator(f: (x: number) =&gt; number, a: number, b: number, accuracy = 1e-15) &#123;</div><div class="line">    <span class="keyword">return</span> recursiveAdaptiveIntegrate(f, a, b, accuracy);</div><div class="line"></div><div class="line">    function recursiveAdaptiveIntegrate(f: (x: number) =&gt; number, a: number, b: number, accuracy = 1e-12): number &#123;</div><div class="line">        <span class="keyword">const</span> gaussAbscissae = [</div><div class="line">            <span class="number">0.0</span>,</div><div class="line">            <span class="number">-4.058451513773971669066064120769615e-1</span>,</div><div class="line">            <span class="number">4.058451513773971669066064120769615e-1</span>,</div><div class="line">            <span class="number">-7.415311855993944398638647732807884e-1</span>,</div><div class="line">            <span class="number">7.415311855993944398638647732807884e-1</span>,</div><div class="line">            <span class="number">-9.491079123427585245261896840478513e-1</span>,</div><div class="line">            <span class="number">9.491079123427585245261896840478513e-1</span>,</div><div class="line">        ];</div><div class="line">        <span class="keyword">const</span> gaussWeights = [</div><div class="line">            <span class="number">4.179591836734693877551020408163265e-1</span>,</div><div class="line">            <span class="number">3.818300505051189449503697754889751e-1</span>,</div><div class="line">            <span class="number">3.818300505051189449503697754889751e-1</span>,</div><div class="line">            <span class="number">2.797053914892766679014677714237796e-1</span>,</div><div class="line">            <span class="number">2.797053914892766679014677714237796e-1</span>,</div><div class="line">            <span class="number">1.29484966168869693270611432679082e-1</span>,</div><div class="line">            <span class="number">1.29484966168869693270611432679082e-1</span>,</div><div class="line">        ];</div><div class="line"></div><div class="line">        <span class="keyword">const</span> kronrodAbscissae = gaussAbscissae.concat([</div><div class="line">            <span class="number">-2.077849550078984676006894037732449e-1</span>,</div><div class="line">            <span class="number">2.077849550078984676006894037732449e-1</span>,</div><div class="line">            <span class="number">-5.860872354676911302941448382587296e-1</span>,</div><div class="line">            <span class="number">5.860872354676911302941448382587296e-1</span>,</div><div class="line">            <span class="number">-8.648644233597690727897127886409262e-1</span>,</div><div class="line">            <span class="number">8.648644233597690727897127886409262e-1</span>,</div><div class="line">            <span class="number">-9.914553711208126392068546975263285e-1</span>,</div><div class="line">            <span class="number">9.914553711208126392068546975263285e-1</span>,</div><div class="line">        ]);</div><div class="line"></div><div class="line">        <span class="keyword">const</span> kronrodWeights = [</div><div class="line">            <span class="number">2.094821410847278280129991748917143e-1</span>,</div><div class="line">            <span class="number">1.903505780647854099132564024210137e-1</span>,</div><div class="line">            <span class="number">1.903505780647854099132564024210137e-1</span>,</div><div class="line">            <span class="number">1.406532597155259187451895905102379e-1</span>,</div><div class="line">            <span class="number">1.406532597155259187451895905102379e-1</span>,</div><div class="line">            <span class="number">6.309209262997855329070066318920429e-2</span>,</div><div class="line">            <span class="number">6.309209262997855329070066318920429e-2</span>,</div><div class="line">            <span class="number">2.044329400752988924141619992346491e-1</span>,</div><div class="line">            <span class="number">2.044329400752988924141619992346491e-1</span>,</div><div class="line">            <span class="number">1.690047266392679028265834265985503e-1</span>,</div><div class="line">            <span class="number">1.690047266392679028265834265985503e-1</span>,</div><div class="line">            <span class="number">1.04790010322250183839876322541518e-1</span>,</div><div class="line">            <span class="number">1.04790010322250183839876322541518e-1</span>,</div><div class="line">            <span class="number">2.293532201052922496373200805896959e-2</span>,</div><div class="line">            <span class="number">2.293532201052922496373200805896959e-2</span>,</div><div class="line">        ];</div><div class="line"></div><div class="line">        <span class="keyword">const</span> halfH = (b - a) / <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> guassResult = <span class="number">0</span>;</div><div class="line">        <span class="keyword">let</span> kronrodResult = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; gaussAbscissae.length; i++) &#123;</div><div class="line">            <span class="keyword">let</span> xi = halfH * gaussAbscissae[i] + a + halfH;</div><div class="line">            <span class="keyword">let</span> yi = f(xi);</div><div class="line">            guassResult += gaussWeights[i] * yi;</div><div class="line">            kronrodResult += kronrodWeights[i] * yi;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = gaussAbscissae.length; i &lt; kronrodAbscissae.length; i++) &#123;</div><div class="line">            <span class="keyword">let</span> xi = halfH * kronrodAbscissae[i] + a + halfH;</div><div class="line">            <span class="keyword">let</span> yi = f(xi);</div><div class="line">            kronrodResult += kronrodWeights[i] * yi;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(kronrodResult - guassResult) &lt; accuracy / halfH) <span class="keyword">return</span> kronrodResult * halfH;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> m = a + (b - a) / <span class="number">2</span>;</div><div class="line">            accuracy /= <span class="number">2</span>;</div><div class="line">            <span class="keyword">return</span> recursiveAdaptiveIntegrate(f, a, m, accuracy) + recursiveAdaptiveIntegrate(f, m, b, accuracy);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　简单测试了一下，Shaun 这里写的 gaussKronrodIntegrator 方法最大精度只能到 1e-15，到 16 位就报错递归深度太大了，圆的 1/4 弧长也没法算出来，当然这些问题可通过设置最大递归深度以及处理异常值来解决，Shaun 这里就不继续写了。</p><h2 id="后记">后记</h2><p>　　数值积分策略非常多，尤其是针对一些特殊的函数，可能只能使用一些特殊的策略才能计算，Shaun 这里只是介绍了一些比较基础常用的积分方法，能解决大部分积分问题，唯一需要注意一点的就是如何追求性能与精度之间的平衡，因为积分常常涉及到迭代求值，通常而言精度越高，迭代越多，求积时，同时也需要注意被积函数的异常值（如无穷大等），这时可能需要拆分或变换积分区间，并且使用开型积分规则的积分方法进行重新计算。</p><h2 id="附录">附录</h2><h3 id="一些常见的积分变换">一些常见的积分变换</h3><p><span class="math display">\[ \int_a^bf(x) = \int_0^{b-a}f(a+t)dt \\ \int_a^b{f(x)dx} = \frac{b-a}{2}\int_{-1}^1{f(\frac{b-a}{2}t+\frac{b+a}{2})dt} \\ \int_{-∞}^{+∞}{f(x)dx} = \int_{-1}^1{f(\frac{t}{1-t^2})\frac{1+t^2}{(1-t^2)^2}dt} \\ \int_{a}^{+∞}{f(x)dx} = \int_{0}^1{f(a + \frac{t}{1-t})\frac{1}{(1-t)^2}dt} \\ \int_{-∞}^{a}{f(x)dx} = \int_{-1}^0{f(a + \frac{t}{1+t})\frac{-1}{(1+t)^2}dt} \]</span></p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://reference.wolfram.com/language/tutorial/NIntegrateIntegrationStrategies.html#155948475" target="_blank" rel="external">积分策略</a></p><p>[2] <a href="https://pomax.github.io/bezierinfo/legendre-gauss.html" target="_blank" rel="external">Gaussian Quadrature Weights and Abscissae</a></p><p>[3] <a href="https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/gauss_kronrod.html" target="_blank" rel="external">Gauss-Kronrod Quadrature</a></p><p>[4] <a href="https://www.advanpix.com/2011/11/07/gauss-kronrod-quadrature-nodes-weights/" target="_blank" rel="external">Gauss-Kronrod Quadrature Nodes and Weights</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　最近需要计算一下曲线长度，无法直接得到被积函数的原函数，常规的积分解法牛顿莱布尼茨公式没法使用，所以只能使用数值积分计算积分。&lt;/p&gt;
    
    </summary>
    
      <category term="Mathematics" scheme="http://cniter.github.io/categories/Mathematics/"/>
    
    
      <category term="numerical" scheme="http://cniter.github.io/tags/numerical/"/>
    
      <category term="integration" scheme="http://cniter.github.io/tags/integration/"/>
    
  </entry>
  
  <entry>
    <title>Geometry增量更新</title>
    <link href="http://cniter.github.io/posts/a5661762.html"/>
    <id>http://cniter.github.io/posts/a5661762.html</id>
    <published>2020-11-22T10:26:10.000Z</published>
    <updated>2020-11-22T14:09:30.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　优化 DrawCall 是图形学性能优化中老生常谈的问题，而针对 DrawCall 优化有很多方案，大致可分为两种：简化（Simplification）和合并（Consolidation），简化是指减少三角形个数，即将精细的模型变为粗糙的模型以及各种三角形剔除方案（视锥体剔除（Frustum Culling），遮挡剔除（Occlusion Culling）等），而合并自然则是将同一中材质下的多个 geometry 合并成一个 geometry。</p><a id="more"></a><h2 id="需求篇">需求篇</h2><p>　　最近一段时间一直在做高精地图道路的编辑，道路的编辑涉及到很多东西，这篇仅简单谈谈编辑性能的问题。为了能更直白的显示高精地图，不能简单的只使用点和线，还需要使用面将路面和路面上的一些路面标识精确的还原出来。在可视化道路时，主要有两种方案：1、将每条道路作为一个单独的 Mesh，即单独控制每条道路的渲染，一条道路至少产生一次 DrawCall，这样可以更方便的对每条道路进行编辑，但在渲染时要求更高的性能，而且道路一多，将不可避免的引起卡顿；2、将所有道路作为一个 Mesh，即直接渲染出一整个路网，这样显著降低了 DrawCall 次数，使渲染更流畅，但问题在于每编辑一次道路时，都需要重新三角化（Tessellation）整个路网，而且在选中一条道路时，为可视化选中效果，同样需要重新三角化该道路，并生成相应的 Mesh，导致编辑卡顿，每编辑完一次都可能需要等待一会儿。所以为了平衡渲染性能和编辑效率，需要有一种折中的方案，即对整个路网的 Geometry 能做到快速的分离与合并，在编辑时将受影响的道路分离出来，而在编辑之后，又将全部道路合并一下，提高显示性能。下面就谈谈 Shaun 对这种方案的一些思考。</p><h2 id="编辑篇">编辑篇</h2><p>　　Shaun 为平衡渲染性能和编辑效率，想出的一种方案是增量更新 Geometry，即只删除或增加局部的 Geometry，而其它不受影响的 Geometry 保持原样，如此即可达到快速的分离和合并 Geometry。具体做法如下：</p><ol type="1"><li><p>首先将所有道路的三角化结果合并成一个 Geometry，在合并的同时建立好每条道路的顶点索引以及面的索引（js 中可直接使用 object 进行存储）；</p></li><li><p>在选择时，根据顶点索引和面索引重建一个 Geometry，再基于该 Geometry 构建一个新的 Mesh 以指示选择效果；</p></li><li><p>当删除道路时，需要删除面索引对应的所有面，而顶点索引对应的顶点不需要删除，将顶点索引移到一个用来标识该部分顶点已废弃的容器 F 中；</p></li><li><p>当新增道路时，需要先从容器 F 中查找是否有合适的地方放置该道路的顶点，若有，则放置在对应地方，并更新容器 F 中对应元素，若没有，则将该道路的顶点放置在 Geometry 顶点数组的最末尾，放置完顶点之后，同样需要建立该道路的顶点索引和面索引。</p></li></ol><p><strong><em>※注：</em></strong>至于容器 F 使用怎样的数据结构以及其中的元素该怎样排列，针对不同的顶点索引可以有不同的选择；在新增道路时，同样可以不同的策略来决定放置顶点的位置（可参考操作系统内存分配的模式）。</p><p>　　由于新增道路时，可能会在容器 F 中产生一些永远无法删除的元素，导致顶点数组空闲碎片。 为抵抗顶点碎片以及减少顶点数目，需要对顶点数据进行压缩（Compaction），即移除没有使用的顶点，将后面的顶点前移，在前移顶点的同时，别忘了需要同时修改面中相应顶点的索引以及更新构建好的每条道路的顶点索引。</p><h2 id="后记">后记</h2><p>　　Shaun 这里只是提出了一种想法，最终实现起来发现效果也确实能达到基本需求（针对有很多条道路的大地图，显示性能从原来的十几二十帧到现在的 60 帧，同时选择和编辑也没受到影响），虽然在内存上比原来多增加了近 20%（还有优化的余地），但是为了渲染流畅以及编辑舒服，在如今这个内存越来越不值钱的年代，这种牺牲 Shaun 觉得是能接受的。当然或许有更好的方案，但限于 Shaun 目前的认知，只能暂时想到这一方案了，若有大佬有更好的方案，还望不吝赐教 🙏。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　优化 DrawCall 是图形学性能优化中老生常谈的问题，而针对 DrawCall 优化有很多方案，大致可分为两种：简化（Simplification）和合并（Consolidation），简化是指减少三角形个数，即将精细的模型变为粗糙的模型以及各种三角形剔除方案（视锥体剔除（Frustum Culling），遮挡剔除（Occlusion Culling）等），而合并自然则是将同一中材质下的多个 geometry 合并成一个 geometry。&lt;/p&gt;
    
    </summary>
    
      <category term="Image&amp;Graphic" scheme="http://cniter.github.io/categories/Image-Graphic/"/>
    
    
      <category term="algorithm" scheme="http://cniter.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Mapbox显示GeoServer地图</title>
    <link href="http://cniter.github.io/posts/e225d8fd.html"/>
    <id>http://cniter.github.io/posts/e225d8fd.html</id>
    <published>2020-11-08T14:58:07.000Z</published>
    <updated>2021-01-17T12:05:15.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　最近做项目需要用到 Mapbox 这个地图可视化框架，以前也没用过，甲方有自己的地图数据，所以得结合 GeoServer 发布一下，简单记录一下流程。</p><a id="more"></a><h2 id="发布篇">发布篇</h2><h3 id="环境准备">环境准备</h3><p>　　下载 <a href="http://geoserver.org/release/maintain/" target="_blank" rel="external">GeoServer</a> 以及同页面下的 <a href="http://sourceforge.net/projects/geoserver/files/GeoServer/2.16.5/extensions/geoserver-2.16.5-vectortiles-plugin.zip" target="_blank" rel="external">Vector Tiles</a> 插件，将插件中所有 jar 包都复制到 GeoServer 中<code>webapps\geoserver\WEB-INF\lib</code>目录下。在 bin 下执行 startup.bat 启动 geoserver，若需要修改端口，可修改 <code>start.ini</code> 文件中的<code>jetty.port=8080</code>，在浏览器中输入 <code>http://localhost:8080/geoserver/web/</code>，geoserver 中默认账号为<code>admin</code>，密码为<code>geoserver</code>，geoserver 中常用的两个坐标系为 <code>EPSG:4326</code>：wgs84坐标，Mercator 投影，<code>EPSG:900913</code>：wgs84 坐标，Web Mercator 投影，即保证投影为正方形，MapBox 中必须使用<code>EPSG:900913</code>坐标系统，900913 和 3857 是一样的坐标系统，在 PostGIS 中对应的 SRID 是 3857。</p><h3 id="设置-tile-caching">设置 Tile Caching</h3><p>　　Tile Layers 中可进行图层和图层组的预览，以及切片，在 seed/truncate 中可以设置切片类型以及自动将切片保存到 <code>\data_dir\gwc</code> 目录中。</p><p>　　Caching Defaults 需要勾选 Enable TMS Service，以及在 Default Tile Image Formats for:中勾选 <code>application/vnd.mapbox-vector-tile</code>，其它默认即可。</p><p>Gridsets 设置新的坐标系统。</p><h3 id="地图发布">地图发布</h3><p>在 数据 栏下：</p><ol type="1"><li>点击工作区，添加新的工作区，命名以及填写 URI，勾选默认工作区。</li><li>点击数据存储，添加新的数据存储，选择数据源，以 Directory of spatial files (shapefiles) 为例，在连接参数下点击 浏览，选择shape文件存放目录，DBF 文件字符集选择 UTF-8 或 GBK。注： shape 文件名中不能有中文。</li><li>点击图层，添加新的资源，添加图层，选择上一步的添加的数据存储名称，点击发布或再次发布，进入发布配置界面，勾选 广告则会在 Layer Preview 中显示，一般不需要勾选，点击<code>Compute from native bounds</code>，GeoServer 会自动计算边框和经纬度信息，然后勾选<code>Linear geometries can contain cicular arcs</code>，使线性几何图形包含环形弧，然后保存。重复当前步骤，直到数据存储中所有图层都发布完毕。</li><li>点击图层组，添加新的图层组，添加图层，然后点击 生成边界，保存，即完成整个地图的发布。</li></ol><p>在 Layer Preview 中点击 openLayers 进行地图预览，随意点击地图，若出现乱码，则需要在数据存储中修改 DBF 文件字符集。</p><h3 id="mapbox-访问-geoserver-地图">Mapbox 访问 GeoServer 地图</h3><p>　　点击 Geoserver 的<code>logo</code>，然后点击 <code>TMS</code> 1.0.0协议，页面跳转后，查找需要访问的外部地址，即对应 TileMap 的 href 属性。MapBox 中访问发布好的切片服务需要在 <code>http://localhost:8080/geoserver/gwc/service/tms/1.0.0/MapBoxTest:Test@EPSG:900913@pbf/{z}/{x}/{y}.pbf</code>，即 href 属性值后面加上 <code>/{z}/{x}/{y}.pbf</code> ，同时注意 在 MapBox style 下 layers 中 <code>source-layer</code> 的值必须为图层名，这里为 <code>&quot;Test&quot;</code> （若使用图层组，则需要找到 Test 图层组下面的图层，使用对应图层名）。简单示例代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="TYPESCRIPT"><figure class="highlight hljs typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mapStyle: mapboxgl.Style = &#123;</div><div class="line">  version: <span class="number">8</span>,</div><div class="line">  sources: &#123;</div><div class="line">    geoserverData: &#123;</div><div class="line">      <span class="keyword">type</span>: <span class="string">'vector'</span>,</div><div class="line">      scheme: <span class="string">'tms'</span>,</div><div class="line">      tiles: [<span class="string">"http://localhost:8080/geoserver/gwc/service/tms/1.0.0/MapBoxTest:Test@EPSG:900913@pbf/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.pbf"</span>],</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 使用 OSM 数据源作为底图</span></div><div class="line">    <span class="comment">// OsmTiles: &#123;</span></div><div class="line">    <span class="comment">//     type: "raster",</span></div><div class="line">    <span class="comment">//     tiles: ["http://a.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png"],</span></div><div class="line">    <span class="comment">//     tileSize: 256,</span></div><div class="line">    <span class="comment">// &#125;,</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  layers: [</div><div class="line">    <span class="comment">// 背景图层</span></div><div class="line">    &#123;</div><div class="line">      id: <span class="string">'background'</span>,</div><div class="line">      <span class="keyword">type</span>: <span class="string">'background'</span>,</div><div class="line">      paint: &#123;</div><div class="line">        <span class="string">'background-color'</span>: <span class="string">"rgb(0, 0, 0)"</span>,</div><div class="line">      &#125;,</div><div class="line">      <span class="comment">// interactive: true,</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// &#123;</span></div><div class="line">    <span class="comment">//     id: "OsmTiles",</span></div><div class="line">    <span class="comment">//     type: "raster",</span></div><div class="line">    <span class="comment">//     source: "OsmTiles",</span></div><div class="line">    <span class="comment">//     "source-layer": "osmtiles",</span></div><div class="line">    <span class="comment">// &#125;,</span></div><div class="line"></div><div class="line">    <span class="comment">// 道路</span></div><div class="line">    &#123;</div><div class="line">      id: <span class="string">'road'</span>,</div><div class="line">      source: <span class="string">'geoserverData'</span>,</div><div class="line">      <span class="string">'source-layer'</span>: <span class="string">'Test'</span>,</div><div class="line"></div><div class="line">      <span class="keyword">type</span>: <span class="string">'line'</span>,</div><div class="line">      layout: &#123;</div><div class="line">        <span class="string">'line-cap'</span>: <span class="string">'round'</span>,</div><div class="line">        <span class="string">'line-join'</span>: <span class="string">'round'</span>,</div><div class="line">      &#125;,</div><div class="line">      paint: &#123;</div><div class="line">        <span class="string">'line-width'</span>: &#123;</div><div class="line">          base: <span class="number">1.5</span>,</div><div class="line">          stops: [</div><div class="line">            [<span class="number">5</span>, <span class="number">0.75</span>],</div><div class="line">            [<span class="number">18</span>, <span class="number">32</span>],</div><div class="line">          ],</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'line-color'</span>: <span class="string">'rgb(255, 255, 255)'</span>,</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      interactive: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 地图标注</span></div><div class="line">    &#123;</div><div class="line">      id: <span class="string">'label'</span>,</div><div class="line">      source: <span class="string">'geoserverData'</span>,</div><div class="line">      <span class="string">'source-layer'</span>: <span class="string">'Test'</span>,</div><div class="line"></div><div class="line">      <span class="keyword">type</span>: <span class="string">'symbol'</span>,</div><div class="line">      layout: &#123;</div><div class="line">        <span class="string">'text-size'</span>: &#123;</div><div class="line">          base: <span class="number">1</span>,</div><div class="line">          stops: [</div><div class="line">            [<span class="number">9</span>, <span class="number">10</span>],</div><div class="line">            [<span class="number">20</span>, <span class="number">16</span>],</div><div class="line">          ],</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'text-max-angle'</span>: <span class="number">30</span>,</div><div class="line">        <span class="string">'symbol-spacing'</span>: <span class="number">250</span>,</div><div class="line">        <span class="string">'text-font'</span>: [<span class="string">'Microsoft YaHei'</span>], <span class="comment">// 标注使用字体</span></div><div class="line">        <span class="string">'symbol-placement'</span>: <span class="string">'line'</span>,</div><div class="line">        <span class="string">'text-padding'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'text-rotation-alignment'</span>: <span class="string">'map'</span>,</div><div class="line">        <span class="string">'text-pitch-alignment'</span>: <span class="string">'viewport'</span>,</div><div class="line">        <span class="string">'text-field'</span>: <span class="string">'&#123;name&#125;'</span>, <span class="comment">// 标注显示属性名</span></div><div class="line">        <span class="string">'text-letter-spacing'</span>: <span class="number">0.01</span>,</div><div class="line">      &#125;,</div><div class="line">      paint: &#123;</div><div class="line">        <span class="string">'text-color'</span>: <span class="string">'hsl(0, 0%, 0%)'</span>,</div><div class="line">        <span class="string">'text-halo-color'</span>: <span class="string">'hsla(0, 0%, 100%, 0.75)'</span>,</div><div class="line">        <span class="string">'text-halo-width'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'text-halo-blur'</span>: <span class="number">1</span>,</div><div class="line">      &#125;,</div><div class="line">      interactive: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> Map(&#123;</div><div class="line">  container: <span class="string">"map-container"</span>, <span class="comment">// html container id</span></div><div class="line">  <span class="comment">// style: "mapbox://styles/mapbox/outdoors-v11", //hosted style id</span></div><div class="line">  style: mapStyle,</div><div class="line">  center: [<span class="number">0</span>, <span class="number">0</span>], <span class="comment">// starting position [经度, 纬度]</span></div><div class="line">  zoom: <span class="number">1</span>, <span class="comment">// starting zoom</span></div><div class="line">  antialias: <span class="literal">true</span>,</div><div class="line">  <span class="comment">// maxZoom: 24,</span></div><div class="line">  <span class="comment">// minZoom: 1,</span></div><div class="line">  <span class="comment">// pitch: 0,</span></div><div class="line">  <span class="comment">// maxPitch: 60,</span></div><div class="line">  <span class="comment">// // minPitch: 0,</span></div><div class="line">  crossSourceCollisions: <span class="literal">false</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></div><h3 id="geoserver-跨域问题">GeoServer 跨域问题</h3><p>　　将 lib 目录中的 jetty-servlets 和 jetty-util 两个 jar 包复制到<code>\webapps\geoserver\WEB-INF\lib</code>目录下，将<code>\webapps\geoserver\WEB-INF\web.xml</code>文件中两个 <code>&lt;!-- Uncomment following filter to enable CORS</code> 注释取消，重启 GeoSever。</p><h2 id="后记">后记</h2><p>　　Mapbox 显示的地图可以自定义样式，而且加载速度渲染性能方面也都还可以，最重要的是由于采用前端渲染矢量，所以没有传统瓦片那种缩放模糊的感觉，这点非常好，本来想总结一篇简单的 Mapbox 使用手册，但没时间整理了，还是算了 😅。</p><h2 id="参考资料">参考资料</h2><p><a href="https://www.dazhuanlan.com/2019/10/01/5d92e1fa6d695/" target="_blank" rel="external">基于geoserver+mapbox的定制化离线地图技术方案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　最近做项目需要用到 Mapbox 这个地图可视化框架，以前也没用过，甲方有自己的地图数据，所以得结合 GeoServer 发布一下，简单记录一下流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="mapbox" scheme="http://cniter.github.io/tags/mapbox/"/>
    
  </entry>
  
  <entry>
    <title>Docker使用小结</title>
    <link href="http://cniter.github.io/posts/3d8ab974.html"/>
    <id>http://cniter.github.io/posts/3d8ab974.html</id>
    <published>2020-11-01T12:58:09.000Z</published>
    <updated>2020-11-07T14:00:15.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　最近由于项目部署需要，简单学习了 docker 的使用和回顾下 CentOS 中的常用操作。</p><a id="more"></a><h2 id="docker-篇">Docker 篇</h2><p>　　由于 Shaun 此次需要安装的环境有点偏门，没找到有完全符合要求的镜像，同时也趁着这次机会学一下 docker，所以就还是直接从最开始的装起了。</p><p>　　首先使用 <code>docker pull centos:7</code> 拉取 CentOS7 的系统镜像，使用 <code>docker images</code> 查看已有的本地镜像信息，使用 <code>docker ps -a</code> 查看当前已有的容器信息，去掉参数 a ，即显示正运行的容器，<code>docker stop [container id | name]</code> 可关闭指定容器，<code>docker start [container id | name]</code> 可打开指定容器，<code>docker rm [container id | name]</code> 可删除指定容器，<code>docker rmi [image id | name]</code> 可删除指定镜像，再删除镜像之前需要先删除依赖该镜像的所有容器。</p><p>　　使用 <code>docker run -dit -p 80:80 -p 8080:8080 --name CentOS7 centos:7 bash</code> 开启一个新的容器，其中参数的意义为： <strong>-i</strong>: 交互式操作；<strong>-t</strong>: 终端；<strong>-d</strong>: 后台启动；<strong>-p</strong>: 设置主机的端口映射到容器内的端口；<strong>-name</strong>: 指定容器名称；最后的 bash 代表使用 bash 终端。<em>在 windows 中直接使用 docker run 运行镜像时会出现 the input device is not a TTY. If you are using mintty, try prefixing the command with ‘winpty’ 的错误，前面加上 winpty 即可，即 <code>winpty docker run ...</code></em>。当没有参数 d 时，则直接进入容器，而当存在参数 d 时，由于容器实在后台启动，进入容器时需要执行 <code>docker exec -it [container id | name] bash</code> 才能进入容器，而退出容器可以输入 <code>exit</code> 命令。</p><p>　　而为了在容器中可以开启后台服务，需要在开启容器时就进行提权，在 Windows 中提权命令为 <code>docker run -dit --privileged=true --name CentOS7 centos:7 init</code>；而在 Linux 中提权命令为 <code>docker run -dit --privileged=true --name CentOS7 centos:7 /usr/sbin/init</code>。</p><p>　　在新开启的容器中添加数据和相应的环境之后，即可使用 <code>docker commit CentOS7 new_image:tag</code> 生成一个新的镜像（生成镜像之前最好关闭容器），该镜像包含已经安装的环境和数据，再使用 <code>docker save -o centos7.tar new_image:tag</code>，可将生成的镜像导出成 tar 包，在其他机器中使用 <code>docker load -i centos7.tar</code> 即可导入该 tar 包，并生成相应的镜像， 从而简单便捷的完成环境和数据迁移部署任务。</p><p>　　容器有时需要和主机之间传输文件，有两种方案，一种是直接采用共享文件夹的方式，设置某个目录为两系统的共享目录，从而实现文件传输；另一种是使用 docker cp 命令，使用 <code>docker cp src_path container:dst_path</code> 将主机的文件拷贝到容器中；使用 <code>docker cp container:src_path dst_path</code> 将容器的文件拷贝到主机中。</p><h2 id="centos-篇">CentOS 篇</h2><h3 id="安装postgresql12">安装PostgreSQL12</h3><p><a href="https://www.cnblogs.com/zhi-leaf/p/11432054.html" target="_blank" rel="external">CentOS安装PostgreSQL</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SHELL"><figure class="highlight hljs shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Install the repository RPM:</span></div><div class="line">yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> Install PostgreSQL:</span></div><div class="line">yum install -y postgresql12-server</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> Optionally initialize the database and <span class="built_in">enable</span> automatic start:</span></div><div class="line">/usr/pgsql-12/bin/postgresql-12-setup initdb</div><div class="line">systemctl enable postgresql-12</div><div class="line">systemctl start postgresql-12</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">开启远程访问</span></div><div class="line">修改/var/lib/pgsql/10/data/postgresql.conf文件，</div><div class="line">取消 listen_addresses 的注释，将参数值改为“*”</div><div class="line"></div><div class="line">修改/var/lib/pgsql/10/data/pg_hba.conf文件，增加下</div><div class="line"><span class="meta">#</span><span class="bash"> IPv4 <span class="built_in">local</span> connections:</span></div><div class="line">host all all 127.0.0.1/32 md5</div><div class="line">host all all 0.0.0.0/0 md5</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 给数据库postgres用户分配密码 1</span></div><div class="line">psql -U postgres</div><div class="line">alter user postgres with encrypted password '1';</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 重启服务</span></div><div class="line">systemctl restart postgresql-12</div></pre></td></tr></table></figure></div><p>由于需要切换账户，所以最好在第一步安装完之后就使用 <code>passwd [username] XXXXXX</code> 设置 root 和 postgres 两个账户的密码。</p><h3 id="安装postgis">安装postgis</h3><p>（https://yum.postgresql.org/12/redhat/rhel-7-x86_64/repoview/）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SHELL"><figure class="highlight hljs shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 解决依赖</span></div><div class="line">yum install epel-release </div><div class="line"></div><div class="line">yum install -y https://yum.postgresql.org/12/redhat/rhel-7-x86_64/postgis30_12-3.0.2-2.rhel7.x86_64.rpm</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 安装pgrouting </span></div><div class="line">yum install -y https://yum.postgresql.org/12/redhat/rhel-7-x86_64/pgrouting_12-3.0.2-1.rhel7.x86_64.rpm</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 安装ogr_fdw </span></div><div class="line">yum search ogr_fdw # 查询</div><div class="line">yum install ogr_fdw # 安装</div></pre></td></tr></table></figure></div><p>postgres 移除扩展 <code>drop extension postgis cascade;</code>。</p><h3 id="安装java">安装Java</h3><p>（https://www.cnblogs.com/bcomll/p/12142747.html）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SHELL"><figure class="highlight hljs shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 搜素java</span></div><div class="line">yum search java | grep -i --color JDK</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">安装</span></div><div class="line">yum install java-11-openjdk</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></div><div class="line">vi /etc/profile</div><div class="line"><span class="meta">#</span><span class="bash"> 加入内容</span></div><div class="line">export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64</div><div class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/dt.jar:$JAVA_HOME/lib/tool.jar</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 重启环境</span></div><div class="line">source /etc/profile</div></pre></td></tr></table></figure></div><h3 id="安装geoserver">安装GeoServer</h3><p>（https://blog.csdn.net/weixin_34205076/article/details/88734828）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SHELL"><figure class="highlight hljs shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">mv /tmp/geoserver-2.13.2 /usr/share/geoserver</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 添加环境变量</span></span></div><div class="line">vi /etc/profile</div><div class="line"><span class="meta">#</span><span class="bash"> 追加</span></div><div class="line">export GEOSERVER_HOME=/usr/share/geoserver</div><div class="line"><span class="meta">#</span><span class="bash"> 重新加载/etc/profile文件</span></div><div class="line">source /etc/profile</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 授权</span></div><div class="line">chown -R root:root /usr/share/geoserver</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 改造启动脚本</span></span></div><div class="line">vim /usr/share/geoserver/bin/startup.sh</div><div class="line">     </div><div class="line"><span class="meta">#</span><span class="bash"> 在最上面引入环境变量</span></div><div class="line">source /etc/profile</div><div class="line">     </div><div class="line"><span class="meta">#</span><span class="bash"> 最后执行改为nohup，并将日志输入到 var/<span class="built_in">log</span>/geoserver.log</span></div><div class="line">nohup "$_RUNJAVA" $JAVA_OPTS $MARLIN_ENABLER -DGEOSERVER_DATA_DIR="$GEOSERVER_DATA_DIR" -Djava.awt.headless=true -DSTOP.PORT=8079 -DSTOP.KEY=geoserver -jar start.jar 1&gt;/dev/null 2&gt;/var/log/geoserver.log &amp;</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 修改停止脚本</span></span></div><div class="line">vim /usr/share/geoserver/bin/shutdown.sh</div><div class="line"><span class="meta">#</span><span class="bash"> 在最上面引入环境变量</span></div><div class="line">source /etc/profile</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 创建服务</span></span></div><div class="line">vim /lib/systemd/system/geoserver.service  </div><div class="line">     </div><div class="line">[Unit]</div><div class="line">Description=geoserver service</div><div class="line">After=network.target</div><div class="line">     </div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">LimitNOFILE=65536</div><div class="line">ExecStart=/usr/share/geoserver/bin/startup.sh</div><div class="line">ExecReload=</div><div class="line">ExecStop=/usr/share/geoserver/bin/shutdown.sh</div><div class="line">Restart=on-abort</div><div class="line">     </div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 开机自启</span></span></div><div class="line">systemctl enable geoserver</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 开启服务</span></span></div><div class="line">systemctl start geoserver</div></pre></td></tr></table></figure></div><h3 id="安装-nginx">安装 nginx</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SHELL"><figure class="highlight hljs shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install nginx # 下载并安装nginx</div><div class="line"></div><div class="line">systemctl start nginx # 启动nginx服务</div></pre></td></tr></table></figure></div><p>　　在 /etc/nginx 下可修改 nginx.config 文件，监听端口默认是 80，直接输入本地地址可能并打不开网页，因为直接这样安装的 nginx 的可能“有毒”，在 /usr/share/nginx/html 目录中 index.html 可能并不是一个 html 文件，而只是快捷方式，需要从别的地方拷贝一个真正的 index.html 文件替换该文件才可正常打开网页。</p><h3 id="安装-nodejs">安装 nodejs</h3><p>（https://github.com/nodesource/distributions）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SHELL"><figure class="highlight hljs shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -sL https://rpm.nodesource.com/setup_10.x | bash -</div><div class="line"></div><div class="line">yum install -y nodejs</div></pre></td></tr></table></figure></div><h2 id="vscode-远程篇">VSCode 远程篇</h2><p>　　需要安装 VSCode 远程开发插件 https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack，包括（Remote - WSL，Remote - Containers，Remote - SSH）。</p><p>在远程资源资源管理器中 切换到 SSH Targes 标签，点击设置设置，在 C:/Users/用户名/.ssh/config 中输入</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Host [随便写]</div><div class="line">  HostName remote-ip 或 域名</div><div class="line">  User 远程服务器用户名</div></pre></td></tr></table></figure></div><p>　　配置SSH，通过命令 <code>ssh-keygen -t rsa -b 4096</code> 生成密钥对（在 C:/Users/用户名/.ssh/ 目录中），将公钥内容拷贝到远程服务器<code>/root/.ssh/authorized_keys</code> 中，修改配置文件 <code>/etc/ssh/sshd_config</code>，取消 <code>#PubkeyAuthentication yes</code> 注释，允许使用基于密钥认证的方式登录。重启 sshd 服务 <code>systemctl restart sshd</code>。<em>通过 VSCode ssh 远程连接在结束之后最好将终端全部删除，尤其是最开始的那个 install server 终端。</em></p><p>　　设置好SSH之后，通过在 VSCode 中设置 <code>&quot;docker.host&quot;:&quot;ssh://your-remote-user@your-remote-machine-fqdn-or-ip-here&quot;</code>，可以直接连接在远程服务器上的 docker。<strong>该设置最好用于 工作区设置，而不是 用户设置。</strong></p><p>　　VSCode 远程连接 SSH 有时可能会出现无法连接，一直尝试连接的现象，这时需要粗暴的删除 ~/.vscode-server 目录，重新进行连接，不行的话就只能参考: https://stackoverflow.com/questions/56718453/using-remote-ssh-in-vscode-on-a-target-machine-that-only-allows-inbound-ssh-co，先关闭远程服务器上已存在的所有 vscode-server 进程，通过 <code>https://update.code.visualstudio.com/commit:$COMMIT_ID/server-linux-x64/stable</code> 下载 tar 包，使用 <code>tar -xvzf vscode-server-linux-x64.tar.gz --strip-components 1</code> 后再重新连接。</p><h2 id="后记">后记</h2><p>　　据查 docker 依然存在很多缺点，尤其是守护进程，Shaun 这两天在 Windows 中使用 Docker 也时不时的出现 docker 卡死的问题，需要重启 docker 服务， 以后有机会还是使用 Podman 吧。RedHat 系的 yum 也快退休了，以后再需要安装软件可能就直接上毒奶粉（bushi）dnf 了。VSCode 远程开发是真的舒服，文件无缝传输，任意修改，可以尽情享受现代编辑器的方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　最近由于项目部署需要，简单学习了 docker 的使用和回顾下 CentOS 中的常用操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="note" scheme="http://cniter.github.io/tags/note/"/>
    
      <category term="container" scheme="http://cniter.github.io/tags/container/"/>
    
      <category term="unix-like" scheme="http://cniter.github.io/tags/unix-like/"/>
    
  </entry>
  
  <entry>
    <title>空间中三角形与三角形相交</title>
    <link href="http://cniter.github.io/posts/6694a214.html"/>
    <id>http://cniter.github.io/posts/6694a214.html</id>
    <published>2020-10-18T15:36:15.000Z</published>
    <updated>2020-10-18T15:49:27.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　一种快速判断空间中三角形与三角形相交的方法，出自论文：<em>Tomas Moller. A Fast Triangle-Triangle Intersection Test. Journal of Graphics Tools, 1997, 2(2):25-30.</em> ，与「快速判断三角形与长方体相交」中那篇论文的作者是同一个人。</p><a id="more"></a><h2 id="相交篇">相交篇</h2><p>　　该论文的理论基础部分来自分离轴理论，论文中三角形与三角形的相交测试主要可分为 3 类：1、沿三角形所在平面法线方向的相交测试；2、沿三角形所在两平面交线方向的相交测试；3、共面时的相交测试。下面来逐步分析这些相交测试。</p><h3 id="沿法线方向相交">沿法线方向相交</h3><p>　　沿法线相交很简单，直接使用分离轴理论分别判断两三角形在对应两条法线上的投影是否相交，若存在一条法线使投影不相交，则可直接判定两三角形不相交，若投影都相交，则存在两种情况，一种是两三角形共面，一种是两三角形相互跨立，判断这两种情况的依据为计算两段投影之间的距离，具体计算方法为：计算三角形 B 上三个点到三角形 A 所在平面的距离，距离计算的方法可参考「<a href="https://cniter.github.io/posts/5315fcfd.html#%E7%82%B9%E5%88%B0%E5%B9%B3%E9%9D%A2%E7%9A%84%E8%B7%9D%E7%A6%BB">计算几何基础—点到平面的距离</a>」，此距离同时需要保留方向，若三个点的距离都为 0，则两三角形共面；若三个距离都同号，则说明投影不相交，即两三角形不相交；若三个距离存在异号现象，则 B 跨立 A。</p><h3 id="沿交线方向相交">沿交线方向相交</h3><p>　　若两三角形相互跨立，则需要判断两三角形是否在两三角形所在平面交线上存在相交。由于两三角形相互跨立，则两三角形必然都与交线相交，则需要分别计算两三角形与交线的交点，根据交点判断两交线段是否相交，若相交，则可直接判定两三角形相交，若不相交，则同样可直接判定两三角形不相交。</p><p>　　问题的关键现在在于求取两交线段，比较粗暴的方式为：先求出两平面的交线，交线的方向向量为两三角形所在平面法向量的的叉积，交线上的一点通过联立两平面方程进行求取，由于是两个方程求 3 个未知数（x，y，z），所以理论上有无数个解，令交线方向向量绝对值最大的分量对应的未知数为 0，消除一个未知数，还剩两个，可得唯一解，即可求出交线上一点，亦可得到直线参数方程，求两交线段相当于求四个交点，根据直线与线段相交可得到交点，进而得到交线段。</p><p>论文中的方法为：求出交线的方向向量 D 后，设 O 为交线上任意一点（<em>不需要求</em>），则交线方程为 <span class="math inline">\(L= O+tD\)</span>，此时求交线段只需要求出 4 个 t。先求交线与三角形 A 的交线段，设三角形 A（V0，V1，V2）三个顶点到三角形 B 所在平面的距离分别为 <span class="math inline">\(d_0,d_1,d_2\)</span>，设 <span class="math inline">\(d_1\)</span> 与其它两个距离异号，则交线分别与 V0V1 和 V2V1 相交，先求与 V0V1 相交时的 t1，设三角形 B 所在的平面为平面 B，V0 和 V1 在平面 B 上的投影分别为为 K0 和 K1，V0 和 V1 在交线上的投影分别为为 P0 和 P1，交线与 V0V1 的交点为 C1，设 <span class="math inline">\(P0=O+p_0D,P1=O+p_1D,C1=O+t_1D\)</span>，则 <span class="math inline">\(p_0=(V0-O)·D,p_1=(V1-O)·D\)</span>，由论文中图二可知，有两组三角形相似，分别为 V0C1K0和V1C1K1 相似，以及 V0C1P0和V1C1P1 相似，所以 <span class="math display">\[ \frac{V0K0}{V1K1} = \frac{V0C1}{V1C1} = \frac{C1P0}{C1P1} \Rightarrow \frac{d_0}{d_1} = \frac{p_0-t_1}{p1-t_1} \Rightarrow t_1 = \frac{d_0p_1-d_1p_0}{d_0-d_1} \]</span> 若点 O 为原点在交线上的投影，则 <span class="math inline">\((V0-O)·D=V0·D=p_0, 　p_1=V1·D\)</span>，若将交线投影到交线方向向量绝对值最大的分量对应的坐标轴上，在该投影交线上进行相交测试与在原交线上进行相交测试是等效的，所以此时 <span class="math inline">\(p_0,p_1\)</span> 即为 V0 和 V1 上对应坐标轴的分量。同理可求出 t2，t3 ，t4，两交线段为 t1t2 和 t3t4。</p><h3 id="共面相交">共面相交</h3><p>　　判断共面相交，相当于判断 2 维中两三角形是否相交，先将三角形投影到 XOY，XOZ，YOZ 平面中投影面积最大的平面（为避免计算面积，可直接令三角形顶点坐标中对应法向向量中绝对值最大的分量为 0，即若法向向量中绝对值最大的分量为 y，则将三角形投影到 XOZ 平面），判断投影后的两三角形是否相交即可，因为此时的两三角形相交，当且仅当其投影三角形相交。2 维中两三角形是否相交，论文中方法是先判断两三角形的边是否相交，即相当于判断 9 组线段是否相交，若存在一组相交，则两三角形相交，若都不相交，则需要判断其中一个三角形是否被另一个三角形包含，具体判断方式取三角形 A 中一顶点，若该顶点在三角形 B 内（判断 2 维中点在多边形内的方法同样可参考「计算几何基础」），则说明三角形 A 在 B 内，同样也需要判断 B 是否在 A 内，若都不在，则两三角形不相交，否则两三角形相交。当然，也可以直接通过分离轴理论来判断两三角形是否相交，毕竟，这就是在 2 维中，而且三角形算是天然的凸多边形。</p><h2 id="后记">后记</h2><p>　　三角形是图形学中组成面的基本单元，图形学中面与面的碰撞检测都可以很粗暴的用三角形相交来实现，只不过直接一个个判断效率有点低就是了，所以一般会借助一些基于的树和包围盒空间加速结构，或者针对某种形状的特殊方法，这又是新的方法系列了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　一种快速判断空间中三角形与三角形相交的方法，出自论文：&lt;em&gt;Tomas Moller. A Fast Triangle-Triangle Intersection Test. Journal of Graphics Tools, 1997, 2(2):25-30.&lt;/em&gt; ，与「快速判断三角形与长方体相交」中那篇论文的作者是同一个人。&lt;/p&gt;
    
    </summary>
    
      <category term="Image&amp;Graphic" scheme="http://cniter.github.io/categories/Image-Graphic/"/>
    
    
      <category term="algorithm" scheme="http://cniter.github.io/tags/algorithm/"/>
    
      <category term="geometry" scheme="http://cniter.github.io/tags/geometry/"/>
    
  </entry>
  
  <entry>
    <title>计算几何基础</title>
    <link href="http://cniter.github.io/posts/5315fcfd.html"/>
    <id>http://cniter.github.io/posts/5315fcfd.html</id>
    <published>2020-08-22T00:42:39.000Z</published>
    <updated>2020-10-11T16:02:33.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　由于本篇主要是谈谈基础，所以一些快速运算方法一般不在本篇探讨范围之内，一些特殊的快速手法等后续专门独立开篇再谈。</p><a id="more"></a><h2 id="基础篇">基础篇</h2><p><strong>解线性方程组：</strong>令 <span class="math inline">\(A\)</span> 为 <span class="math inline">\(n×n\)</span> 的矩阵，<span class="math inline">\(α\)</span> 和 <span class="math inline">\(β\)</span> 为 n 维的列向量，设 <span class="math inline">\(A = \begin{bmatrix} \alpha_1 &amp; \alpha_2 &amp; \alpha_3 &amp; ... &amp; \alpha_n \end{bmatrix}\)</span>，对于线性方程组 <span class="math inline">\(Ax = β\)</span>，初等数学中最常规的就是消元法了，但在线性代数中，有两种解法，一种是等式两边同乘 <span class="math inline">\(A\)</span> 的逆阵，得到 <span class="math inline">\(x = A^{-1}β\)</span>；另一种是克莱姆法则，可得 <span class="math inline">\(x_i = |A_i| / |A|\)</span>，其中 <span class="math inline">\(|A|\)</span> 为 矩阵 <span class="math inline">\(A\)</span> 对应的行列式， <span class="math inline">\(|A_i|\)</span> 为将矩阵 <span class="math inline">\(A\)</span> 中第 <span class="math inline">\(i\)</span> 列换成 <span class="math inline">\(β\)</span> 后对应的行列式，如 <span class="math inline">\(x_3 = \left| \begin{array}{cccc} \alpha_1 &amp; \alpha_2 &amp; \beta &amp; ... &amp; \alpha_n \end{array} \right| / |A|\)</span>。</p><p><strong>向量内积：</strong>又称向量点积，向量点乘。设 a，b 为空间中两个 n 维向量 <span class="math inline">\(a=(x_1,x_2,x_3,...,x_n)\)</span>，<span class="math inline">\(b=(y_1,y_2,y_3,...,y_n)\)</span>，则 <span class="math inline">\(a·b=|a|*|b|*cos(α)=\sum\limits_{i=1}^{n}x_iy_i\)</span>，其中<span class="math inline">\(|a|= \sqrt{(x_1)^2+(x_2)^2+(x_3)^2+...+(x_n)^2},\alpha\)</span> 为两向量之间夹角。向量内积一般用来计算投影（令 <span class="math inline">\(|b|=1\)</span>，则 <span class="math inline">\(a \cdot b=|a|cos(α)\)</span>，即为向量 a 在 b 上的投影），和两向量之间角度。</p><p><strong>向量外积：</strong>又称向量叉积，向量叉乘，<span class="math inline">\(|a×b|=||a|*|b|*sin(\alpha)|\)</span>。向量外积一般只针对二维向量和三维向量，对于二维向量，<span class="math inline">\(a×b=a.x*b.y-b.x*a.y\)</span>，可以认为是一个值（其实也是一个向量），对于三维向量 <span class="math inline">\(a×b=(a.y*b.z-b.y*a.z, a.x*b.z-b.x*a.z, a.x*b.y-b.x*a.y)\)</span>，是一个向量，且该向量一定垂直于 a，b 两向量构成的平面，所以三维向量的外积一般可以用来计算平面的法向量。向量外积的几何意义为两向量构成平行四边形的面积，二维向量外积直接取绝对值即为面积，不取绝对值则可以用来判断两向量构成三角形的点是以顺时针排列（小于 0）的还是逆时针排列（大于 0）的，三维向量外积取所得向量的模即为面积。</p><p><strong>向量混合积：</strong> 设 <span class="math inline">\(a\)</span>，<span class="math inline">\(b\)</span>，<span class="math inline">\(c\)</span> 为空间中三个向量，则其混合积 <span class="math inline">\((a,b,c)= (a×b)·c = -(c×b)·a = -(a×c)·b\)</span>，<span class="math inline">\((a,b,c) = (b,c,a) = (c,a,b)\)</span>。若 <span class="math inline">\(a\)</span>，<span class="math inline">\(b\)</span>，<span class="math inline">\(c\)</span> 都为 3 维的向量，矩阵 <span class="math inline">\(A = [a, b, c]\)</span>，则 <span class="math inline">\(|A| = (a, b, c)\)</span> ，其中 <span class="math inline">\(a,b,c\)</span> 是列向量或行向量都可以，因为 <span class="math inline">\(|A| = |A^T|\)</span>，该混合积的几何意义为这三个向量组成的平行六面体的体积。</p><p><strong>直线参数方程：</strong>设 P 为直线上任意一点，若 P1 和 P2 为直线上已知两点，则 <span class="math inline">\(P=P1 + (P2-P1)*t, t\in[-∞,+∞]\)</span>。当然直线的参数方程有很多种形式，之所以用两点式，是因为两点式除了能表示直线，同样能表示射线（<span class="math inline">\(t\ge 0\)</span>），也能表示线段（<span class="math inline">\(0\le t\le 1\)</span>）。</p><p><strong>平面方程：</strong>设 P 为平面上任意一点，O 为平面上已知一点，n 为平面法向量，则平面方程为：<span class="math inline">\((P-O)·n=0\)</span> 。</p><p><strong>三角形内的点：</strong>设 P0，P1，P2 为三角形 3 个顶点，若 P 为三角形内一点，同时可认为 (P1-P0) 和 (P2-P0) 为一组基向量，则 P 满足 <span class="math inline">\(P=P0+u*(P1-P0)+v*(P2-P0),u \in [0,1],v \in [0,1],u+v\le 1\)</span>。</p><h2 id="距离篇">距离篇</h2><p>　　一般的距离计算都是向量计算，要么点乘，要么叉乘。</p><h3 id="点到直线的距离">点到直线的距离</h3><p>　　计算点到直线的距离通用的解法是使用向量叉乘，设 P 为直线外一点，Q1 和 Q2 为直线上两点，则可得到两向量 <span class="math inline">\(a=P-Q1, b=Q2-Q1\)</span>，则 P 到直线的距离为 <span class="math inline">\(d=|a×b|/|b|\)</span>，叉乘是面积，而面积又等于底乘高，<span class="math inline">\(|b|\)</span> 为底，<span class="math inline">\(d\)</span> 为高。当然点到直线的距离还有其他的一些方法，如 利用公式，利用点积再使用勾股定理，直接利用点积计算直线法向量上的投影等，这些方法都有一定的局限性。</p><h3 id="点到线段的距离">点到线段的距离</h3><p>　　设 d 为点 P 到线段的距离，表示为点 P 到线段上最近点的距离，设 P1，P2 分别为线段两端点，计算 <span class="math inline">\(a=(P-P1)·(P2-P1) / |P2-P1|\)</span>，若 <span class="math inline">\(0≤a≤1\)</span>，则 d 为点 P 到线段所在直线的距离，若 <span class="math inline">\(a&lt;0\)</span>，则 d 为点 P 到点 P1 的距离，若 <span class="math inline">\(a&gt;1\)</span>，则 d 为点 P 到点 P2 的距离。</p><h3 id="三维中点到三角形的距离">三维中点到三角形的距离</h3><p>　　先计算点 P 到三角形所在平面的投影点 <span class="math inline">\(P&#39;\)</span>，若 <span class="math inline">\(P&#39;\)</span> 在三角形内，则只需要求点 P 到三角形所在平面的距离，否则需要分别求点 P 到三角形三条边的距离（点到线段的距离），取三个距离中最小值即为点到三角形的距离。</p><h3 id="点到平面的距离">点到平面的距离</h3><p>　　直接利用点乘计算，平面外一点与平面内一点构成的向量到平面法向量上的投影，即为点到平面的距离。设 P 为平面外一点，O 为平面内一点，n 为平面法向量，则点 P 到平面的距离为 <span class="math inline">\(d=(P-O) \cdot n\)</span>。</p><h3 id="直线到直线的距离">直线到直线的距离</h3><p>　　设 P1 和 P2 为直线 1 上两点，Q1 和 Q2 为直线 2 上两点，则直线 1 与直线 2 之间的距离计算流程为：</p><ol type="1"><li>先判断两直线是否平行，即 <span class="math inline">\((P2-P1) = k*(Q2-Q1), k \neq 0\)</span> 有解。若平行，则相当于计算点到直线的距离；若不平行，则进行下一步。</li><li>再判断两直线是否共面，即 P1，P2，Q1，Q2 四点共面，先计算 <span class="math inline">\(n=(P2-P1)×(Q2-Q1)\)</span>，再分别计算 <span class="math inline">\(n·(Q1-P1), n·(Q2-P1), n·(Q1-P2), n·(Q2-P2)\)</span>，若这四个值都为 0 ，则两直线共面（之所以需要判断 4 个值，是为防出现 3 点共线情况，当然也可以先判断 3 点共线，再取不共线的一点构成向量与 n 做点积进行判断），若两直线共面，则两直线必然相交；若两直线不共面，则两直线间距离为 <span class="math inline">\(d=(Q1-P1) \cdot n\)</span>。</li></ol><h3 id="直线到平面的距离">直线到平面的距离</h3><p>　　设 P1 和 P2 为直线上两点，n 为平面法向量，则直线与平面之间的距离计算流程为：</p><ol type="1"><li>先判断直线与平面是否平行，即若 <span class="math inline">\((P2-P1) \cdot n = 0\)</span> ，则直线与平面平行，则直线到平面的距离为 点 P1 到平面的距离；</li><li>若直线与平面不平行，则直线与平面必相交。</li></ol><h2 id="相交篇">相交篇</h2><p>　　一般的相交求交点都是联立方程组，但有些只需要做相交测试的，可以利用一些特殊方法快速求出来。有些相交直接求很麻烦或很难，可以反向求不相交的情况，而在实际编程中，一般都有很多条件语句，以便快速返回提高效率。</p><h3 id="直线与直线相交">直线与直线相交</h3><p>　　设直线 1 方程为 <span class="math inline">\(P=P1 + (P2-P1)*t\)</span>，直线 2 方程为 <span class="math inline">\(P=Q1 + (Q2-Q1)*u\)</span>，联立两方程得 <span class="math inline">\(P1 + (P2-P1)*t = Q1 + (Q2-Q1)*u\)</span>，即 <span class="math inline">\(P1-Q1 = (Q2-Q1)*u - (P2-P1)*t\)</span>，设 <span class="math inline">\(v_0=Q2-Q1,v_1=P1-P2,v_2=P1-Q1\)</span>，即 <span class="math inline">\(v_0*u+v_1*t=v_2\)</span>，现在的问题就是解这个方程了，一种是直接把向量分解成单一维度，列方程组；一种是等式两边分别同时点乘 <span class="math inline">\(v_0\)</span> 和 <span class="math inline">\(v_1\)</span>，可得 <span class="math display">\[ \begin{cases} (v_0 \cdot v_0)*u+(v1 \cdot v_0)*t=v_2 \cdot v_0 , \\ (v_0 \cdot v_1)*u+(v1 \cdot v_1)*t=v_2 \cdot v_1 \end{cases} \]</span> 解得： <span class="math display">\[ \begin{cases} u=((v1·v1)(v2·v0)-(v1·v0)(v2·v1)) / ((v0·v0)(v1·v1) - (v0·v1)(v1·v0)) , \\ t = ((v0·v0)(v2·v1)-(v0·v1)(v2·v0)) / ((v0·v0)(v1·v1) - (v0·v1)(v1·v0)) \end{cases} \]</span> 若方程有解，则两直线相交，由于两点式方程可以很简单的转换为线段和射线，所以该方法同样可以判断两线段相交，两射线相交，射线与直线与线段相交等。针对二维直线，还有一种解法是将原方程写成矩阵形式，利用克莱姆法则进行求解，不过总的来说，最终的解都是一种形式。</p><h3 id="直线与平面相交">直线与平面相交</h3><p>　　求直线与平面相交，直接联立直线方程和平面方程即可，得 <span class="math inline">\((P1-O+(P2-P1)*t)·n=0\)</span> ，即 <span class="math inline">\(t=(P1-O)·n/((P1-P2)·n)\)</span>。若 t 有解，则直线与平面相交。同样也可以用该方法判断线段或射线与平面相交。</p><h3 id="直线与三角形相交">直线与三角形相交</h3><p>　　二维中判断直线和三角形相交相当于判断直线和线段相交，而在三维中则同样需要联立直线和三角形方程，设直线方程为 <span class="math inline">\(P=P1+(P2-P1)*t\)</span>，三角形方程为 <span class="math inline">\(P=Q1+(Q2-Q1)*u+(Q3-Q1)*v\)</span>， 则联立后方程为 <span class="math inline">\(P1-Q1=(P1-P2)*t+(Q2-Q1)*u+(Q3-Q1)*v\)</span>，令 <span class="math inline">\(V_0=P1-Q1,V_1=P1-P2,V_2=Q2-Q1,V_3=Q3-Q1\)</span>，则 <span class="math inline">\(V_0=V_1*t+V_2*u+V_3*v\)</span>，可以分解向量求解，也可以使用克莱姆法则得： <span class="math display">\[ t = \frac{\begin{vmatrix} V_0 &amp; V_2 &amp; V_3 \end{vmatrix}}{\begin{vmatrix} V_1 &amp; V_2 &amp; V_3 \end{vmatrix}} \qquad u = \frac{\begin{vmatrix} V_1 &amp; V_0 &amp; V_3 \end{vmatrix}}{\begin{vmatrix} V_1 &amp; V_2 &amp; V_3 \end{vmatrix}} \qquad v = \frac{\begin{vmatrix} V_1 &amp; V_2 &amp; V_0 \end{vmatrix}}{\begin{vmatrix} V_1 &amp; V_2 &amp; V_3 \end{vmatrix}} \qquad \]</span> 由于三阶行列式也可以用向量混合积来求值，所以 <span class="math display">\[ t = \frac{-V_0 × V_3 · V_2 }{V_1 × V_2 · V_3} \qquad u = \frac{V_0 × V_3 · V_1 }{V_1 × V_2 · V_3} \qquad v = \frac{V_1 × V_2 · V_0 }{V_1 × V_2 · V_3} \qquad \]</span> 若方程有解，且满足三角形条件，则相交。</p><h3 id="二维中凸多边形与凸多边形相交">二维中凸多边形与凸多边形相交</h3><p>　　曾在「<a href="https://cniter.github.io/posts/ff29de94.html">快速判断三角形与长方体相交</a>」中写过判断两凸多边形是否相交直接使用分离轴理论（separating axis theorem， AST）即可，简而言之就是，取两多边形任意一条边，计算两多边形在该边法向量上的投影是否相交，若存在一条边，使投影不相交，则两凸多边形不相交。</p><h3 id="二维中点在多边形内">二维中点在多边形内</h3><p>　　判断点在多边形内有很多种方法，利用叉乘，面积等方法虽然思想简单粗暴但一般计算量较大，且有一定的局限性，仅限凸多边形，但有一种相对快速且能应对各种简单多边形的方法——射线法，射线法的本质是判断射线与线段相交，即从已知点处引一条沿 X 轴正向的射线，若射线与多边形边的相交条数为奇数，则该点在多边形内，该法的缺陷在于若点在边上则需要单独判断。判断该射线与多边形的边是否相交也比较简单，设射线起点为 P0，多边形边的两个端点分别为 P1 和 P2，则射线与边相交需满足的条件为：1、<span class="math inline">\(min(P1.y, P2.y)&lt;=P0.y&lt;=max(P1.y, P2.y)\)</span>；2、<span class="math inline">\(P0.x &lt;= (P2.x-P1.x)*(P0.y-P1.y)/(P2.y-P1.y)+P1.x\)</span>。</p><h3 id="圆与三角形相交">圆与三角形相交</h3><p>　　判断圆与三角形相交，即判断圆心到三角形各边的距离是否小于圆的半径，若存在一条边，使圆心到其的距离小于半径，则圆与三角形相交，<em>该距离计算不是点到直线的距离，而是点到线段的距离</em>。</p><h3 id="直线与长方体相交">直线与长方体相交</h3><p>　　判断直线与长方体相交，首先需要将坐标原点平移至长方体中心，再计算过原点且垂直于直线的法向量 n ，随后计算原点到直线的距离 d，若满足 <span class="math inline">\(|d| &lt;= h_x|n_x| + h_y|n_y| + h_z|n_z|\)</span> ，则 直线与长方体相交。法向量 n 的求法为：设 P 为直线上一点，l 为直线方向向量，则 <span class="math inline">\(n=-(P·l)*l+P\)</span>。</p><h3 id="球与-aabb-相交">球与 AABB 相交</h3><p>判断球与 AABB 相交，首先需要将坐标原点平移至球心，设平移后的 AABB 最小顶点为 V1，最大顶点为 V2，球半径为 r。最简单粗暴的当然是若原点不在 AABB 内，则直接求原点到 8 个面的距离，取最小值，若最小值比半径大，则不相交。另一种方法是将这个问题转化为求解不等式，若存在一点 <span class="math inline">\(P(x, y, z)\)</span>，使 P 在球内，同时 P 在 AABB 中，即： <span class="math display">\[ \begin{cases} x^2+y^2+z^2 ≤ r^2 , \\ V1.x ≤ x ≤ V2.x , \\ V1.y ≤ y ≤ V2.y , \\ V1.z ≤ z ≤ V2.z \end{cases} \]</span> 若该不等式有解，则球与 AABB 相交，否则不相交。解该不等式也简单，由于是存在而不是任意，所以只需要求 <span class="math inline">\(min(x^2+y^2+z^2)≤r^2 \Rightarrow min(x^2) + min(y^2)+ min(z^2)≤r^2\)</span>，则若 xyz 分量可以取 0，则对应分量取 0，否则取 <span class="math inline">\(x = min(|V1.x|, |V2.x|), y = min(|V1.y|, |V2.y|),z = min(|V1.z|, |V2.z|)\)</span>，若满足不等式，则相交。</p><p>该方法同样可用来求 OBB 与球相交，只需要先利用坐标系变换将 OBB 转成 AABB。</p><h2 id="反射篇">反射篇</h2><p>　　令入射向量为 <span class="math inline">\(I\)</span>，法向量为 <span class="math inline">\(N\)</span>，反射向量为 <span class="math inline">\(R\)</span>，入射向量与反射向量构成的平面与镜面交线的方向向量为 <span class="math inline">\(T\)</span>，这四个向量都为单位向量。首先以 <span class="math inline">\(I\)</span> 和 <span class="math inline">\(R\)</span> 组成一个菱形，则 <span class="math inline">\(N\)</span> 和 <span class="math inline">\(T\)</span> 则为该菱形对角线的方向向量，若已知 <span class="math inline">\(I\)</span> 和 <span class="math inline">\(R\)</span>，则 <span class="math inline">\(N = (R - I).normalize()\)</span>，<span class="math inline">\(T = (I + R).normalize()\)</span> ，<span class="math inline">\(normalize()\)</span> 指向量归一化；若已知 <span class="math inline">\(I\)</span> 和 <span class="math inline">\(N\)</span>，则 <span class="math inline">\(R = I + 2*|I \cdot N|*N\)</span>，<span class="math inline">\(2*|I \cdot N|*N\)</span> 为菱形 <span class="math inline">\(N\)</span> 方向的对角线向量。</p><p>　　镜面反射公式为 <span class="math inline">\((r&#39;,g&#39;,b&#39;) = (r,g,b) + (1-r,1-g,1-b)*t\)</span>，当 <span class="math inline">\(t\)</span> 越大则越接近白色，表现为越亮；漫反射公式为 <span class="math inline">\((r&#39;,g&#39;,b&#39;) = (r,g,b)*t\)</span>，当 <span class="math inline">\(t\)</span> 越小，则越接近黑色，表现为越暗。 其中 <span class="math inline">\(t\in[0,1]\)</span>，<span class="math inline">\(t\)</span> 为入射向量到平面法向量上的投影，即点积。</p><h2 id="后记">后记</h2><p>　　该篇不出意外的话也会是一个长期支持篇，等以后有碰到其他的一些计算几何知识再持续更新吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　由于本篇主要是谈谈基础，所以一些快速运算方法一般不在本篇探讨范围之内，一些特殊的快速手法等后续专门独立开篇再谈。&lt;/p&gt;
    
    </summary>
    
      <category term="Image&amp;Graphic" scheme="http://cniter.github.io/categories/Image-Graphic/"/>
    
    
      <category term="algorithm" scheme="http://cniter.github.io/tags/algorithm/"/>
    
      <category term="geometry" scheme="http://cniter.github.io/tags/geometry/"/>
    
  </entry>
  
  <entry>
    <title>OpenDrive解析小结</title>
    <link href="http://cniter.github.io/posts/b7d79231.html"/>
    <id>http://cniter.github.io/posts/b7d79231.html</id>
    <published>2020-08-09T10:58:09.000Z</published>
    <updated>2020-08-21T15:55:10.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　接触并使用高精地图和 OpenDRIVE 已有一年的时间，简要写写 Shaun 对 OpenDRIVE 的一些认知。</p><a id="more"></a><h2 id="基础篇">基础篇</h2><p>OpenDRIVE 目前最新的版本的 1.6，下面主要结合 1.4，1.5 和1.6 版本一起看。</p><p>　　在 OpenDRIVE 中主要有两种坐标系统，一种是常见的 X/Y/Z 空间坐标系统，另一种是 S/T/H 坐标系统。其中 X/Y/Z 坐标系统常与地理信息的各种坐标系统一起使用，S/T/H 坐标系统是针对 OpenDRIVE 中道路参考线设定的一种局部坐标系统，在 OpenDRIVE 中称前者为 “inertial co-ordinates”，后者为 “track co-ordinates”（1.6 中直接为 Reference Line System）。除此之外，还有个局部坐标系 U/V/Z，该坐标系统系统是相对于 S/T/H 坐标系统平移旋转而来的。</p><p>对于旋转，以逆时针为正，heading 是指绕 z/h 轴旋转，pitch 是指绕 y/t 轴旋转，roll 是指绕 x/s 轴旋转。</p><p>对于曲率，逆时针延申的曲线曲率为正，顺时针延申的曲线曲率为负。</p><p>在 OpenDRIVE 中对于道路和车道的描述，有以下几个重要的概念：</p><ul><li>Reference Line。用来指示一条道路的骨架，是 S/T/H 坐标系统的依据，道路中各车道线需要参考这条线。</li><li>Lanes。用来描述各车道以及各车道所属 Lane Section。</li><li>Lane Offset。其意义在 OpenDRIVE 标准看起来很清除，但实际用起来非常模糊，offset 到底是只能偏移一个车道，或半个车道或多个车道，所属哪个 Lane Section，其意义不明，故下文解析篇将直接忽略该属性。</li><li>Lane Section。可以简单理解为子道路，一个 lane section 中包含多条车道，一条道路包含多个 lane section。一个 lane section 中车道数是一个常数，所以对于存在 m 变 n 车道的一条道路，至少要划分为两个 lane section。</li><li>Superelevation、Crossfall 和 Shape。用来表示路面倾斜程度。Superelevation 是整个路面侧向太高，即路面倾斜程度，<strong>Crossfall 在 1.6 中已被废弃</strong>，原因为 1.6 完善了 Shape，可以完全取代 CrossFall，甚至能做的更好，Shape 主要用来描述路面两侧车道的倾斜程度，通过三次曲线和线性插值可以精确到车道各点倾斜程度。</li><li>Road Linkage。道路之间的连接关系，通过前继（predecessor）和后继（successor）建立道路之间连接关系，若一条路存在多个前继或后继，则其对应前继或后继应该为 Junction ，即目前的标准中暂不支持道路多前后继，1.5 中只支持车道多前后继，道路多前后继依然不支持。</li><li>Junction。交汇处，通俗意义上的路口，主要包含 incomingRoad 和 connectingRoad。</li><li>Junction Group。可以简单理解为交通环岛。</li><li>Neighbors。相邻关系，和 Road Linkage 类似，一个是前后连接关系，一个侧面相邻关系。</li><li>Surface。车道或道路表面材质，有 OpenCRG 则优先使用，没有则由应用程序自定义字符串。</li><li>……. 等等。还有一些冷门的元素暂时没用到，就不介绍了。</li></ul><p>下面就是真正的解析内容了。</p><h2 id="解析篇">解析篇</h2><p>　　一些简单的就不介绍了，就介绍解析时需要注意的一些重点元素。</p><h3 id="road-geometry">Road Geometry</h3><p>　　geometry 信息可以说是 OpenDRIVE 中最重要的信息，没有之一。OpenDRIVE 中最重要的元素为 Road，而 Road 中最重要的是 Reference Line，而 geometry 正是用来描述 Reference Line 几何线条形状的信息。</p><p>　　首先 geometry 标签中共有 5 个属性，分别为 s （该段 geometry 沿参考线起始位置），x（该段 geometry 在 inertial system 下起始横坐标），y（该段 geometry 在 inertial system 下起始纵坐标），hdg（该段 geometry 在 inertial system 下起始弧度），length（该段 geometry 长度）。其次，geometry 共有 5 种线型，分别为 straight lines（直线），spirals（螺线），arcs（圆弧线），cubic polynomials（三次曲线），parametric cubic polynomials（参数化三次曲线），这 5 种线型分别由 geometry 下 5 种标签控制。解析 geometry 的要点在于：<strong>先不用管 geometry 标签中的属性，直接解析对应线型标签，需要满足两点：1、起始点坐标一定为 (0, 0)；2、起始点斜率，即导数也一定为 0。依据这两点正确解析完线型之后，再根据 hdg 旋转线型，根据 (x, y) 将线型平移到正确位置。</strong> 下面就具体看看这 5 种线型：</p><ol type="1"><li>line，直线。没有任何属性，直接根据 geometry 中 (x, y) 和 hdg 就可得到直线方程。</li><li>spiral，螺线。有两个属性 curvStart（起始曲率），curvEnd（结束曲率）。螺线解析的代码已经由 OpenDRIVE 官方直接给出了，里面涉及到的数值计算方法就不详解了，直接看官方提供 API 的输入输出，输入有两个：s（从原点开始，螺线延展的长度），cDot（螺线的曲率关于 s 的一阶导数）；输出有 3 个：x（横坐标），y（纵坐标），t（该点的切线弧度）。解析螺线最大的问题应该就是如何得到这两个输入参数，由螺线的性质可以得到，螺线的曲率一定随着螺线的长度均匀变化的，换句话说，对于一条已知螺线，cDot 一定是常数。则 <span class="math inline">\(cDot = (curvEnd - curvStart) / length\)</span>，其中 length 为 geometry 中的长度属性，下一步需要求出 s，由于已知螺线在原点处的曲率一定为 0，则 (curv - 0) / (s - 0) = cDot，即 s = curv / cDot。由此可得到螺线的各点坐标和切向方向，但由于解析线型需要满足上面说的两点，所以需要将螺线坐标以起始点进行平移和旋转，以满足起始点为原点，起始点切线弧度为 0，最后再将完成平移和旋转后的点根据 geometry 的属性进行旋转和平移以得到真正的坐标点。</li><li>arc，圆弧线。只有一个属性 curvature（曲率），可根据曲率直接得到圆的半径，在根据曲率的正负可得到该曲线是以顺时针延申还是逆时针延申，再根据解析线型需要满足的两点和 geometry 的属性可得到真正的 inertial system 中的点。</li><li>poly3，三次曲线，<strong>在 1.6 中已被废弃</strong>。精度要求低一点可直接插值计算，要求高一点则需要利用 length ，数值计算和二分法直接求出最大的 u，然后插值。</li><li>paramPoly3，参数化三次曲线。最有名的两个参数化三次曲线就是 Bezier 曲线和 Hermite 曲线，为满足解析线型需要满足的两点，一定有 <span class="math inline">\(a_u=0, a_v=0,b_v=0\)</span>，需要注意的是一般参数化曲线的参数取值范围为 <span class="math inline">\([0,1]\)</span>，即该标签最后一个属性 pRange=“normalized”，若碰到特殊情况 pRange=“arcLength”，则需要将 <span class="math inline">\(a_u,b_u,\dots\)</span> 等属性转化为参数取值范围为 <span class="math inline">\([0,1]\)</span> 时对应的属性。</li></ol><p>最重要的元素 Geometry 的解析就是这样了，下面谈谈 Shaun 对基于三次曲线的一些元素的理解。</p><hr><p>　　比较重要的基于三次曲线的元素主要有 elevation（控制路面的高度），superelevation（道路侧面抬高弧度），crossfall（路面两侧弧度，<strong>已被废弃</strong>），shape（路面两侧形状，<em>特殊，下文详细介绍</em>），laneOffset（车道偏移量），border 和 width（<em>特殊，下文详细介绍</em>），这些元素所使用的三次曲线一般都基于道路参考线（<em>特殊除外</em>），即该三次曲线的横坐标一般为 s，纵坐标即三次曲线的值则为各元素的信息，这些三次曲线一般是分段描述的，即道路参考线上两个关键点的 s 之间必会生成对应的一段三次曲线，每一段三次曲线的横坐标取值范围都为 <span class="math inline">\([0,poly3Length]\)</span>，其中 ploy3Length 为该段三次曲线的长度。这些三次曲线段全部合起来则构成沿道路参考线的一条三次曲线，根据 s 计算三次曲线的取值得到对应的信息。</p><h3 id="laneoffset">LaneOffset</h3><p>　　laneOffset 用来指示的是所有车道沿参考线法线方向的偏移量，所有车道包括中心车道（centerLane），由于中心车道没有宽度，所以也可以叫道路中心线，这和道路参考线是两个概念，若 laneOffset 都为 0，则道路中心线和道路参考线重合。</p><h3 id="shape">Shape</h3><p>　　路面两侧车道的高度，该元素虽然也是使用三次曲线进行描述的，但是该三次曲线的横坐标为 S/T/H 坐标中的 t，不是 s，不同的 t 得到不同的高度，该元素下可能存在多段三次曲线，这些三次曲线段是独立的，只是描述其属性 s 所在位置横截面的 shape，而没有完全指定 s 的横截面的 shape，则由两临近 s 的 三次曲线计算相同的 t 对应的高度然后线型插值得到（1.6 标准中插值的公式 Shaun 觉得有问题）。</p><h3 id="border-和-width">border 和 width</h3><p>　　之所以把这个两个元素放在一起写，是因为这两个元素描述的本质上是一个东西，都是车道边界所在的位置。同时，Shaun 还是想吐槽一下，作为一个既定的标准，完全不应该把这两个元素同时放出来，只需要放出一个即可，既然为标准就应该做到完全统一，至于具体用哪个是应用程序的事，但是出来的东西必须得唯一。border 是指车道边界到道路中心线在道路参考线法线上的投影，有正负之分，一般左边车道为正，右边车道为负，而 width 是指车道的宽度，这两者完全可以相互转换。虽然描述这两者的三次曲线是基于道路参考线 s 的，但是这个 s 是相对于 laneSection 标签中 s 属性的，即其真正沿道路参考线的 s’ 应该为 s’ = s + laneSection.s。</p><hr><p>　　至于Junction 的解析好像没什么需要注意的，就不写了，至于 1.5 中的 Virtual Junction，引入新的道路前后继描述方式，也新加了一个 virtual connection，解析时到也没有需要注意的，唯一需要注意是在应用程序中该如何利用这些信息。</p><hr><p>　　对于 Signal 和 Object，Shaun 觉得标准中强制规定 s &gt; 0 同样是一件非常不合理的事情，既然能超出道路长度，只准正向超出，不能反向超出，这有点不讲道理。 Signal 和 Object 同样需要注意在应用程序中的用法，至于解析方面，需要注意的应该就是 Object 中 outline 下面的 cornerRoad 和 cornerLocal。</p><h3 id="cornerroad-和-cornerlocal">cornerRoad 和 cornerLocal</h3><p>　　这两个元素描述的本质上也是一个东西，都是面域对象多边形边界上的轮廓点，虽然 1.5 中引入了复杂多边形的概念，即有内轮廓和外轮廓，但 cornerRoad 和 cornerLocal 还是一样的解析。cornerRoad 是直接相对于道路参考线的坐标，即将 X/Y/Z 坐标直接转换为 S/T/H 坐标得到的，所以直接解析转换就可得到该点的真正坐标。而 cornerLocal 的解析则相对要麻烦些，首先根据 object 标签中 s 和 t 属性计算得到 Object 的位置，以道路参考线上 s 所在的位置建立 S/T/H 坐标系统，将该坐标系统平移到 Object 所在位置，即该 S/T/H 系统以Object 的位置为原点，将 cornerLocal 上 u,v,z 属性带入该坐标系统计算出真正的坐标。由于 Object 中的 roll,pitch,hdg 属性，所以还需要对坐标以 Object 的位置为中心进行相应旋转才能得到真正 X/Y/Z 坐标系统中坐标。</p><hr><p>好了，以上就是 Shaun 觉得在解析 OpenDRIVE 时需要注意的一些地方了。</p><h2 id="后记">后记</h2><p>　　整个地图行业本来就存在很强的壁垒，国内更是如此，而高精地图作为专为自动驾驶服务的地图，国内估计更是少有人接触过。</p><p>　　OpenDRIVE 虽作为一种高精地图标准，但离那种被广泛认可关注的标准还有很长一段距离，虽然它发展了十几年，但奈何整个行业才算是起步阶段，所以之前其一直发展的十分缓慢，之前用 OpenDRIVE 较多的应该是交通仿真领域，这个领域同样存在很强的壁垒，要在这种领域得到整个行业的认可是一件非常困难的事，因为其本来就存在一套自己的格式，而想要应用别人的标准，就势必需要逐渐抛弃自己的格式，这对企业来说需要下很大的决心。</p><p>　　就 Shaun 目前所知，行业内虽然有许多企业使用 OpenDRIVE 标准，但基本都是自己魔改后的标准，原因在于 OpenDRIVE 标准还没做到真正成为标准的地步，虽然其一些基本元素具备，但很有很多元素是完全缺失或不完善的，更重要的是，其可视化程序竟然不开源，在整个计算机领域内，还从没见过一种标准没有其开源实现的东西，没有相应的源码，只靠文字来理解难免会产生歧义，各大厂商自然就会选择实现自己的 OpenDRIVE，很难统一。历史上一些经典的论文和算法，都有其相应的开源实现，没有开源实现的论文和算法基本都淹没在了历史长河之中。所以没有开源实现，在计算机领域内很难真正推广开，就很难成为真正的标准。综上，OpenDRIVE 的发展任重而道远啊！希望现在在 ASAM 手中能发展的更快更完善些吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　接触并使用高精地图和 OpenDRIVE 已有一年的时间，简要写写 Shaun 对 OpenDRIVE 的一些认知。&lt;/p&gt;
    
    </summary>
    
      <category term="Share" scheme="http://cniter.github.io/categories/Share/"/>
    
    
      <category term="note" scheme="http://cniter.github.io/tags/note/"/>
    
      <category term="opendrive" scheme="http://cniter.github.io/tags/opendrive/"/>
    
  </entry>
  
  <entry>
    <title>一张纹理做天空盒</title>
    <link href="http://cniter.github.io/posts/39a3c99e.html"/>
    <id>http://cniter.github.io/posts/39a3c99e.html</id>
    <published>2020-08-01T14:46:32.000Z</published>
    <updated>2020-08-21T16:01:39.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　前段时间做了一件很有意思的事，使用一张普通纹理图片做成了一个天空盒（SkyBox），其实是半个，因为最终形成的天空盒是上下对称的，看起来有天空之境的感觉。</p><a id="more"></a><h2 id="天空盒篇">天空盒篇</h2><p>　　常见的天空盒一般采用立方体包围盒做 geometry，再使用 CubeMap 将 6 张纹理图贴到立方体包围盒上，但是如果只用一张纹理图片，要映射到立方体包围盒上，无论怎么展 UV，都会造成部分棱和顶点 UV 聚集或突变，从而在这样的地方造成贴图扭曲或错位的不协调现象。</p><p>　　既然立方体包围盒不可行，就只有采用另一种 geometry —— 球 了，但是直接用球作为 geometry 会造成两种问题：1、球的极点处会有扭曲现象，因为球极点处的 UV 是聚集的，同一个位置，V 都为 1 或 0，而 U 则为 [0, 1] 都有，即在该位置处一个 V 对应多个 U，自然会造成扭曲；2、由于球是一个圆周，所以 U 为 0 的位置和 U 为 1 的位置是同一个，对于一张普通纹理图，这就会造成错位，能看到非常明显的接缝线。所以需要重新展开球面的 UV，而常见的展 UV 方法主要有以下几种：</p><ol type="1"><li>对于平面，uv 坐标自然通过线性归一化解决，取左下角坐标和右上角坐标，得到平面的宽度和长度，再用当前坐标减去左下角坐标，最后除以平面宽度和长度得到 uv 坐标。</li><li>对于球面，自然是取水平方位角 <span class="math inline">\(θ, \theta \in [-\pi, \pi]\)</span> 和 垂直仰角 <span class="math inline">\(φ, φ\in [0, \pi]\)</span> 作为 uv 坐标。对于 threejs 而言，方位角在 XZ 平面上，可计算 <span class="math inline">\(\theta = Math.atan2(z, x)\)</span>，仰角 <span class="math inline">\(φ = Math.acos(-y)\)</span>，其中 <span class="math inline">\(x,y,z\)</span> 为当前坐标归一化后的值，则 <span class="math inline">\(u = (θ +\pi)/(2*\pi)\)</span>，<span class="math inline">\(v=φ/\pi\)</span>。</li><li>对于一般的曲面，可能会依据当前顶点的法线计算 uv 坐标。对法线向量 x,y,z 三个分量的值进行排序，取最小的两个作为 uv，或者将最小的两个除以最大的一个作为 uv（CubeMap 中通常用这种进行 6 个面的纹理映射，最大的那个决定映射 6 个面中的哪一面），或者取固定的两个分量作为 uv ，或者得到最小的两个分量索引取对应顶点坐标的分量值作为 uv 等等，若 uv 取值为 [-1,1]，则还需要做 <span class="math inline">\(uv = uv *0.5+0.5\)</span> 。根据法线计算 uv 一般需要根据不同的使用情况选择不同的 uv 计算策略。</li></ol><p>　　Shaun 很快的解决了第二个问题，想要将一张普通纹理图片贴在整个球面上而不留下接缝线是不现实的，而铺在半个球面上，另一半球面做对称，这个是可行的，而且看起来的效果也不错，计算 uv 就很简单了，原始的 v 不需要改变，只需要将 u 从 [0, 0.5] 映射为 [0, 1]，从 [0.5, 1] 映射为 [1, 0]，即 <span class="math display">\[ f(u)=\begin{cases} 2*u,　0 \le u \le 0.5 \\ 2*(1-u),　0.5 \le u \le 1 \end{cases} \]</span> ，接缝线问题使用对称性巧妙的解决了，但第一个问题，极点扭曲现象，还是没法解决，接下来才是真正的难点 ╯︿╰。</p><p>　　为了解决极点扭曲问题，首先需要知道极点扭曲的根本原因是同一个位置对应了多个 uv，所以要么将这些 uv 给散开，要么抛弃一部分 uv，散开 uv 的方式 Shaun 没想出来，抛弃一部分 uv 倒是有一种简单的方式，不过抛弃 uv 也意味着会损失一部分纹理，就这个天空盒而言，抛弃一部分 uv 是能接受的，不然平面到球面必然有形变。具体抛弃方法为，将球面铺平，变为一个大圆面，即忽略球面顶点坐标的 z 值，求出球的 AABB，将 AABB 铺平，即为大圆的外接正方形，用计算平面 uv 的方式重新球上各顶点的 uv 坐标，这种方式的确能解决极点扭曲的问题，但又带来了一个更为严重的问题。</p><p>　　这个问题就是，球面上半部分显示很正常，但是越靠近底部大圆的部分，纹理拉伸的越厉害，造成天空盒四周都出现很严重的纹理拉伸现象。出现纹理拉伸现象的原因也很好理解，那就是越靠近底部大圆的顶点，uv 坐标之间的间隔越小，即同样的 uv 间隔，顶点之间的距离变大了，在进行纹理插值时，自然会导致纹理拉伸现象。知道问题出现的原因了，那怎么解决了？这又是一个新问题 😔。</p><p>　　导致纹理拉伸现象的原因是线性映射，那能不能对计算好的 uv 进行非线性映射，从而抵消 OpenGL 线性纹理插值的影响，非线性映射最重要的是找到合适的非线性函数，常见非线性函数一般有幂函数（伽马变换就是一种幂函数变换，幂 &lt; 1 拉伸小值，幂 &gt; 1 拉伸大值），对数函数，指数等，对于 Shaun 这里的情况，常规的非线性函数肯定是不行的，只能自己想一个函数。</p><p>　　注意到，这是在球面上，要取一个非线性映射函数，自然需要从圆的弧长入手，先计算圆的弧长。计算弧长的本质是勾股定理 <span class="math inline">\(ds=\sqrt{(dx)^2 + (dy)^2} = \sqrt{1+(dy/dx)^2} * dx\)</span>，对于圆 <span class="math inline">\(x^2 + y^2 = r^2,　y \ge 0\)</span>，即 <span class="math inline">\(y=\sqrt{r^2-x^2}\)</span>，有 <span class="math inline">\(dy/dx = -x/ \sqrt{r^2-x^2}\)</span>，则对于圆的弧长 <span class="math inline">\(L=\int \sqrt{1+x^2/(r^2-x^2)}dx = r \int 1/ \sqrt{1-(x/r)^2}d(x/r) = r*arcsin(x/r)|\)</span>，即对于圆在第一象限的弧长可以为 <span class="math inline">\(L=r*arcsin(x/r),　0\le x \le r\)</span> 。</p><p>　　由于 v 是均匀的，所以只需要对 u 进行拉伸即可，离圆心越近的点，则越接近 0.5， 离圆心越远的点则越偏离 0.5，非线性拉伸公式为 $ u = α * (u-0.5) + 0.5$，其中 <span class="math inline">\(α = L / (\pi*r/2),　L中的x为点到圆心的距离\)</span>，使用这种拉伸后，天空盒四周的纹理拉伸现象确实不见了，但是又引入了新的问题，天空盒顶部出现了局部拉伸现象，出现微弱的纹理模糊，虽然区域不大，依靠一些手段可以让用户看不到这块区域，但是不能自欺欺人，这一块存在总让 Shaun 觉得很不舒服，于是，就有了下面的终极解决方案。</p><p>　　Shaun 最终想出解决方案是：既然单纯的拉伸不能完美解决问题，那还是只能从问题根源入手，完全重新计算 uv 坐标，这次计算 uv 坐标，还是需要借助上文的 <span class="math inline">\(α\)</span>。具体计算 uv 坐标的方式如下：</p><ol type="1"><li>先计算球面上顶点相对大圆圆心的角度，即 <span class="math inline">\(angle = Math.atan2(y - center.y, x - center.x)\)</span>，其中 center 即为大圆圆心（0, 0）。</li><li>根据顶点到圆心的距离得到 <span class="math inline">\(\alpha\)</span>，计算 <span class="math inline">\(α_x = α * cos(angle)， α_y=α * sin(angle)\)</span> 。</li><li>计算 uv：<span class="math inline">\(u = α_x * 0.5 + 0.5， v=α_y*0.5+0.5\)</span> 。</li></ol><p>　　使用这个方式计算 uv，天空盒的全部问题都解决了，天空盒没有任何拉伸扭曲等令人看起来不协调的地方，至于对称也说的过去，Shaun 个人感觉挺漂亮的 (￣▽￣)&quot;。自此天空盒的事就算是告一段落了。</p><h2 id="后记">后记</h2><p>　　做这个天空盒，确实花费了 Shaun 了不少力气，在做的那两天，满脑子都是为什么会拉伸扭曲，以及如何解决拉伸扭曲，最终想出了这套方案，简单优雅，最后的效果也是完美达到了 Shaun 的预期。不过一般人应该也用不到 Shaun 这套方案，这只是 Shaun 自己想做做而已，搞不出来没关系，搞出来当然是好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　前段时间做了一件很有意思的事，使用一张普通纹理图片做成了一个天空盒（SkyBox），其实是半个，因为最终形成的天空盒是上下对称的，看起来有天空之境的感觉。&lt;/p&gt;
    
    </summary>
    
      <category term="Image&amp;Graphic" scheme="http://cniter.github.io/categories/Image-Graphic/"/>
    
    
      <category term="algorithm" scheme="http://cniter.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Windows Terminal 尝鲜小记</title>
    <link href="http://cniter.github.io/posts/a250bb21.html"/>
    <id>http://cniter.github.io/posts/a250bb21.html</id>
    <published>2020-07-26T08:52:42.000Z</published>
    <updated>2020-07-26T10:00:39.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　Windows Terminal 正式版在两个月之前终于发布了，正好最近找了点时间尝尝鲜，感觉确实可以，Cmder 可以退休了。</p><a id="more"></a><h2 id="尝鲜篇">尝鲜篇</h2><p>　　直接在 <a href="https://aka.ms/terminal" target="_blank" rel="external">Microsoft Store</a> 安装，顺便安装好 <a href="https://docs.microsoft.com/en-us/windows/terminal/tutorials/powerline-setup" target="_blank" rel="external">Powerline</a>，执行以下三个命令：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="POWERSHELL"><figure class="highlight hljs powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Install-Module posh-git -Scope CurrentUser</div><div class="line">Install-Module oh-my-posh -Scope CurrentUser</div><div class="line">Install-Module -Name PSReadLine -Scope CurrentUser -Force -SkipPublisherCheck // 使用 powershell core 则必选</div></pre></td></tr></table></figure></div><p>然后执行 <code>notepad $PROFILE</code> ，在弹出的记事本中添加：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="POWERSHELL"><figure class="highlight hljs powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Import-Module</span> posh-git</div><div class="line"><span class="built_in">Import-Module</span> oh-my-posh</div><div class="line">Set-Theme Paradox</div></pre></td></tr></table></figure></div><p>重启 terminal，若出现 “无法加载文件 ***.ps1, 因为此系统上禁止运行脚本”，则需要执行 <code>set-executionpolicy RemoteSigned</code>，使powershell 能顺利执行该脚本。</p><p>　　由于目前 Windows Terminal 不会自动注册右键快捷菜单，所以需要手动修改注册表，执行 <code>mkdir &quot;%USERPROFILE%\AppData\Local\terminal&quot;</code> 后，在网上找一个终端图标，命名为 wt_32.ico，将该图标复制到 <code>%USERPROFILE%\AppData\Local\terminal</code> 目录中， 新建 wt.reg 文件后直接双击执行，该注册表文件的内容如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</div><div class="line">@=&quot;Windows terminal here&quot;</div><div class="line">&quot;Icon&quot;=&quot;%USERPROFILE%\\AppData\\Local\\terminal\\wt_32.ico&quot;</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</div><div class="line">@=&quot;C:\\Users\\[user_name]\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</div></pre></td></tr></table></figure></div><p>其中 [user_name] 是使用者电脑的用户名，wt_32.ico 可以是随便找的一张缩略图，也可以直接用 <a href="https://github.com/yanglr/WindowsDevTools/tree/master/awosomeTerminal/icons" target="_blank" rel="external">icons - yanglr</a> 中的 wt_32.ico。</p><p>　　为了简单美化一下 Windows Terminal 界面，需要安装 <a href="https://github.com/microsoft/cascadia-code/releases" target="_blank" rel="external">Cascadia Code GitHub releases page</a> 中 Cascadia Code PL 或 Cascadia Mono PL 字体，Shaun 因为只是尝鲜所以就简单配置了一下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&quot;theme&quot;: &quot;dark&quot;,</div><div class="line">&quot;profiles&quot;:</div><div class="line">&#123;</div><div class="line">    &quot;defaults&quot;:</div><div class="line">    &#123;</div><div class="line">        // Put settings here that you want to apply to all profiles.</div><div class="line">    &#125;,</div><div class="line">    &quot;list&quot;:</div><div class="line">    [</div><div class="line">        &#123;</div><div class="line">            // Make changes here to the powershell.exe profile.</div><div class="line">            &quot;guid&quot;: &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;,</div><div class="line">            &quot;name&quot;: &quot;Windows PowerShell&quot;,</div><div class="line">            &quot;commandline&quot;: &quot;powershell.exe&quot;,</div><div class="line">            &quot;hidden&quot;: false,</div><div class="line">            &quot;startingDirectory&quot; : &quot;.&quot;,</div><div class="line">            &quot;acrylicOpacity&quot; : 0.00000001,</div><div class="line">            &quot;colorScheme&quot; : &quot;Campbell&quot;,</div><div class="line">            &quot;cursorColor&quot; : &quot;#00CCFF&quot;,</div><div class="line">            &quot;fontFace&quot; : &quot;Cascadia Mono PL&quot;,</div><div class="line">            &quot;useAcrylic&quot; : true</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            // Make changes here to the cmd.exe profile.</div><div class="line">            &quot;guid&quot;: &quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;,</div><div class="line">            &quot;name&quot;: &quot;命令提示符&quot;,</div><div class="line">            &quot;commandline&quot;: &quot;cmd.exe&quot;,</div><div class="line">            &quot;hidden&quot;: false</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;guid&quot;: &quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;,</div><div class="line">            &quot;hidden&quot;: false,</div><div class="line">            &quot;name&quot;: &quot;Azure Cloud Shell&quot;,</div><div class="line">            &quot;source&quot;: &quot;Windows.Terminal.Azure&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;,</div></pre></td></tr></table></figure></div><p>　　为了在 VSCode 中使用 Windows Terminal ，需要简单设置一下默认终端，首先将设置默认终端 <code>&quot;terminal.integrated.shell.windows&quot;</code> 注释掉或者直接不设置，添加设置：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;terminal.external.windowsExec&quot;: &quot;C:\\Users\\[user_name]\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;,</div><div class="line">&quot;terminal.integrated.fontFamily&quot;: &quot;Cascadia Mono PL&quot;,</div></pre></td></tr></table></figure></div><p>如此可在 VSCode 中集成 Windows Terminal，并将其作为默认终端。</p><h2 id="后记">后记</h2><p>　　在这两三天的使用过程中，发现 Windows Terminal 和 Cmder 之间还是存在差距的（如在输入命令过快的时候，tab 键补全跟不上等问题），暂时就两者先并行使用一段时间吧，等后续更新巨硬修复这些问题，相信 Windows Terminal 是能代替 Cmder 成为 Windows 首选终端的。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://blog.csdn.net/qq_44831027/article/details/107068177" target="_blank" rel="external">【避坑】PowerShell：因为在此系统上禁止运行脚本 附原因和解决办法</a></p><p>[2] <a href="https://www.zhihu.com/question/325948326" target="_blank" rel="external">新发布的Windows Terminal如何添加到右键菜单？</a></p><p>[3] <a href="https://offering.solutions/blog/articles/2020/03/24/setting-windows-terminal-as-default-external-terminal-in-visual-studio-code/" target="_blank" rel="external">Setting Windows Terminal as Default External Terminal in Visual Studio Code</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　Windows Terminal 正式版在两个月之前终于发布了，正好最近找了点时间尝尝鲜，感觉确实可以，Cmder 可以退休了。&lt;/p&gt;
    
    </summary>
    
      <category term="Share" scheme="http://cniter.github.io/categories/Share/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>读大学</title>
    <link href="http://cniter.github.io/posts/ae5f9dce.html"/>
    <id>http://cniter.github.io/posts/ae5f9dce.html</id>
    <published>2020-07-09T14:09:58.000Z</published>
    <updated>2020-07-11T01:46:24.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>知识的积累如同滚雪球一般，越滚越大，越滚越快。</p><p>　　人类简史中，人类花了几万年的时间完成采集文明到农耕文明的过度，花了几千年的时间从农耕文明到工业文明，而工业文明短短几百年就过渡到现代信息化文明。而如今的时代，短短几年就会产生一些新的行业，有些能产生巨大的社会价值，而有些则会被人所遗忘，亦或过些年又卷土重来，潮起潮落，社会总是以一种加速递增的趋势在发展。</p><a id="more"></a><h2 id="志愿篇">志愿篇</h2><p>　　大学就是普通人进入社会的一块敲门砖，一块垫脚石，进入社会多年之后，这块敲门砖还有多大的重要性，这就看个人的际遇了，但总的来说，这块敲门砖越厚重，进入社会的机会和选择就越多，相对来说越容易成功。虽说取得一定的成就之后，也就可以不在使用这块敲门砖，但对于普通人来说，这块敲门砖还是挺重要的，毕竟这块敲门砖将会陪伴绝大多数的普通人一辈子。</p><p>　　对一般人来说，进入大学唯一的途径就是高考，而高考完之后需要走填志愿……录取等一系列流程才决定是否能进入大学。高考志愿最重要的一个指标即是所在省的排名，全国各个大学在每个省的指标基本是不变的，所以排名直接决定能上什么样的大学，当然，因为各种各样的原因，每年总会有一批人上不了自己该上的大学，甚至落榜，也有一批人上了自己本上不了的大学，但对于一般人，排名是绝对的指标，只看这一个就可以直接在这一档挑选自己能上的大学了，剩下的就是专业了，一个学校的王牌专业一般会远远高出录取线，所以这就需要选择，是去好一档学校的“差”专业，还是去差一档学校的“好”专业（这个差和好并不是绝对的，都是相对该校的王牌专业来说），Shaun 的看法是如果是同一个专业，当然是去好学校的差专业，不同的专业则仁者见仁智者见智，没有可比性。之所以这么选择，是根据 Shaun 这几年在社会上的摸爬滚打，好的学校还是要香一点，而专业这种东西反正都是靠自己学的，大学上课的那些东西一般都只是入门课程，有的甚至连入门都够不上。当然，专业选择这种东西还有个小技巧，就是可以选择类似的专业，当自己想上的专业是好专业，自己的分数够不上，这时可以采用这种技巧，捡漏，因为有些人对专业不是特别了解，只死盯着那个专业，但其实两者上的课程差不多，一般来说，同一个学院的专业会存在类似的情况，而一个大的专业，类似的专业就更多了，像计算机专业，无论是搞硬件的搞软件的搞自动化的都能搞计算机。</p><p>　　专业重不重要？对于 90% 以上的人来说，专业还是重要的，确实也有一小部分人也可以完全抛弃大学时的专业，照样也能混的风生水起，这样的人当然是极少的。但对于一般人来说，专业相当于 4 年的积累，为步入社会打下基础，多年后或许会完全抛弃自己的专业，但那也是在社会上有了一定的积累之后，刚开始就抛弃这份积累，从事一份完全无关的工作，对一般人来说何其艰难。</p><p>　　至于专业选择重不重要，这就看个人了，在 Shaun 眼中，专业选择同样重要，因为专业基本就确定了职业和所在的行业，而行业是有贵贱之分的，虽说三百六十行行行出状元，但有些行业的状元就是比另外行业的状元强，甚至踏上这个行业就比有些行业的状元还要强，而且就算出状元，也轮不到一般人头上。像老师和医生这样的职业，天然的就比别的职业社会地位要高，在这娱乐至死的时代，像电影游戏直播偶像行业，90% 以上的资源就掌握在 1% 的人手上，极度不平衡，成不了这 1% ，都是炮灰。</p><p>　　在特殊情况下，行业这东西又显得不是那么重要，而运气和眼光相对来说更重要些，有句话叫：站在风口上，猪都能飞起来。09 年，智能机开始兴起，12年，随着 3G 的普及，移动互联网时代开始逐步走向高潮，而三年后，4G 的到来，真正将移动互联网推向高潮，这股高潮一直持续到现在，当然，由于这块蛋糕基本被瓜分完了，现在进场也吃不到什么肉了，除非有新点子或市场。这十年间，有多少企业只靠一个 APP 就做大做强的，又有多少企业因为没搭上这趟车而逐渐走向衰落甚至倒闭的。当然，Shaun 是有点反感移动互联网的，但奈何市场喜欢，资本喜欢。移动互联网的本质在于各家的资源掌握在自己手里，绝不分享，这对于互联网的发展并不是一个好的现象，也就直接导致了如今的中文互联网像一滩狗屎。遥想 09 年之前，中文互联网是何等的辉煌，各种想要的资源应有尽有，高质量的内容产出也层出不穷，是真正的我为人人，人人为我。现如今内容资源都掌握在各家平台手上，还无法直接在浏览器上通过网页获取，必须使用各家的 APP，APP 就算是一滩屎，用户也只能跪舔，不过这各种流氓行为，说到底也都是用户自己惯的。现如今，中文互联网高质量的产出不多了，大多都存在于非常专业创立时间长且不太知名人数不多的社区和论坛中。不得不说，中文互联网变成如今这个样子，百度有很大一部分责任，贴吧可以说是一个跨时代的产品，被搞得乌烟瘴气，以前的百度空间确实也有些高质量的内容，直接关闭。</p><p>　　扯远了扯远了 (￣ε(#￣)。热门行业从来都不是一层不变的，大学的专业也是如此（Shaun 本科读的那个专业已经换了个名字），甚至大学本身也是如此，分拆合并，过去二三十年时有发生。时代在变化，行业在变化，大学也在变化，唯一不变的是变化本身，为适应变化，学习思维才是个人的立身之本。学习思维这种东西，确实无法明说，只能说是为自己量身定制的一种学习感觉（Shaun 刚入大学时，还停留在小初高的那种学习思维，认为多看书，多做题多想就能学好，这样的思维学习像高数这种基础课程，确实没问题，但像编程这样的专业课，这一套思维则完全走不通，Shaun 觉得编程更重要的是一种手感和思维方式，多抄多<strong>改</strong>，多模仿好代码，手感自然而来，不会的，网上也一般都有直接或近似的解决方案，拿过直接<strong>改改</strong>使用，在改的过程中就锻炼了编程手感和思维方式，这种方式虽然原始粗暴，但却是一种通用的编程学习方法，使用好这种方法，本科的专业课一般也比较轻松，甚至以后在工作中，就算网上没有任何解决方案，也能凭自己的感觉和思考将代码写好，至于代码的组织能力，就又需要另一种学习方法了，总之编程这门手艺，实践才是王道）。Shaun 觉得国内小初高的教育锻炼的是做题和狭小的思考能力，而大学的工科更注重的是动手和广泛的思考能力（当然基础课程还是小初高那一套），这两种学习思维是存在差异的，并且可以说差异很大。大学时期的建立的学习思维将直接影响个人的一生，拿大学的那套学习思维虽然不一定能在社会上混得开，但一定能让人把本职工作做好。</p><h2 id="大学篇">大学篇</h2><p>　　真正进入大学后，就有很多可以选择的事了，可以天天划水摸鱼，东游西逛，也可以比高三还要辛苦，这都是个人的选择，都看个人的追求，没有纯粹的对错。</p><p>　　Shaun 的四年本科一直很平庸，没干过什么大事，也没干过真正的蠢事，只是干过一些糗事（刚进大学的时候以为还要去某个教室集合，但其实只要在寝室等通知就好，军训是可以装病休息的，没人会在意，就大一上学期有过一些，后面摸清大学的套路就没了），也没伸手要过啥 🙃，虽被人有说愤青，但没真正做过网络喷子（在网络事件中，事和人需要分开讨论，事可能是好事，但人不一定是好人，同样，事是坏事，但人可能是好人，况且，网络上，事可能事假的，人可能也是假的，只要有自己的见解和判断，就不会人云亦云）。四年本科，唯一让 Shaun 觉得有价值的东西并不是学校提供的什么环境，也不是老师朋友的教导和帮助，而是这段时间逐渐形成在网络上求知的那种思维，这种思维在 Shaun 的读研和工作生涯中给予了极大的帮助。除真正的科研问题之外，工作中碰到的其他问题总能按部就班的解决，剩下的无非就是熟练度而已。</p><p>　　一般人在大学中待得最久的一个地方可能就是宿舍了，所以和室友之间的关系尽量不要搞得太僵，自身最应该做的就是不卑不亢，当然，每个学校总是会存在一部分蠢货的，运气不好，宿舍正好被分到，此时更加不能卑，只要有理就可以随便说放手做。</p><h2 id="后记">后记</h2><p>　　志愿篇是写给别人的，而大学篇是 Shaun 顺带回忆的，毕竟硕士的回忆篇早写了，大学篇也来凑个数吧，但正如『头脑特工队』中痛苦的记忆更容易被回忆起来，而平淡的记忆将逐渐灰飞烟灭，所以大学篇就只能简单写写了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;知识的积累如同滚雪球一般，越滚越大，越滚越快。&lt;/p&gt;&lt;p&gt;　　人类简史中，人类花了几万年的时间完成采集文明到农耕文明的过度，花了几千年的时间从农耕文明到工业文明，而工业文明短短几百年就过渡到现代信息化文明。而如今的时代，短短几年就会产生一些新的行业，有些能产生巨大的社会价值，而有些则会被人所遗忘，亦或过些年又卷土重来，潮起潮落，社会总是以一种加速递增的趋势在发展。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://cniter.github.io/categories/Life/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>2019，既是结束又是开始</title>
    <link href="http://cniter.github.io/posts/cf97ba7c.html"/>
    <id>http://cniter.github.io/posts/cf97ba7c.html</id>
    <published>2020-02-29T10:50:36.000Z</published>
    <updated>2020-08-21T16:04:14.028Z</updated>
    
    <content type="html"><![CDATA[<p>　　人生总算是告一段落了，虽然没取得好成绩，但总归要奔向新的起点，迎接新的挑战。</p><a id="more"></a><h2 id="前言">前言</h2><p>　　回首 2019，告别了学生身份，迎来的新的称号——社畜。普通人进入社会也只能是社畜，一批又一批的供养着食物链上层的生活，虽然有社畜能升级，但任务完成何其艰难，材料获取何其艰难。好了闲话也不多说了，开始进入正题吧。</p><h2 id="结束篇">结束篇</h2><p>　　19 年，终于迎来了学生生涯的最后阶段，依稀记得，从开学到毕业一直过的十分焦虑，虽说论文的思路早已想通，实验结果也有了，只剩对比试验还没做，但每周一次的例会着实让人头皮发麻。依旧每周一次的批斗大会，自己的想法，写的东西，说的东西，在导师面前都是屁，纯粹就是想把学生批的体无完肤，以体现自己导师的身份和那一份仅有的优越感。日子就这样一周周过去，从论文写完到查重，从答辩完到走完所有毕业流程，虽然心理上的压力不小，但总算还是顺利毕业了。不管怎么说，能够顺利毕业总比跳楼的要好太多了，如果说这小硕读的值不值，对于 Shaun 来说，还是值的，虽然承受了莫大的心理压力，但总归还算是承受住了，真鸡儿痛苦，完全不想承受第二次，估计也不会有第二次了，如果真有，Shaun 估计会选择尽快逃脱远离。</p><p>　　再回首 2019 年上半年，却发现从年初到脱离学生身份这一段时间发生的事已经渐渐模糊了，痛苦的事有时会被人选择性的忘记，最终回归平淡，或许这就是历史总会重演的原因。</p><p>　　好了，结束篇就这样结束吧，多的也不写了，该写的东西也早已写完。</p><h2 id="开始篇">开始篇</h2><p>　　刚步入社会就被上了一课，在培训时闹钟设错了，错设为工作日闹钟，而培训在周末仍在进行，而且当天开始的非常早，所以当然迟到了。事后反思这事最好自己闷在肚子里了，不要提任何理由，因为没人会同情你，甚至会嘲笑你，迟到就是迟到，过程就是个屁，结果才是王道，只能从中吸取经验，下次再有类似的事还是设一次性的临时闹钟比较好。本以为迟到这件事就会这样慢慢过去，但在新人见面会上（老板会和每一批新人见一下面），有人为了表现自己特意和老板强调了一下，也是有意思，非蠢即坏，不知是老板贵人多忘事还是情商高，这件事就这么过去了。这事算是 Shaun 真正步入社会后上的第一课，所以还是写下来了，以后估计还是会被上一些课，只是有些是大课有些是小课罢了，从课中吸取经验，或许就是成长吧。</p><p>　　初当社畜，干的当然都是一些打杂的活，还记得，正式干活的第一个任务就差点没完成，由于学生时代一直在搞图像，而第一个任务却是图形中的问题，那个问题是 “3维场景中选择物体不准确”。从来没接触过的 3维 的 Shaun 当时连相机模型都不了解，更何况是实际项目中的问题，就牵扯的更多了，于是花了几天时间熟悉项目中整个选择流程及 3维图形的一些基础知识，终于在一周后成功修复了这个 bug，刚开始还以为是相机模型的问题，重写了一下相机模型，中间确实发现了一个矩阵乘法的问题，修复了之后，这个 bug 还是存在，相机模型没有任何问题，最后选择输出全部点的坐标，发现有些点的 ndc 坐标有异常，排除这些点之后，选择终于正确了，社畜生涯中的第一个正式任务也算是圆满完成。</p><p>　　再之后就是一些大大小小的新功能添加以及 bug 修复。两个月后，来了一个项目，需要为这个项目单独开发一些功能在已有的产品上，鉴于组里其他人都有各自的任务，这个项目就落到 Shaun 头上了，还好经过两个月的熟悉，对已有产品基本熟悉了，开发相关的新功能难度也不大，唯独有一个要求导致已有的产品需要进行架构升级，不然就没法满足该需求，不知为啥，这架构升级的工作也落到了 Shaun 头上，没办法，只能硬着头皮上了，强行分离了一些文件出去，搞了一周多，虽然出现了一些 regression，但好歹也算是升级成功，满足了甲方的需求，以 Shaun 当前的眼光看，当时架构升级还是存在一些问题，有些文件不该抽离的，但碍于当时自身的能力以及对整个产品的理解程度，能升级成功也还可以了，这种经验算是比较难得的。</p><p>　　之后继续添加功能和修复 bug，就这样顺利过完了 19年，社畜的半年时间，虽然还不够真正入门，但好歹也摸到了门槛，开始接触了一些社畜的规则。</p><h2 id="总结">总结</h2><p>　　学生身份终于彻底结束，最后的学生阶段是 Shaun 整个学生生涯最难受的一段时间，说不好也可能是整个人生最难受的时光，不过总算是过去了。踏足当下，回首过去，展望未来，从这半年的社畜生活看，真的很不错，比读书爽太多了，也可能是最后的学生阶段压抑的太厉害了，总之感觉很爽，同事和上司都还可以，最重要的是没有了任人宰割的感觉，真的很舒服 😊。</p><div style="text-align:center;font-family:Allura,Consolas,Helvetica,Tahoma,Arial,Microsoft YaHei,微软雅黑,SimSun,宋体,Heiti,黑体,sans-serif;font-size:1.3em;color:#4094c3;font-weight:700;margin:.5em auto">19 年获得技能：<strong><em>社畜新手</em></strong><br>19 年获得成就：<strong><em>顺利毕业</em></strong></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　人生总算是告一段落了，虽然没取得好成绩，但总归要奔向新的起点，迎接新的挑战。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://cniter.github.io/categories/Life/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>2020年小结</title>
    <link href="http://cniter.github.io/posts/28416d7c.html"/>
    <id>http://cniter.github.io/posts/28416d7c.html</id>
    <published>2020-02-12T12:15:16.000Z</published>
    <updated>2021-04-22T14:52:43.015Z</updated>
    
    <content type="html"><![CDATA[<p>　　社畜不易，行者多难，披荆斩棘，前路莫测，步履不停。</p><a id="more"></a><h2 id="前言">前言</h2><p>　　20 年，也算是正式步入社畜生活的第一年，新鲜感自然少不了，但也没持续很长时间。这一年中基本都在学习，工作中生活中都在熟悉新事物新模式。</p><h2 id="技术篇">技术篇</h2><p>　　开始独立负责项目，从无到有写完了一个产品，做了半个地图可视化项目，图形学相关知识从完全不会到熟练使用 Shader 做简单特效，学习新语言使用新工具，这就是 Shaun 过去一年在工作中的写照。</p><p>　　在产品中，Shaun 基本独立完成了调研设计编码的全过程，这款网页版的 OpenDrive 路网编辑器，让 Shaun 基本熟悉的前端开发的主流框架和打包流程，甚至基于这款编辑器继续引申出两个 SDK，虽然开发模式和真正的前端有所区别（Shaun 是把 Typescript 当 C# 用的，将网页程序当客户端程序开发），但感觉现在的浏览器完全能撑的住，完全可以将更多的计算和存储任务直接在前端全部做完，但同时也感到了纯前端的无力，没有后端，前端网页能呈现的数据和效果确实有限，网页的内存有限制，webgl 渲染的三角形也有限制，只能做些小东西，大场景就很难施展。路网编辑器中涉及的前端技术栈也有很多，主要是现在无论开发一个什么应用，都不可能从语言最底层的 api 写起，总会用到别人写好的库，熟悉，吸收，再修改，用着用着就需要自己写了，从用轮子到造轮子，从而产生更多的轮子，也算是一种良性循环。</p><p>　　半个地图可视化项目，主要用的 mapbox-gl + geoserver 显示地图，做完这个项目，同时也基本了解了国内的百度和高德两家的地图突然变好看了的原因，其背后的技术也同样源自于 mapbox，一家真正小而美的公司，定义了一套前端渲染地图的数据标准（Vector Tile），在非 3D 地图上，这套标准就是业内通用的标准了，如今的导航地图用的都是这套前端渲染技术，美观又高效。</p><h2 id="生活篇">生活篇</h2><p>　　整个 20 年出去玩的时间也不多，工作地所在能玩的地方基本也玩的差不多了，大部分时间都是宅在屋里看电影，学技术，感觉就非常平淡，也没啥特别好说的。20年，开始学习理财，锻炼买入卖出的感觉，由于整个 20 年股市一片良好，以至于 Shaun 这个新手也赚了些钱，但由于本钱不多，赚的也非常有限，赚大钱的机会，要么拿不住，要么下不去手，最终都失之交臂，这样一来，赚的就更少了，不过，股市中赚到的钱终究只是个数字，到手的才是赚到的，没到手是赚是亏还不好说，作为新手而言，Shaun 也就当玩玩而已，亏也不多，主要是锻炼自己的感觉或承受能力，反正理财是一辈子的事，不急于这一时。</p><h2 id="总结">总结</h2><p>　　生活一年如一日的平淡如水，依旧独自前行，由于疫情的原因，出去看看都嫌太麻烦，只能周边走走，着实无聊，好在工作上的东西对 Shaun 来说是新的知识，稍微有点挑战，每解决一个问题，总会带来一些成就感，冲淡些许无聊，可这成就感越来越少了，或许哪天成就感完全消失，就是 Shaun 换个新环境的时候。</p><div style="text-align:center;font-family:Allura,Consolas,Helvetica,Tahoma,Arial,Microsoft YaHei,微软雅黑,SimSun,宋体,Heiti,黑体,sans-serif;font-size:1.3em;color:#4094c3;font-weight:700;margin:.5em auto">20 年获得技能：<strong><em>触类旁通</em></strong><br>20 年获得成就：<strong><em>独挡一面</em></strong></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　社畜不易，行者多难，披荆斩棘，前路莫测，步履不停。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://cniter.github.io/categories/Life/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>快速判断三角形与长方体相交</title>
    <link href="http://cniter.github.io/posts/ff29de94.html"/>
    <id>http://cniter.github.io/posts/ff29de94.html</id>
    <published>2020-02-02T14:06:39.000Z</published>
    <updated>2020-10-11T16:02:02.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　一种快速判断空间中三角形与 box 相交的方法，出自论文：<em>Tomas Akenine-Moller. Fast 3D triangle-box overlap testing. A. K. Peters, Ltd. 2002.</em></p><a id="more"></a><h2 id="预备篇">预备篇</h2><p>　　该论文的理论基础来自分离轴理论（separating axis theorem， AST），AST 常用于检测两凸多边形是否相交。一句话描述 AST 即为：若两多边形能用一条直线分隔开，则两多边形不相交。如何判断该直线存在即为 AST 的关键。常用的判断方法为找出两多边形所有边向量（多边形相邻两点构成的向量，顺时针或逆时针都行）的法向量，使用向量点积分别计算两多边形在各法向量上的投影（一般以多边形上的点和原点构成一个向量与法向量做点积），从而得到两个投影集合，判断两集合是否相交（找出两个集合的最大值和最小值，若最小值大于最大值，则不相交），若不相交，则 AST 中的直线存在，即两多边形不相交，若相交，则继续判断在其它法向量上的投影，若所有法向量上的投影都相交，则两凸多边形相交。AST 常用于二维下判断两凸多边形的相交情况，三维下的情况比较复杂。</p><h2 id="正文篇">正文篇</h2><p>　　该论文给定 13 个向量，若 box 的边和三角形的边在这 13 个向量中的投影均相交，则认为 box 与三角形相交。为简化运算，box 直接假定为轴向包围盒（axis-aligned bounding box， AABB），坐标轴原点为 box 中心，由于可以将普通 box 通过旋转平移等一系列变换，变成以原点为中心的 AABB， 所以该假定是有效的。设三角形的顶点为 <span class="math inline">\(v_0, v_1, v_2\)</span> ，box 的<strong>一半</strong>长宽高为 <span class="math inline">\(h_x, h_y, h_z\)</span> ，则这 13 个向量分别为 <span class="math inline">\(e_0(1, 0, 0), e_1(0, 1, 0), e_2(0, 0, 1)\)</span> ，三角形的法向量 <span class="math inline">\(n\)</span> （通过三角形两边向量叉乘得到），剩下九个向量分别为 <span class="math inline">\(a_{ij} = e_i \times f_j , i,j \in \{0, 1, 2\}\)</span> ，其中 <span class="math inline">\(f\)</span> 为三角形的边向量 <span class="math inline">\(f_0 = v_1 - v_0, f_1 = v_2 - v_1, f_2 = v_0 - v_2\)</span> ， <span class="math inline">\(\times\)</span> 代表向量叉乘。若直接这样一个个的计算投影是否相交，虽然能达到目的，但快速就无法体现了，所以作者根据向量计算方法和一些策略将其中一些需要计算投影的地方极大的简化了，所以加快的计算速度。具体简化过程为：</p><ol type="1"><li><p>首先来看最后九个向量，<span class="math inline">\(a_{00} = e_0 \times f_0 = (0, -f_{0z}, f_{0y})\)</span> ，三角形三个顶点在在该向量上的投影分别为：</p><p><span class="math inline">\(p_0 = a_{00} \cdot v_0 = (0, -f_{0z}, f_{0y}) \cdot v_0 = v_{0z}v_{1y} - v_{0y}v_{1z}\)</span></p><p><span class="math inline">\(p_1 = a_{00} \cdot v_1 = (0, -f_{0z}, f_{0y}) \cdot v_1 = v_{0z}v_{1y} - v_{0y}v_{1z} = p_0\)</span></p><p>$p_2 = a_{00} v_2 = (0, -f_{0z}, f_{0y}) v_2 = (v_{1y} - v_{0y})v_{2z} - (v_{1z} - v_{0z})v_{2y} $</p><p>由于 <span class="math inline">\(p_0 == p_1\)</span>， 所以在求最大最小值时只需要做一次比较，接着求 box 在该向量上的投影，box 中心在原点，所以投影半径 <span class="math inline">\(r\)</span> 可以以一种简单的方式求出：</p><p><span class="math inline">\(r = h_x|a_{00x}| + h_y|a_{00y}| + h_z|a_{00z}| = h_y|a_{00y}| + h_z|a_{00z}|\)</span></p><p>计算投影是否重合也很简单：</p><p><span class="math inline">\(if(min(p_0, p_2) &gt; r \ || \ max(p_0, p_2) &lt; -r) \quad return \ false\)</span> 否则两者投影相交，继续计算其它向量。</p></li><li><p>三个轴向单位向量 e 中的投影是否重合就更好判断了，完全不需要计算投影，只需要计算三角形的最小 AABB，判断两个 AABB 是否相交即可（取两个 AABB 最小的顶点和最大的顶点，从三维上判断最小是否的大于最大的即可，若任意一个维度上最小的比最大的大，则两者不相交），</p></li><li><p>至于判断最后一个向量——三角形的法向量上的投影是否重合，相当于判断三角形所在平面是否与 box 相交。判断 box 与平面相交有一种简单快速的方式，即通过公式 <span class="math inline">\(|d| &lt;= a_1 |n \cdot A^1| + a_2|n \cdot A^2| + a_3 |n \cdot A^3|\)</span> ，其中 <span class="math inline">\(d\)</span> 为 box 中心到平面的距离（中心点到平面上一点构成的向量与平面法向量做点积），<span class="math inline">\(n\)</span> 为平面法向量，<span class="math inline">\(A^1\)</span> 为 box 侧面法向量，对于 AABB 可为 <span class="math inline">\((1, 0, 0)\)</span>，<span class="math inline">\(a_1\)</span> 为 box 中心到侧面的距离，对于 AABB 可为 <span class="math inline">\(h_x\)</span>，同理 <span class="math inline">\(A^2\)</span> 为 box 顶面法向量，对于 AABB 可为 <span class="math inline">\((0, 1, 0)\)</span>，<span class="math inline">\(a_2\)</span> 为 box 中心到顶面距离，对于 AABB 可为 <span class="math inline">\(h_y\)</span>，<span class="math inline">\(A^3\)</span> 为 box 正面法向量，对于 AABB 可为 <span class="math inline">\((0, 0, 1)\)</span>，<span class="math inline">\(a_3\)</span> 为 box 中心到正面距离，对于 AABB 可为 <span class="math inline">\(h_z\)</span>，即在 AABB 中，该公式可简化为 <span class="math inline">\(|d| &lt;= h_x|n_x| + h_y|n_y| + h_z|n_z|\)</span> ，满足该公式，即可判定平面与 AABB 相交。</p></li></ol><p>　　如此 13 个向量全部判断完毕，如全都相交，则可认定三角形与长方体相交，若其中一个不相交，则三角形与长方体不相交。三维的都能判断，二维的三角形与矩形相交判断就更简单了，分成两类法向量后，利用向量运算先简化运算量，再计算投影是否相交即可。</p><h2 id="附录">附录</h2><p>　　还有一种根据距离判断两个 AABB 是否相交的办法，即先取两个 AABB 的中心 <span class="math inline">\((x_1, y_1, z_1)\)</span> 和 <span class="math inline">\((x_2, y_2, z_2)\)</span>，然后计算两个中心点之间的三个维度的距离，将 x 维度的距离与两个AABB 的 <span class="math inline">\(h_x\)</span> 之和比较，若中心点 x 维度的距离较大，则不相交。即：<span class="math inline">\(if (|x_1 - x_2| &gt; h_{x1} + h_{x2}) \quad return \ false\)</span> ，否则比较 y 维度， z 维度，若所有都小，则两 AABB 相交。这种方式是 Shaun 在一次面试中被问到没答出后在网上找到的答案，其实感觉和比较最小最大顶点也差不多，都是从不相交出发，因为直接判断相交基本不可能，而不相交很容易判断，把所有的不相交情况判断完，那就只剩相交了，可惜面试官只想要这种方案 ╮(╯▽╰)╭。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="http://fileadmin.cs.lth.se/cs/Personal/Tomas_Akenine-Moller/code/" target="_blank" rel="external">Code by Tomas Akenine-Möller</a></p><p>[2] <a href="https://www.gamasutra.com/view/feature/131790/simple_intersection_tests_for_games.php?print=1" target="_blank" rel="external">Simple Intersection Tests For Games</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　一种快速判断空间中三角形与 box 相交的方法，出自论文：&lt;em&gt;Tomas Akenine-Moller. Fast 3D triangle-box overlap testing. A. K. Peters, Ltd. 2002.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Image&amp;Graphic" scheme="http://cniter.github.io/categories/Image-Graphic/"/>
    
    
      <category term="algorithm" scheme="http://cniter.github.io/tags/algorithm/"/>
    
      <category term="geometry" scheme="http://cniter.github.io/tags/geometry/"/>
    
  </entry>
  
  <entry>
    <title>网页菜单纯 css 实现</title>
    <link href="http://cniter.github.io/posts/70a807da.html"/>
    <id>http://cniter.github.io/posts/70a807da.html</id>
    <published>2019-10-28T02:18:36.000Z</published>
    <updated>2019-11-28T11:44:43.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　最近搞了些前端的工作，本来做菜单栏的时候想直接用 bootstrap 的，但是感觉 bootstrap 太大了，而且依赖有点多，在 webpack 中也不是很好打包（虽然可以绕过去），所以就索性自己在网上找了一些实现方式，改改感觉也还可以。这次主要实现了两种菜单栏，具体如下。</p><a id="more"></a><h2 id="鼠标悬停下拉菜单">鼠标悬停下拉菜单</h2><p>　　鼠标悬停下拉菜单应该是最常见的一种菜单栏了，当鼠标悬停在菜单栏上时，子菜单缓缓下拉，看起来就很舒服，用 flex 布局结合列表也很好实现（不用像以前那种 <code>float</code> 了，舒服）。具体实现方式如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="HTML"><figure class="highlight hljs html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.flex-body</span> &#123;</span></div><div class="line"><span class="undefined">        display: flex;</span></div><div class="line"><span class="undefined">        flex-direction: column;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    header &#123;</span></div><div class="line"><span class="undefined">        z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    ul li &#123;</span></div><div class="line"><span class="undefined">        list-style: none;</span></div><div class="line"><span class="undefined">        margin: 0;</span></div><div class="line"><span class="undefined">        padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu</span> &#123;</span></div><div class="line"><span class="undefined">        display: flex;</span></div><div class="line"><span class="undefined">        justify-content: start;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul li &#123;</span></div><div class="line"><span class="undefined">        width: 100px;</span></div><div class="line"><span class="undefined">        height: 50px;</span></div><div class="line"><span class="undefined">        line-height: 50px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-class">.submenu</span> &#123;</span></div><div class="line"><span class="css">        <span class="comment">/* display: none; */</span></span></div><div class="line"><span class="undefined">        background-color: aqua;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.submenu</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">        height: 0;</span></div><div class="line"><span class="undefined">        line-height: 0;</span></div><div class="line"><span class="undefined">        opacity: 0;</span></div><div class="line"><span class="undefined">        visibility: hidden;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.submenu</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="css">        <span class="comment">/* display: block; */</span></span></div><div class="line"><span class="undefined">        height: 50px;</span></div><div class="line"><span class="undefined">        line-height: 50px;</span></div><div class="line"><span class="undefined">        opacity: 1;</span></div><div class="line"><span class="undefined">        visibility: visible;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-body"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span>&gt;</span>menu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"submenu"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span>&gt;</span>menu2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"submenu"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span>&gt;</span>menu3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"submenu"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span>mainmainmainmainmainmainmainmainmainmain<span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></div><p>　　<strong><em>※注：</em></strong> 实现该菜单栏有两个需要注意的点：1、不能用 <code>display: none</code> 和 <code>block</code> 来使子菜单消失或出现，因为这样会造成缓缓下拉的动画失效，<code>transition</code> 并不支持 <code>display</code>，所以只能用 <code>visibility</code> 和 <code>height</code> 来共同实现，以达到下拉动画效果；2、因为使用了 <code>flex</code> 布局，所以 <code>z-index</code> 只对同级 <code>flex-item</code> 有效，所以为防止菜单栏下面的内容出现在子菜单之上，即将子菜单栏位于最上层，需要将整个页面的布局都设置为 <code>flex</code>，并使 <code>header</code> 的 <code>z-index</code> 最大，如此才能保证子菜单的菜单覆盖 <code>main</code> 中的内容，不然就会有重叠干扰现象。</p><h2 id="鼠标点击手风琴菜单">鼠标点击手风琴菜单</h2><p>　　手风琴特效也算是非常常见的了，一般的手风琴是鼠标悬停展开，这种比较好实现，难的是如何保持这种展开状态，<code>focus</code> 可以短暂保持展开状态，但是不能点击其他地方，局限性太大。所以需要引入其它的东西来记录这种展开状态，可以用 <code>checkbox</code> 或 <code>radio</code> 的 <code>checked</code> 来记录这种状态，从而只用 css 即可实现该菜单，具体实现如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="HTML"><figure class="highlight hljs html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[data-prop="menu-recorder"]</span> &#123;</span></div><div class="line"><span class="undefined">        display: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-title</span> &#123;</span></div><div class="line"><span class="undefined">        display: block;</span></div><div class="line"><span class="undefined">        width: 500px;</span></div><div class="line"><span class="undefined">        height: 50px;</span></div><div class="line"><span class="undefined">        line-height: 50px;</span></div><div class="line"><span class="undefined">        border: 1px solid black;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-content</span> &#123;</span></div><div class="line"><span class="undefined">        width: 500px;</span></div><div class="line"><span class="undefined">        max-height: 100px;</span></div><div class="line"><span class="undefined">        overflow-y: auto;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-content</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">        height: 0;</span></div><div class="line"><span class="undefined">        line-height: 20px;</span></div><div class="line"><span class="undefined">        overflow: auto;</span></div><div class="line"><span class="undefined">        opacity: 0;</span></div><div class="line"><span class="undefined">        visibility: hidden;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[data-prop="menu-recorder"]</span><span class="selector-pseudo">:checked+.menu-content</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">        height: 20px;</span></div><div class="line"><span class="undefined">        line-height: 20px;</span></div><div class="line"><span class="undefined">        opacity: 1;</span></div><div class="line"><span class="undefined">        visibility: visible;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"accordion-menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu1"</span>&gt;</span>menu1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu1"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu2"</span>&gt;</span>menu2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu2"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu3"</span>&gt;</span>menu3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu3"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu4"</span>&gt;</span>menu4<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu4"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></div><p>　　这里需要注意一点的就是 height 从 0 到 100% 并不会触发 transition 渐变动画，而是需要确切的高度值变化才能触发，所以上文这里添加了个 <code>&lt;li&gt;</code> 标签，直接在该标签上添加动画，还有一种就是在 <code>.menu-content</code> 上设定确定的 <code>max-height</code>，也能触发动画，但是有个缺点就是前后 <code>max-height</code> 的差距太大时，动画效果就很不理想了，这时可能只能依靠 js 了。上文中 <code>checkbox</code> 也可用 <code>radio</code> 替换，效果略有差异，一个是能全部展开或收起，而另一个则是能且仅能展开一个。</p><h2 id="tab-标签页切换菜单">Tab 标签页切换菜单</h2><p>　　这个菜单和上面那个菜单的实现非常相似，先上代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="HTML"><figure class="highlight hljs html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.tab-menu</span> &#123;</span></div><div class="line"><span class="undefined">        display: flex;</span></div><div class="line"><span class="undefined">        position: relative;</span></div><div class="line"><span class="undefined">        width: 500px;</span></div><div class="line"><span class="undefined">        height: 300px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[data-prop="menu-recorder"]</span> &#123;</span></div><div class="line"><span class="undefined">        display: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-title</span> &#123;</span></div><div class="line"><span class="undefined">        display: block;</span></div><div class="line"><span class="undefined">        width: 100px;</span></div><div class="line"><span class="undefined">        line-height: 50px;</span></div><div class="line"><span class="undefined">        text-align: center;</span></div><div class="line"><span class="undefined">        border: 1px solid black;</span></div><div class="line"><span class="undefined">        border-right: 0;</span></div><div class="line"><span class="undefined">        box-sizing: border-box;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.tab-menu</span> <span class="selector-class">.menu-item</span><span class="selector-pseudo">:last-child</span> <span class="selector-class">.menu-title</span> &#123;</span></div><div class="line"><span class="undefined">        border-right: 1px solid black;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-content</span> &#123;</span></div><div class="line"><span class="undefined">        position: absolute;</span></div><div class="line"><span class="undefined">        left: 0;</span></div><div class="line"><span class="undefined">        top: 51px;</span></div><div class="line"><span class="undefined">        height: calc(100% - 50px);</span></div><div class="line"><span class="undefined">        overflow-y: auto;</span></div><div class="line"><span class="undefined">        width: 100%;</span></div><div class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="undefined">        box-sizing: border-box;</span></div><div class="line"><span class="undefined">        font-size: 24px;</span></div><div class="line"><span class="undefined">        text-align: center;</span></div><div class="line"><span class="undefined">        opacity: 0;</span></div><div class="line"><span class="undefined">        visibility: hidden;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[data-prop="menu-recorder"]</span><span class="selector-pseudo">:checked+.menu-content</span> &#123;</span></div><div class="line"><span class="undefined">        opacity: 1;</span></div><div class="line"><span class="undefined">        visibility: visible;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu1"</span>&gt;</span>menu1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu1"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"tab-control"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu2"</span>&gt;</span>menu2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu2"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"tab-control"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu3"</span>&gt;</span>menu3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu3"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"tab-control"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu4"</span>&gt;</span>menu4<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu4"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"tab-control"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></div><p>　　从代码上看关键点就是 <code>.menu-content</code> 的定位方式了，采用了绝对定位，并将整个菜单栏设置为相对定位，以保证所有 tab 标签页内容位置和大小保持一致。当然 tab 标签页肯定是唯一的，所以只能用 <code>radio</code> 记录显示标签页了。其中为了保证 <code>.menu-title</code> 和 <code>.menu-content</code> 的边框不重叠，所以在 <code>.menu-title</code> 中只设置 <code>line-height</code>，而 <code>.menu-content</code> 的 <code>top</code> 比其多一个像素。</p><h2 id="后记">后记</h2><p>　　这三种菜单应该是最常见也是用的最多的了，纯 css 实现的方式也比较类似，无非就是 flex 布局以及借助 css3 强大的选择器功能（父类选择器不知要到猴年马月了，比较遗憾 😥），就能相对简单的实现了，当然借助一些 js 库或框架可能会更简单一些 ，但能用 css 为何不用呢 😄。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://blog.csdn.net/colorfulqq/article/details/79886331" target="_blank" rel="external">利用flex实现的二级导航栏</a></p><p>[2] <a href="https://blog.csdn.net/touchingt/article/details/48630291" target="_blank" rel="external">CSS3动画下拉菜单（当transition遇到display的坑）</a></p><p>[3] <a href="https://www.jqhtml.com/962.html" target="_blank" rel="external">CSS3手风琴下拉菜单</a></p><p>[4] <a href="https://www.jianshu.com/p/cc0ac7845ded" target="_blank" rel="external">教你两招用纯CSS写Tab切换</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　最近搞了些前端的工作，本来做菜单栏的时候想直接用 bootstrap 的，但是感觉 bootstrap 太大了，而且依赖有点多，在 webpack 中也不是很好打包（虽然可以绕过去），所以就索性自己在网上找了一些实现方式，改改感觉也还可以。这次主要实现了两种菜单栏，具体如下。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="css" scheme="http://cniter.github.io/tags/css/"/>
    
  </entry>
  
</feed>
