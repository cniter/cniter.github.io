<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaun Yuan&#39;blog</title>
  <subtitle>世界上有两种程序员：一种是创造者，一种是使用者！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cniter.github.io/"/>
  <updated>2017-08-31T01:47:00.024Z</updated>
  <id>http://cniter.github.io/</id>
  
  <author>
    <name>Shaun Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用OpenCV显示OpenGL图形</title>
    <link href="http://cniter.github.io/2017/08/31/%E7%94%A8OpenCV%E6%98%BE%E7%A4%BAOpenGL%E5%9B%BE%E5%BD%A2/"/>
    <id>http://cniter.github.io/2017/08/31/用OpenCV显示OpenGL图形/</id>
    <published>2017-08-31T01:40:31.000Z</published>
    <updated>2017-08-31T01:47:00.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本文就是一个小实验，试验OpenCV到底能不能支持OpenGL图形显示。</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>　　如果在OpenCV用CMake编译时勾选<strong>WITH_OPENGL</strong>且编译一切顺利的话，编译和配置的具体步骤和情况可以看本人写的一篇文档：<a href="https://cniter.github.io/2017/08/28/Win10%EF%BC%8BVS2013%EF%BC%8BCMake-gui%E7%BC%96%E8%AF%91%E5%92%8C%E9%85%8D%E7%BD%AEOpenCV-3-2-0/">Win10＋VS2013＋CMake-gui编译和配置OpenCV-3.2.0</a> ，那么就可以用OpenCV窗口显示OpenGL图形。</p>
<p>　　在VS下使用Windows原有的OpenGL函数需要包含以下头文件和库文件：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/gl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glu.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"OpenGL32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"glu32.lib"</span>)</span></div></pre></td></tr></table></figure>
<p>　　在OpenCV中显示OpenGL图形需要<code>cv::namedWindow(openGLWindowName, cv::WINDOW_OPENGL)</code>，在namedWindow函数中添加cv::WINDOW_OPENGL参数说明该窗口支持OpenGL图形。</p>
<p>附示例程序：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/gl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glu.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"OpenGL32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"glu32.lib"</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> vertex_list[][<span class="number">3</span>] =</div><div class="line">&#123;</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 将要使用的顶点的序号保存到一个数组里面 </span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> GLint index_list[][<span class="number">2</span>] =</div><div class="line">&#123;</div><div class="line">	&#123; <span class="number">0</span>, <span class="number">1</span> &#125;,</div><div class="line">	&#123; <span class="number">2</span>, <span class="number">3</span> &#125;,</div><div class="line">	&#123; <span class="number">4</span>, <span class="number">5</span> &#125;,</div><div class="line">	&#123; <span class="number">6</span>, <span class="number">7</span> &#125;,</div><div class="line">	&#123; <span class="number">0</span>, <span class="number">2</span> &#125;,</div><div class="line">	&#123; <span class="number">1</span>, <span class="number">3</span> &#125;,</div><div class="line">	&#123; <span class="number">4</span>, <span class="number">6</span> &#125;,</div><div class="line">	&#123; <span class="number">5</span>, <span class="number">7</span> &#125;,</div><div class="line">	&#123; <span class="number">0</span>, <span class="number">4</span> &#125;,</div><div class="line">	&#123; <span class="number">1</span>, <span class="number">5</span> &#125;,</div><div class="line">	&#123; <span class="number">7</span>, <span class="number">3</span> &#125;,</div><div class="line">	&#123; <span class="number">2</span>, <span class="number">6</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">float</span> rotate = <span class="number">0</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line"></div><div class="line">GLint windowWidth = <span class="number">800</span>;</div><div class="line">GLint windowHeight = <span class="number">800</span>;</div><div class="line"></div><div class="line">GLfloat xRotAngle = <span class="number">-75.0f</span>;</div><div class="line">GLfloat yRotAngle = <span class="number">0.0f</span>;</div><div class="line">GLfloat zRotAngle = <span class="number">-135.0f</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> MIN_X = <span class="number">-200</span>;</div><div class="line"><span class="keyword">float</span> MAX_X = <span class="number">200</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> MIN_Y = <span class="number">-200</span>;</div><div class="line"><span class="keyword">float</span> MAX_Y = <span class="number">200</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> MIN_Z = <span class="number">-200</span>;</div><div class="line"><span class="keyword">float</span> MAX_Z = <span class="number">200</span>;</div><div class="line"></div><div class="line">GLfloat coordinatesize = <span class="number">200.0f</span>;</div><div class="line">GLfloat ratio = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> z1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2, <span class="keyword">float</span> z2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	glBegin(GL_LINES);</div><div class="line">	glVertex3f(x1, y1, z1);</div><div class="line">	glVertex3f(x2, y2, z2);</div><div class="line">	glEnd();</div><div class="line">	glFlush();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 绘制立方体</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCube</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> i, j;</div><div class="line">	glBegin(GL_LINES);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) <span class="comment">// 12 条线段</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) <span class="comment">// 每条线段 2个顶点</span></div><div class="line">		&#123;</div><div class="line">			glVertex3fv(vertex_list[index_list[i][j]]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	glEnd();</div><div class="line">	glFlush();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshapeOperate</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	glMatrixMode(GL_PROJECTION);</div><div class="line">	glLoadIdentity();</div><div class="line">	<span class="keyword">if</span> (ratio &lt; <span class="number">1</span>)</div><div class="line">		glOrtho(-coordinatesize, coordinatesize, -coordinatesize / ratio, coordinatesize / ratio, -coordinatesize, coordinatesize);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		glOrtho(-coordinatesize*ratio, coordinatesize*ratio, -coordinatesize, coordinatesize, -coordinatesize, coordinatesize);</div><div class="line"></div><div class="line">	glMatrixMode(GL_MODELVIEW);</div><div class="line">	glLoadIdentity();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshape</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> ((w == <span class="number">0</span>) || (h == <span class="number">0</span>))</div><div class="line">		<span class="keyword">return</span>;</div><div class="line"></div><div class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line"></div><div class="line">	ratio = (GLfloat)w / (GLfloat)h;</div><div class="line"></div><div class="line">	reshapeOperate();</div><div class="line">&#125;</div><div class="line"></div><div class="line">GLfloat AngleX = <span class="number">45.0f</span>;</div><div class="line">GLfloat AngleY = <span class="number">315.0f</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshape1</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	GLfloat aspect = (GLfloat)w / (GLfloat)h;</div><div class="line">	GLfloat nRange = <span class="number">100.0f</span>;</div><div class="line"></div><div class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line"></div><div class="line">	glMatrixMode(GL_PROJECTION); <span class="comment">//将当前矩阵指定为投影模式  </span></div><div class="line">	glLoadIdentity();</div><div class="line"></div><div class="line">	<span class="comment">//设置三维投影区  </span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (w &lt;= h)</div><div class="line">	&#123;</div><div class="line">		glOrtho(-nRange, nRange, -nRange * aspect, nRange * aspect, -nRange, nRange);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		glOrtho(-nRange, nRange, -nRange / aspect, nRange / aspect, -nRange, nRange);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(<span class="keyword">void</span>*)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// Draw something using OpenGL here  </span></div><div class="line">	<span class="comment">//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	 //清除所有的像素</span></div><div class="line"></div><div class="line">	<span class="comment">//glMatrixMode(GL_MODELVIEW);</span></div><div class="line">	<span class="comment">//glLoadIdentity();</span></div><div class="line">	<span class="comment">//glPushMatrix();</span></div><div class="line"></div><div class="line">	<span class="comment">////glTranslatef(-0.2, 0, 0); // 平移</span></div><div class="line">	<span class="comment">////glScalef(2, 1, 1);    // 缩放</span></div><div class="line"></div><div class="line">	<span class="comment">//glRotatef(xRotAngle, 1.0f, 0.0f, 0.0f);</span></div><div class="line">	<span class="comment">//glRotatef(yRotAngle, 0.0f, 1.0f, 0.0f);</span></div><div class="line">	<span class="comment">//glRotatef(zRotAngle, 0.0f, 0.0f, 1.0f);</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(1, 0, 0);</span></div><div class="line">	<span class="comment">//drawLine(0, 0, 0, MAX_X, 0, 0); //x轴</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(0, 1, 0);</span></div><div class="line">	<span class="comment">//drawLine(0, 0, 0, 0, MAX_Y, 0); //y轴</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(0, 0, 1);</span></div><div class="line">	<span class="comment">//drawLine(0, 0, 0, 0, 0, MAX_Z); //z轴</span></div><div class="line"></div><div class="line">	<span class="comment">//times++;</span></div><div class="line">	<span class="comment">//if (times &gt; 1)</span></div><div class="line">	<span class="comment">//&#123;</span></div><div class="line">	<span class="comment">//	times = 0;</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line"></div><div class="line">	<span class="comment">//if (times % 1 == 0)</span></div><div class="line">	<span class="comment">//&#123;</span></div><div class="line">	<span class="comment">//	rotate += 0.3;</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line"></div><div class="line">	<span class="comment">//glRotatef(rotate, 0, 1, 0);</span></div><div class="line">	<span class="comment">//glRotatef(rotate, 1, 0, 0);</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(0, 1, 1);</span></div><div class="line"></div><div class="line">	<span class="comment">//DrawCube();</span></div><div class="line"></div><div class="line">	<span class="comment">//glPopMatrix();</span></div><div class="line"></div><div class="line">	reshape1(windowWidth, windowHeight);</div><div class="line">	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</div><div class="line">	glMatrixMode(GL_MODELVIEW);</div><div class="line">	glLoadIdentity();</div><div class="line">	AngleX++;</div><div class="line">	AngleY++;</div><div class="line">	glPushMatrix();</div><div class="line">	&#123;</div><div class="line">		glRotatef(AngleX, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</div><div class="line">		glRotatef(AngleY, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//前表面  </span></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为黄色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//后表面  </span></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为青色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为绿色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为黑色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为蓝色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//上表面  </span></div><div class="line">		glColor3d(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为青色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3d(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3d(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为品红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3d(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为蓝色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//下表面  </span></div><div class="line">		glColor3ub(<span class="number">0u</span>, <span class="number">255u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为绿色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub(<span class="number">255u</span>, <span class="number">255u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为黄色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub(<span class="number">255u</span>, <span class="number">0u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub(<span class="number">0u</span>, <span class="number">0u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为黑色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//左表面  </span></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为青色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为绿色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为黄色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//右表面  </span></div><div class="line">		glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为品红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为蓝色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为黑色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line">		glEnd();</div><div class="line">	&#125;</div><div class="line">	glPopMatrix();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">opencvWithOpenGLTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> openGLWindowName = <span class="string">"OpenGL Test"</span>;</div><div class="line">	cv::namedWindow(openGLWindowName, cv::WINDOW_OPENGL);</div><div class="line">	cv::resizeWindow(openGLWindowName, windowWidth, windowHeight);</div><div class="line">	cv::setOpenGlContext(openGLWindowName);</div><div class="line">	cv::setOpenGlDrawCallback(openGLWindowName, onDraw, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (cv::waitKey(<span class="number">30</span>) != <span class="number">27</span>)</div><div class="line">	&#123;</div><div class="line">		cv::updateWindow(openGLWindowName);	<span class="comment">// when needed  </span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	opencvWithOpenGLTest();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行成功后可看到一个旋转的彩色立方体。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>　　从实验结果来看，OpenCV确实能支持OpenGL图形的显示，但其不足之处也很明显：没有提供鼠标和键盘的交互操作（可能是本人还没发现，毕竟只是尝试一下看它能不能显示），仅仅只是提供一个显示窗口。如果真想用OpenGL做一些好玩的东西，还是用glut和glew吧，不过glut已经停止更新许久，glew在调试时可能会出现一些莫名其妙的错误，所以网上有人用freeglut代替glut，glee代替glew，具体的东西本人也没试过，本人目前还没做过OpenGL相关的事，这次用OpenCV显示OpenGL图形纯粹是为了好玩(*&#94;__&#94; *) 嘻嘻……。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本篇文档也是上次编译配置完OpenCV-3.2后做的一次小实验，但当时并没有记录，所以还有一些参考资料也已经不知道了:-(。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/yang_xian521/article/details/8531058" target="_blank" rel="external">OpenCV学习笔记（六十一）——建立支持OpenGL的OpenCV工程“Master OpenCV”chp.3</a>（<a href="http://blog.csdn.net/yang_xian521/article/category/910716" target="_blank" rel="external">http://blog.csdn.net/yang_xian521/article/category/910716</a> ）     </p>
<p>[2] <a href="http://blog.csdn.net/bcbobo21cn/article/details/51058836" target="_blank" rel="external">几个opengl立方体绘制案例</a>（<a href="http://blog.csdn.net/bcbobo21cn/article/category/3104565" target="_blank" rel="external">http://blog.csdn.net/bcbobo21cn/article/category/3104565</a> ）              </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本文就是一个小实验，试验OpenCV到底能不能支持OpenGL图形显示。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
      <category term="opengl" scheme="http://cniter.github.io/tags/opengl/"/>
    
  </entry>
  
  <entry>
    <title>Win10＋VS2013＋CMake-gui编译和配置OpenCV-3.2.0</title>
    <link href="http://cniter.github.io/2017/08/28/Win10%EF%BC%8BVS2013%EF%BC%8BCMake-gui%E7%BC%96%E8%AF%91%E5%92%8C%E9%85%8D%E7%BD%AEOpenCV-3-2-0/"/>
    <id>http://cniter.github.io/2017/08/28/Win10＋VS2013＋CMake-gui编译和配置OpenCV-3-2-0/</id>
    <published>2017-08-28T07:38:39.000Z</published>
    <updated>2017-08-30T09:28:56.696Z</updated>
    
    <content type="html"><![CDATA[<p>本人系统环境：Win10_x64 英文企业版；VS2013-update5 英文旗舰版；CMake-3.6.3-win64-x64 免安装版；Qt-opensource-windows-x86-msvc2013-5.6.2。</p>
<p>　　*注：本人写的这篇文档主要用来编译x86版的动态debug库，想编译其它类型的库请自行参考其它资料，做相关改变。（其实如果想编译x64版的可以在用VS2013编译时将上方的Win32平台选择x64平台；想编译release版的可以在用VS2013编译时将上方的Debug模式选择Release模式；想编译静态库的可以在用CMake生成时取消勾选<strong>BUILD_SHARED_LIBS</strong>选项即可。:-P）</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　因为OpenCV-3.2官方的release版只有支持VS2015的库，而且不包括扩展包（opencv_contrib）中的库，而由于某些历史原因，本人目前使用的编译器还是VS2013，又想用用扩展包中一些有趣的算法，在加上上个月opencv-3.3还没有正式release，所以上个月本人就利用VS2013对opencv-3.2进行编译。具体编译过程如下：</p>
<a id="more"></a>
<h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>　　先在GitHub上下载对应的opencv源码包：<a href="https://github.com/opencv/opencv/archive/3.2.0.zip" target="_blank" rel="external">opencv-3.2.0</a>和<a href="https://github.com/opencv/opencv_contrib/archive/3.2.0.zip" target="_blank" rel="external">opencv_contrib-3.2.0</a>（<a href="https://github.com/opencv" target="_blank" rel="external">https://github.com/opencv</a> ），扩展包版本一定要和opencv版本相同。本人为了添加Qt后端显示支持（为了好看和方便:-P），所以还下载安装了支持VS2013的<a href="http://download.qt.io/archive/qt/5.6/5.6.2/qt-opensource-windows-x86-msvc2013-5.6.2.exe" target="_blank" rel="external">Qt-5.6.2</a>（<a href="http://download.qt.io/archive/qt/" target="_blank" rel="external">http://download.qt.io/archive/qt/</a> ）。再<a href="https://cmake.org/files/v3.6/cmake-3.6.3-win64-x64.zip" target="_blank" rel="external">下载CMake-3.6.3-win64-x64 免安装版</a>（<a href="https://cmake.org/files/" target="_blank" rel="external">https://cmake.org/files/</a> ）。至于微软的东西，推荐直接去<a href="https://msdn.itellyou.cn/" target="_blank" rel="external">MSDN 我告诉你</a>去下载。</p>
<p>　　由于网上有的资料（具体是哪篇文章本人忘记了o(╯□╰)o）说编译时的文件结构可能会影响编译是否成功，再加上为了方便编译管理，本人的编译时的文件结构为：</p>
<blockquote>
<p>opencv-3.2.0_build<br>├──  build<br>└──  sources<br>​     　　├── opencv-3.2.0<br>​     　　└── opencv_contrib-3.2.0</p>
<p>4 directories, 0 files</p>
</blockquote>
<p>其中opencv-3.2.0用来装opencv-3.2.0.zip解压后的源码；opencv_contrib-3.2.0用来装opencv_contrib-3.2.0.zip解压后的源码；build用来装CMake编译完成后的文件。</p>
<h2 id="编译篇"><a href="#编译篇" class="headerlink" title="编译篇"></a>编译篇</h2><p>　　打开/cmake-3.6.3-win64-x64/bin/cmake-gui.exe，在<strong>Where is the source code</strong>文本框中选择/opencv-3.2.0_build/sources/opencv-3.2.0；在<strong>Where to build the binaris</strong>文本框中选择/opencv-3.2.0_build/build，点击<strong>Configure</strong>，在弹出的编译器选择框中选择<strong>Visual Studio 12 2013</strong>，一直<strong>Configure</strong>直到红色的条变白。</p>
<p>　　网上有人在这一步可能会出现<code>ffmpeg not downloaded</code>和<code>“ippicv_windows_20151201.zip”not downloaded</code>这两个问题，本人没出现这两个问题，所以没有机会验证<a href="http://livezingy.com/compile-opencv-and-opencv_contrib/" target="_blank" rel="external">cmake-gui和vs2013编译opencv和opencv_contrib源码</a>中的解决办法是否正确。</p>
<p>　　接下来就是添加扩展包，在白色条中找到<strong>OPENCV_EXTRA_MODULES_PATH</strong>文本框，在其中选择opencv_contrib源码中modeles所在路径：/opencv-3.2.0_build/sources/opencv_contrib-3.2.0/modules。</p>
<p>　　至于想要支持OpenGL和Qt就需要勾选<strong>WITH_OPENGL</strong>和<strong>WITH_QT</strong>并<strong>Configure</strong>后选择好Qt的安装目录，如果配置好Qt的环境变量Cmake将会自动选择好Qt所在路径。</p>
<p>　　随后再次反复<strong>Configure</strong>直到界面不再出现红色背景，之后单击<strong>Generate</strong>。不出意外的话，你会看到<strong>Configure done</strong>和<strong>Generate done</strong>。</p>
<p>　　本人在这一步出现了<a href="http://livezingy.com/build_shared_libs/" target="_blank" rel="external">VS2013_CMake_opencv3.1动态库与静态库的配置与编译</a>中的问题，原因是同时勾选了同时勾选了<strong>BUILD_opencv_world</strong>和<strong>BUILD_opencv_contirb_world</strong>，本人的解决办法是将它们全部取消勾选，再次<strong>Configure</strong>和<strong>Generate</strong>。</p>
<p>　　如果上面一切顺利的话就可以进行下一步了：使用VS2013编译OpenCV。打开/opencv-3.2.0_build/build目录，将会看到一大堆文件和文件夹，双击/opencv-3.2.0_build/build目录下的<strong>OpenCV.sln</strong>，用VS2013打开。找到<strong>CMakeTargets</strong>中的<strong>INSTALL</strong>，然后右键选择“Project Only”–&gt;“Build Only INSTALL”。</p>
<p>漫长的等待。。。。。。(╯﹏╰)b</p>
<p>　　本人在这一步出现了一个问题，具体问题和解决方法详见问题篇。</p>
<p>　　一切顺利的话，应该会比本人下面的库多两个，本人最后生成的Debug库为：</p>
<blockquote>
<p>opencv_aruco320d.lib</p>
<p>opencv_bgsegm320d.lib</p>
<p>opencv_bioinspired320d.lib</p>
<p>opencv_calib3d320d.lib</p>
<p>opencv_ccalib320d.lib</p>
<p>opencv_core320d.lib</p>
<p>opencv_datasets320d.lib</p>
<p>opencv_dnn320d.lib</p>
<p>opencv_dpm320d.lib</p>
<p>opencv_face320d.lib</p>
<p>opencv_features2d320d.lib</p>
<p>opencv_flann320d.lib</p>
<p>opencv_fuzzy320d.lib</p>
<p>opencv_highgui320d.lib</p>
<p>opencv_imgcodecs320d.lib</p>
<p>opencv_imgproc320d.lib</p>
<p>opencv_line_descriptor320d.lib</p>
<p>opencv_ml320d.lib</p>
<p>opencv_objdetect320d.lib</p>
<p>opencv_optflow320d.lib</p>
<p>opencv_phase_unwrapping320d.lib</p>
<p>opencv_photo320d.lib</p>
<p>opencv_plot320d.lib</p>
<p>opencv_reg320d.lib</p>
<p>opencv_rgbd320d.lib</p>
<p>opencv_saliency320d.lib</p>
<p>opencv_shape320d.lib</p>
<p>opencv_stereo320d.lib</p>
<p>opencv_stitching320d.lib</p>
<p>opencv_structured_light320d.lib</p>
<p>opencv_superres320d.lib</p>
<p>opencv_surface_matching320d.lib</p>
<p>opencv_text320d.lib</p>
<p>opencv_tracking320d.lib</p>
<p>opencv_video320d.lib</p>
<p>opencv_videoio320d.lib</p>
<p>opencv_videostab320d.lib</p>
<p>opencv_xfeatures2d320d.lib</p>
<p>opencv_ximgproc320d.lib</p>
<p>opencv_xobjdetect320d.lib</p>
<p>opencv_xphoto320d.lib</p>
<p>共41个。</p>
</blockquote>
<h2 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h2><p>　　因为本人只编译了x86版动态debug库，所以以下环境配置都只针对x86版动态debug库。（其实要配置x64的库就只需将x86换成x64即可；要配置release模式的库就只需在添加附加依赖项中的库文件选择release模式的库（即数字后没有d的lib）；若要配置静态库就需要选择静态库文件夹以及在附加依赖项中添加相应的静态库文件。:-P）</p>
<p>　　首先把/opencv-3.2.0_build/build/install中的文件都提取出来，这和OpenCV官方release的opencv文件结构差不多，具体两层结构如下</p>
<blockquote>
<p>.<br>├── bin<br>│　&ensp;└── opencv_waldboost_detectord.exe<br>├── etc<br>│　&ensp;├── haarcascades<br>│　&ensp;└── lbpcascades<br>├── include<br>│　&ensp;├── opencv<br>│　&ensp;└── opencv2<br>├── LICENSE<br>├── OpenCVConfig.cmake<br>├── OpenCVConfig-version.cmake<br>└── x86<br>​     　　└── vc12</p>
<p>9 directories, 4 files</p>
</blockquote>
<p>x86文件夹就是VS2013生成的对应VS版本32位的各种库，include文件夹就是opencv的各项模块。本人将其中提取出的文件全部放入了C:\Program Files\OpenCV\3.2.0\build文件夹中。</p>
<p>　　首先配置环境变量，系统（或用户）环境变量如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量名</th>
<th>变量值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Path</td>
<td>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\bin</td>
</tr>
<tr>
<td style="text-align:center">OPENCV</td>
<td>C:\Program Files\OpenCV\3.2.0\build</td>
</tr>
</tbody>
</table>
<p>不然可能会报错：<font color="#FA8072">程序“XXXXXX”已退出，返回值为 -1073741701 (0xc000007b)</font>。其中下面那行可以选择不要添加。</p>
<p>　　然后在VS中配置环境。新建工程，然后在“<strong>属性管理器</strong>”中对应项目下<strong>Debug | Win32</strong>文件夹右键“<strong>添加新项目属性表</strong>”。（方便一次配置，多次使用，以后再使用只要在相应项目下右键“<strong>添加现有属性表</strong>”即可），本人新项目属性表取名为：opencv-3.2.0_msvc2013_x86d.props。</p>
<p>接下来就是真正的VS环境配置了：</p>
<p>　　双击打开刚才新建的属性表，选中“<strong>VC++目录</strong>”，<font color="#FA8072">注意在进行以下配置时建议都勾选左下角的“<strong>从父级或项目默认设置继承</strong>”</font></p>
<p>“<strong>可执行文件目录</strong>”中添加：</p>
<blockquote>
<p>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\bin</p>
</blockquote>
<p>“<strong>包含目录</strong>”中添加：</p>
<blockquote>
<p>C:\Program Files\OpenCV\3.2.0\build\include</p>
<p>C:\Program Files\OpenCV\3.2.0\build\include\opencv</p>
<p>C:\Program Files\OpenCV\3.2.0\build\include\opencv2</p>
</blockquote>
<p>“<strong>库目录</strong>”中添加：</p>
<blockquote>
<p>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\lib</p>
</blockquote>
<p>选中“<strong>链接器</strong>”  –&gt; “<strong>常规</strong>”，“<strong>附加库目录</strong>”中添加：</p>
<blockquote>
<p>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\lib</p>
</blockquote>
<p>“<strong>链接器</strong>” –&gt; “<strong>输入</strong>”，“<strong>附加依赖项</strong>”中添加<code>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\lib</code>中数字后带d的库文件，即编译篇中本人最后生成的41个库文件。</p>
<p>　　<font color="#FA8072">配置完之后不要忘了右键该属性表进行保存处理</font>，以便下个项目直接使用，不需要再重复进行配置。</p>
<p>最后附示例程序：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;  </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat lena = cv::imread(<span class="string">"lena.jpg"</span>); <span class="comment">//载入图像到Mat，jpg文件和该cpp在同一文件夹</span></div><div class="line">	cv::namedWindow(<span class="string">"lena"</span>); <span class="comment">//创建一个名为 "lean"的窗口   </span></div><div class="line">	cv::imshow(<span class="string">"lena"</span>, lena);    <span class="comment">//显示名为 "lena"的窗口</span></div><div class="line">	cv::waitKey(<span class="number">5000</span>);  <span class="comment">// 只对窗口机制起作用（显示5000ms，随后返回-1，即窗口关闭），若在此期间有按键按下，则马上返回按键的ASCII码。</span></div><div class="line">	<span class="comment">//system("pause");</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里必须在imshow后加入waitkey，因为WaitKey不止是Wait Key 而已，它其实还涉及到消息响应，有这个函数cv内部的WndProc函数才能起作用，才会更新窗口。</p>
<p>　　最后程序运行成功并显示lena图，则说明编译和配置没问题。</p>
<h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><font color="#FA8072">1、用VS2013编译OpenCV在漫长的等待阶段出现的问题。</font>

<p>　　<strong>问题描述：</strong>CVV模块报错，TS模块编译不出来，好在这两个模块都不是很重要，可以忽略，本人强迫症也没到这种程度O(∩_∩)O~。</p>
<p>　　<strong>解决办法：</strong> 在CVV模块报错后可在CMake（不知道具体是<strong>INSTALL</strong>下的<strong>CMake Rules</strong>中的<strong>INSTALL_force.rule</strong>，还是<strong>ALL_BUILD</strong>下的<strong>CMakeLists.txt</strong>，忘记了o(╯□╰)o）中添加<code>-DBUILD_opencv_cvv=OFF</code>忽略CVV模块，从而正常编译其它模块。参考<a href="https://github.com/opencv/opencv_contrib/issues/577" target="_blank" rel="external">errors on build opencv with cvv module and qt5 #577</a>。如果实在不行的话就在CMake生成的时候取消勾选出错模块，若是用CMake重新生成的话不要忘了先把/opencv-3.2.0_build/build目录下的文件全部删除干净。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　这是以前写的两篇文档，现在再来整理成一篇。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>　　既然能看到这里，说明是想在VS下使用OpenCV，这里推荐一款VS下OpenCV开发调试神器：<a href="https://marketplace.visualstudio.com/items?itemName=WolfKienzle.ImageWatch" target="_blank" rel="external">Image Watch</a>，效果谁用谁知道。Image Watch是VS的一个插件，不过它只支持VS2012及以上版本。使用方法为先设置断点（F9），随后在调试（F5）模式下，鼠标指针悬停在<code>cv::Mat</code>类型变量上，即可出现<img src="http://img.blog.csdn.net/20161115134305655" alt="插件调试标签">，点击查看图标即可显示相应图像。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://livezingy.com/compile-opencv-and-opencv_contrib/" target="_blank" rel="external">cmake-gui和vs2013编译opencv和opencv_contrib源码</a>（<a href="http://livezingy.com/category/opencv/" target="_blank" rel="external">http://livezingy.com/category/opencv/</a> ）</p>
<p>[2] <a href="http://livezingy.com/build_shared_libs/" target="_blank" rel="external">VS2013_CMake_opencv3.1动态库与静态库的配置与编译</a>（<a href="http://livezingy.com/category/opencv/" target="_blank" rel="external">http://livezingy.com/category/opencv/</a> ）</p>
<p>[3] <a href="https://wenku.baidu.com/view/ef3081e3a5e9856a561260d1.html" target="_blank" rel="external">使用VS2015编译以及静态编译opencv3记录</a></p>
<p>[4]  <a href="https://github.com/opencv/opencv_contrib/issues/577" target="_blank" rel="external">errors on build opencv with cvv module and qt5 #577</a></p>
<p>[5] <a href="http://blog.csdn.net/fengbingchun/article/details/46756373" target="_blank" rel="external">VS2013中Image Watch插件的使用(OpenCV)</a>（<a href="http://blog.csdn.net/fengbingchun/article/category/721609" target="_blank" rel="external">http://blog.csdn.net/fengbingchun/article/category/721609</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人系统环境：Win10_x64 英文企业版；VS2013-update5 英文旗舰版；CMake-3.6.3-win64-x64 免安装版；Qt-opensource-windows-x86-msvc2013-5.6.2。&lt;/p&gt;
&lt;p&gt;　　*注：本人写的这篇文档主要用来编译x86版的动态debug库，想编译其它类型的库请自行参考其它资料，做相关改变。（其实如果想编译x64版的可以在用VS2013编译时将上方的Win32平台选择x64平台；想编译release版的可以在用VS2013编译时将上方的Debug模式选择Release模式；想编译静态库的可以在用CMake生成时取消勾选&lt;strong&gt;BUILD_SHARED_LIBS&lt;/strong&gt;选项即可。:-P）&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　因为OpenCV-3.2官方的release版只有支持VS2015的库，而且不包括扩展包（opencv_contrib）中的库，而由于某些历史原因，本人目前使用的编译器还是VS2013，又想用用扩展包中一些有趣的算法，在加上上个月opencv-3.3还没有正式release，所以上个月本人就利用VS2013对opencv-3.2进行编译。具体编译过程如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>写上篇文档“GitHub+Hexo搭建个人博客”遇到的问题</title>
    <link href="http://cniter.github.io/2017/08/26/%E5%86%99%E4%B8%8A%E7%AF%87%E6%96%87%E6%A1%A3%E2%80%9CGitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E2%80%9D%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://cniter.github.io/2017/08/26/写上篇文档“GitHub-Hexo搭建个人博客”遇到的问题/</id>
    <published>2017-08-26T12:20:51.000Z</published>
    <updated>2017-08-28T07:21:54.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="超链接网址问题"><a href="#超链接网址问题" class="headerlink" title="超链接网址问题"></a>超链接网址问题</h2><p>　　<strong>问题描述：</strong>使用正常的markdown超链接格式<code>[]()</code>没问题，然而当直接将一个网址链接放入该文档时，它会将该链接后面的文字也当成是该链接的一部分，直接点击链接时，会将后面的文字也放入浏览器地址栏，从而出现网页404错误：<em>404: Page could not be found</em>。</p>
<p>　　<strong>解决办法：</strong>在网址链接后输入一个空格以隔开网址链接和后面的文字。</p>
<a id="more"></a>
<h2 id="超链接样式问题"><a href="#超链接样式问题" class="headerlink" title="超链接样式问题"></a>超链接样式问题</h2><p>　　<strong>问题描述：</strong>本人使用的hexo主题是基于spfk主题稍微修改过的，spfk主题能自动修改超链接原有的样式，挺好看的:D，但是当本人在markdown中数字编号列表，即有序列表中添加超链接时，其样式并没有修改，还是普通的超链接样式。</p>
<p>　　<strong>解决办法：</strong>没有解决。最后只是跳过了这个问题，就用中文的序号表示列表。</p>
<h2 id="文本段落问题"><a href="#文本段落问题" class="headerlink" title="文本段落问题"></a>文本段落问题</h2><p>　　<strong>问题描述：</strong>为了使文本有段落感，一般都会在段落首字前空两格，但是在markdown中空两格，用hexo发布后并没有空两格，这使得文档没有段落感，阅读体验有点差。</p>
<p>　　<strong>解决办法：</strong>将中文输入法由半角切换至全角，在段落首字前输入两个空格即可。</p>
<h2 id="显示英文尖括号问题"><a href="#显示英文尖括号问题" class="headerlink" title="显示英文尖括号问题"></a>显示英文尖括号问题</h2><p>　　<strong>问题描述：</strong>由于上篇文档需要在文档中显示<code>&lt;youname&gt;</code>，但由于Hexo可能将其当做一个xml标签处理了，所以发布之后的文档没有显示该文字。</p>
<p>　　<strong>解决办法：</strong>首先本人尝试了转义字符<code>\</code>，谁曾想它只出现了一个转义字符，该文字还是没显示，本人差点又要跳过这个问题，将其用另一种表示法了。后来本人想到这最后不是会转为html吗，本人就直接用html中尖括号的表示法不就行啦:p，于是参考<a href="http://liuxufei.com/weblog/jishu/71.html" target="_blank" rel="external">HTML语言中括号(尖括号)的字符编码</a>，用<code>&amp;lt;</code>代替<code>&lt;</code>，用<code>&amp;gt;</code>代替<code>&gt;</code>，最后该文字终于出来了。</p>
<h2 id="给文字添加颜色问题"><a href="#给文字添加颜色问题" class="headerlink" title="给文字添加颜色问题"></a>给文字添加颜色问题</h2><p>　　<strong>问题描述：</strong>本人想给注意事项上的需要注意的问题添加醒目的颜色，但markdown本身不支持给文字添加颜色。</p>
<p>　　<strong>解决办法：</strong>由于Hexo最后会将markdown文档转换为html文档发布，所以直接将html标签写进markdown文档，最后自然会出现html样式，本人这里参考<a href="http://blog.csdn.net/testcs_dn/article/details/45719357/" target="_blank" rel="external">CSDN-markdown编辑器语法——字体、字号与颜色</a>，给想要变色的文字添加<code>&lt;font color=#FA8072&gt;&lt;/font&gt;</code>标签。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://liuxufei.com/weblog/jishu/71.html" target="_blank" rel="external">HTML语言中括号(尖括号)的字符编码</a>（<a href="http://liuxufei.com/weblog/jishu" target="_blank" rel="external">http://liuxufei.com/weblog/jishu</a> ）</p>
<p>[2]  <a href="http://blog.csdn.net/testcs_dn/article/details/45719357/" target="_blank" rel="external">CSDN-markdown编辑器语法——字体、字号与颜色</a>（<a href="http://blog.csdn.net/testcs_dn" target="_blank" rel="external">http://blog.csdn.net/testcs_dn</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;超链接网址问题&quot;&gt;&lt;a href=&quot;#超链接网址问题&quot; class=&quot;headerlink&quot; title=&quot;超链接网址问题&quot;&gt;&lt;/a&gt;超链接网址问题&lt;/h2&gt;&lt;p&gt;　　&lt;strong&gt;问题描述：&lt;/strong&gt;使用正常的markdown超链接格式&lt;code&gt;[]()&lt;/code&gt;没问题，然而当直接将一个网址链接放入该文档时，它会将该链接后面的文字也当成是该链接的一部分，直接点击链接时，会将后面的文字也放入浏览器地址栏，从而出现网页404错误：&lt;em&gt;404: Page could not be found&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;解决办法：&lt;/strong&gt;在网址链接后输入一个空格以隔开网址链接和后面的文字。&lt;/p&gt;
    
    </summary>
    
      <category term="Problems" scheme="http://cniter.github.io/categories/Problems/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
      <category term="markdown" scheme="http://cniter.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>GitHub+Hexo搭建个人博客</title>
    <link href="http://cniter.github.io/2017/08/26/GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://cniter.github.io/2017/08/26/GitHub-Hexo搭建个人博客/</id>
    <published>2017-08-26T08:51:13.000Z</published>
    <updated>2017-08-28T07:23:01.549Z</updated>
    
    <content type="html"><![CDATA[<p>本人系统环境：Win10_x64。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本来是想在国内某网站上继续写的，毕竟完全不需要自己管理，只需要负责写好文档就可以了，但某一天，该网站由于响应国家的号召，要实名验证，本来实名验证也没什么，就输入手机号，并填写验证码即可，但该网站实名验证的方式给人的感觉特别不爽，于是就决定自己搭建博客，这样虽然有点麻烦，但由于完全是自己管理，自己完全拥有该文档的所有权，也不用担心哪天别的网站突然出现的各种破问题，相比这种完全自由支配、无比爽快的感觉，管理这种麻烦就是小事了。</p>
<a id="more"></a>
<h2 id="GitHub-Hexo个人博客搭建"><a href="#GitHub-Hexo个人博客搭建" class="headerlink" title="GitHub+Hexo个人博客搭建"></a>GitHub+Hexo个人博客搭建</h2><h3 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h3><p><strong>在GitHub上搭建博客的要求：</strong></p>
<p>　　1、要有GitHub账号。（没有怎么办，没有就去<a href="https://github.com/join?source=header-home" target="_blank" rel="external">注册</a>啊）</p>
<p><strong>使用Hexo框架的要求：</strong></p>
<p>　　1、需要安装node.js。（电脑上没有安装怎么办，没有安装就去<a href="http://nodejs.cn/download/" target="_blank" rel="external">下载</a>（<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a> ）安装啊）</p>
<p>　　2、需要安装git。（没有安装就去<a href="https://git-scm.com/downloads" target="_blank" rel="external">下载</a>安装，附<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git学习教程</a>）</p>
<h3 id="GitHub篇"><a href="#GitHub篇" class="headerlink" title="GitHub篇"></a>GitHub篇</h3><p>　　满足上文的要求之后，就可以开始搭建了，首先在GitHub中新建一个仓库（<strong>New repository</strong>），在<strong>Repository name</strong>下填写<strong>&lt;yourname&gt;.github.io</strong>，其它可默认，点击Create repository。</p>
<p>　　新建仓库完成后，点击<strong>Create new file</strong>新建一个<strong>README.md</strong>文件，随便写点什么，比如“It&#39;s my blog website”。</p>
<p>　　点击上方横条选项中的<strong>Settings</strong>，查看<strong>GitHub Pages</strong>里的设置，上方应该有绿色框，框中“<strong>Your site is published at <a href="https://&lt;yourname&gt;.github.io" target="_blank" rel="external">https://&lt;yourname&gt;.github.io</a></strong>”，该网址即为博客主页，<strong>Source</strong>应该是<strong>master branch</strong>，自此GitHub上的设置可以算是完成了，但为了方便和防止误删，一般把Hexo文件也放入GitHub中，为方便管理，可以新建另一分支专门放Hexo文件。</p>
<p>　　在仓库code界面中点击<strong>Branch：master</strong>，在出现的框中输入hexo新建hexo分支，在<strong>branches</strong>中<strong>Change default branch</strong>设置hexo为默认分支。</p>
<h3 id="Hexo篇"><a href="#Hexo篇" class="headerlink" title="Hexo篇"></a>Hexo篇</h3><p>　　将刚才新建的仓库克隆到本地：<code>git clone https://github.com/&lt;yourname&gt;/&lt;yourname&gt;.github.io.git</code>当前在hexo分支。</p>
<p>在&lt;yourname&gt;.github.io文件夹下执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">hexo init blog</div><div class="line"><span class="built_in">cd</span> blog</div><div class="line">npm install</div><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>　　按这样一连串执行，如果没出问题的话就会在&lt;yourname&gt;.github.io文件夹里生成一个blog文件夹，该文件夹有一大堆Hexo有关的文件。</p>
<h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><p>　　Hexo的配置文件为blog文件夹中的<strong>_config.yml</strong>文件。</p>
<p>　　修改配置文件不要使用windows自带的记事本，本人使用的VS Code，或者Notepad++和Sublime Text 2等编辑器都可以，以防文件编码改变，具体修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span>  <span class="string">&lt;你的blog名&gt;</span></div><div class="line"><span class="attr">author:</span> <span class="string">&lt;作者名称&gt;</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN&lt;网站所用语言，中国大陆选择zh-CN即可&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> <span class="attr">http://&lt;yourname&gt;.github.io</span></div><div class="line"></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/&lt;yourname&gt;/&lt;yourname&gt;.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<p>其它的默认即可，具体参数信息详见<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo官方文档</a>。</p>
<h4 id="配置git用户信息"><a href="#配置git用户信息" class="headerlink" title="配置git用户信息"></a>配置git用户信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"&lt;yourname&gt;"</span></div><div class="line">git config --global user.email <span class="string">"&lt;yourname&gt;@xxxxxx.com"</span></div></pre></td></tr></table></figure>
<p>　　如果是个人电脑的话推荐加上–global全局参数，因为这样更加方便，如果不加的话，还要在\&lt;yourname&gt;.github.io\blog\.deploy_git\.git中config里加入git用户信息，不然可能提交会出问题，稍显麻烦。</p>
<h4 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h4><p>在blog文件夹下执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo g         <span class="comment">#generate 生成静态文件</span></div><div class="line">hexo d         <span class="comment">#deploy 部署网站.部署网站前,需要预先生成静态文件</span></div><div class="line">hexo s         <span class="comment">#server 启动服务器</span></div></pre></td></tr></table></figure>
<p>或者执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g -d</div></pre></td></tr></table></figure>
<p>快速部署个人blog。</p>
<p>　　在浏览器中输入<code>http://localhost:4000/</code>，将会出现Hexo的Hello World界面，更多Hexo命令详见<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">Hexo官方文档</a>。</p>
<p>最后将Hexo文件提交到GitHub远程仓库，具体提交命令为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit</div><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<p>　　在浏览器中输入<code>https://&lt;yourname&gt;.github.io</code>同样会出现Hexo的Hello World界面，自此整个个人blog的框架已经完全搭好了。</p>
<h3 id="其它篇"><a href="#其它篇" class="headerlink" title="其它篇"></a>其它篇</h3><h4 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h4><p>　　主题可以去官网上的主题界面去找，目前比较受欢迎主题有<strong>next</strong>和<strong>yilia</strong>，去别人GitHub上的主题仓库上去下载或clone均可，<del>本人目前用的主题为<strong><a href="https://github.com/maochunguang/black-blue" target="_blank" rel="external">black-blue</a></strong>，这个主题本人在用的时候还有些问题，或许会换，或许会自己魔改。</del>最后由于术业有专攻，实在不知道该改哪里，所以决定换black-blue的原版主题<strong><a href="https://github.com/luuman/hexo-theme-spfk" target="_blank" rel="external">SPFK</a></strong> ，对照着black-blue对spfk进行修改。具体换主题的方法为：</p>
<p>　　先将下载好的主题整个放在\blog\themes文件夹中，再修改blog文件夹中的配置文件<strong>_config.yml</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># theme: landscape</span></div><div class="line"><span class="attr">theme:</span> <span class="string">black-blue</span></div></pre></td></tr></table></figure>
<p>　　black-blue为打包主题文件并放入\blog\themes文件夹中的文件夹名，并不是原主题名，只是本人恰好将其重命名为主题名。</p>
<h4 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h4><p>发布文章需要在blog文件夹中执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"test"</span></div></pre></td></tr></table></figure>
<p>　　将会在\blog\source_posts\文件夹中生成test.md文件，随后编辑test.md文件即可，本人使用的Markdown编辑器为<a href="https://www.typora.io/" target="_blank" rel="external">Typora</a>。</p>
<p>至于给文章打标签和分类什么的，请参考<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Hexo官方文档</a>。</p>
<p>写完文章之后推送到GitHub中，需要执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m <span class="string">"add test.md"</span></div><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<p>Hexo文件配置同样需要同步一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo clean</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<h4 id="插件添加"><a href="#插件添加" class="headerlink" title="插件添加"></a>插件添加</h4><p>以RSS订阅插件为例。首先安装<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## rss插件</span></div><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>安装成功后，修改blog文件夹中的配置文件<strong>_config.yml</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="attr">plugin:</span></div><div class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span> <span class="comment">#RSS订阅</span></div></pre></td></tr></table></figure>
<p>最后，修改当前主题文件夹中的配置文件_config.yml，添加RSS订阅链接即可：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">subnav:</span></div><div class="line"><span class="attr">  rss:</span> <span class="string">"/atom.xml"</span></div></pre></td></tr></table></figure>
<p>修改完成后，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>将会在页面中看到RSS图标。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><font color="#FA8072">1、<em><u><strong>提交至远程仓库时可能会出现错误</strong></u></em>。</font>

<p>　　原因可能是因为没有将SSH Key添加到GitHub中。</p>
<p>　　查看当前用户主目录下的.ssh文件夹中（windows是C:\Users\&lt;username&gt;\.ssh）是否有<code>id_rsa</code>（私钥）和<code>id_rsa.pub</code>（公钥）这两个文件，若没有，则执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure>
<p>　　在GitHub中添加SSH Key的具体方法为：点击GitHub用户头像下的<strong>Settings</strong>，选中<strong>SSH and GPG keys</strong>，点击<strong>New SSH key</strong>，将<code>id_rsa.pub</code>中的内容复制粘贴到<strong>Key文本框</strong>中。</p>
<font color="#FA8072">2、<u><strong><em>Hexo生成和部署命令都执行失败</em></strong></u>。</font>

<p>　　原因可能是修改配置文件_config.yml出错。</p>
<p>　　将修改的配置文件_config.yml复原试试。</p>
<font color="#FA8072">3、<u><strong><em>Hexo部署之后网页没变化</em></strong></u>。</font>

<p>可能需要执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<p>　　清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行该命令。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　以后就在这上面写blog了，顺便把以前写的一些文档也放上来。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/u012150360/article/details/72793482" target="_blank" rel="external">利用github+hexo搭建自己的博客</a>（<a href="http://blog.csdn.net/u012150360/article/category/6765461" target="_blank" rel="external">http://blog.csdn.net/u012150360/article/category/6765461</a> ）</p>
<p>[2] <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方文档</a>（<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a> ）</p>
<p>[3] <a href="http://www.jianshu.com/p/469e985288b3?from=jiantop.com" target="_blank" rel="external">GITHUB+HEXO博客轻松更换主题外观</a>（<a href="http://www.jianshu.com/nb/10649566" target="_blank" rel="external">http://www.jianshu.com/nb/10649566</a> ）</p>
<p>[4] <a href="http://hanhailong.com/2015/10/08/Hexo%E2%80%94%E6%AD%A3%E7%A1%AE%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/" target="_blank" rel="external">Hexo—正确添加RSS订阅</a>（<a href="http://hanhailong.com/tags/Hexo%E4%B8%BB%E9%A2%98/" target="_blank" rel="external">http://hanhailong.com/tags/Hexo%E4%B8%BB%E9%A2%98/</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人系统环境：Win10_x64。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本来是想在国内某网站上继续写的，毕竟完全不需要自己管理，只需要负责写好文档就可以了，但某一天，该网站由于响应国家的号召，要实名验证，本来实名验证也没什么，就输入手机号，并填写验证码即可，但该网站实名验证的方式给人的感觉特别不爽，于是就决定自己搭建博客，这样虽然有点麻烦，但由于完全是自己管理，自己完全拥有该文档的所有权，也不用担心哪天别的网站突然出现的各种破问题，相比这种完全自由支配、无比爽快的感觉，管理这种麻烦就是小事了。&lt;/p&gt;
    
    </summary>
    
      <category term="建站小记" scheme="http://cniter.github.io/categories/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://cniter.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cniter.github.io/2017/08/26/hello-world/"/>
    <id>http://cniter.github.io/2017/08/26/hello-world/</id>
    <published>2017-08-26T08:16:16.000Z</published>
    <updated>2017-08-26T08:35:19.866Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
