<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaun&#39;s Space</title>
  <subtitle>求知！ 视界！ 未来！ ↖(^ω^)↗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cniter.github.io/"/>
  <updated>2020-07-11T01:46:24.058Z</updated>
  <id>http://cniter.github.io/</id>
  
  <author>
    <name>Shaun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读大学</title>
    <link href="http://cniter.github.io/posts/ae5f9dce.html"/>
    <id>http://cniter.github.io/posts/ae5f9dce.html</id>
    <published>2020-07-09T14:09:58.000Z</published>
    <updated>2020-07-11T01:46:24.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>知识的积累如同滚雪球一般，越滚越大，越滚越快。</p><p>　　人类简史中，人类花了几万年的时间完成采集文明到农耕文明的过度，花了几千年的时间从农耕文明到工业文明，而工业文明短短几百年就过渡到现代信息化文明。而如今的时代，短短几年就会产生一些新的行业，有些能产生巨大的社会价值，而有些则会被人所遗忘，亦或过些年又卷土重来，潮起潮落，社会总是以一种加速递增的趋势在发展。</p><a id="more"></a><h2 id="志愿篇">志愿篇</h2><p>　　大学就是普通人进入社会的一块敲门砖，一块垫脚石，进入社会多年之后，这块敲门砖还有多大的重要性，这就看个人的际遇了，但总的来说，这块敲门砖越厚重，进入社会的机会和选择就越多，相对来说越容易成功。虽说取得一定的成就之后，也就可以不在使用这块敲门砖，但对于普通人来说，这块敲门砖还是挺重要的，毕竟这块敲门砖将会陪伴绝大多数的普通人一辈子。</p><p>　　对一般人来说，进入大学唯一的途径就是高考，而高考完之后需要走填志愿……录取等一系列流程才决定是否能进入大学。高考志愿最重要的一个指标即是所在省的排名，全国各个大学在每个省的指标基本是不变的，所以排名直接决定能上什么样的大学，当然，因为各种各样的原因，每年总会有一批人上不了自己该上的大学，甚至落榜，也有一批人上了自己本上不了的大学，但对于一般人，排名是绝对的指标，只看这一个就可以直接在这一档挑选自己能上的大学了，剩下的就是专业了，一个学校的王牌专业一般会远远高出录取线，所以这就需要选择，是去好一档学校的“差”专业，还是去差一档学校的“好”专业（这个差和好并不是绝对的，都是相对该校的王牌专业来说），Shaun 的看法是如果是同一个专业，当然是去好学校的差专业，不同的专业则仁者见仁智者见智，没有可比性。之所以这么选择，是根据 Shaun 这几年在社会上的摸爬滚打，好的学校还是要香一点，而专业这种东西反正都是靠自己学的，大学上课的那些东西一般都只是入门课程，有的甚至连入门都够不上。当然，专业选择这种东西还有个小技巧，就是可以选择类似的专业，当自己想上的专业是好专业，自己的分数够不上，这时可以采用这种技巧，捡漏，因为有些人对专业不是特别了解，只死盯着那个专业，但其实两者上的课程差不多，一般来说，同一个学院的专业会存在类似的情况，而一个大的专业，类似的专业就更多了，像计算机专业，无论是搞硬件的搞软件的搞自动化的都能搞计算机。</p><p>　　专业重不重要？对于 90% 以上的人来说，专业还是重要的，确实也有一小部分人也可以完全抛弃大学时的专业，照样也能混的风生水起，这样的人当然是极少的。但对于一般人来说，专业相当于 4 年的积累，为步入社会打下基础，多年后或许会完全抛弃自己的专业，但那也是在社会上有了一定的积累之后，刚开始就抛弃这份积累，从事一份完全无关的工作，对一般人来说何其艰难。</p><p>　　至于专业选择重不重要，这就看个人了，在 Shaun 眼中，专业选择同样重要，因为专业基本就确定了职业和所在的行业，而行业是有贵贱之分的，虽说三百六十行行行出状元，但有些行业的状元就是比另外行业的状元强，甚至踏上这个行业就比有些行业的状元还要强，而且就算出状元，也轮不到一般人头上。像老师和医生这样的职业，天然的就比别的职业社会地位要高，在这娱乐至死的时代，像电影游戏直播偶像行业，90% 以上的资源就掌握在 1% 的人手上，极度不平衡，成不了这 1% ，都是炮灰。</p><p>　　在特殊情况下，行业这东西又显得不是那么重要，而运气和眼光相对来说更重要些，有句话叫：站在风口上，猪都能飞起来。09 年，智能机开始兴起，12年，随着 3G 的普及，移动互联网时代开始逐步走向高潮，而三年后，4G 的到来，真正将移动互联网推向高潮，这股高潮一直持续到现在，当然，由于这块蛋糕基本被瓜分完了，现在进场也吃不到什么肉了，除非有新点子或市场。这十年间，有多少企业只靠一个 APP 就做大做强的，又有多少企业因为没搭上这趟车而逐渐走向衰落甚至倒闭的。当然，Shaun 是有点反感移动互联网的，但奈何市场喜欢，资本喜欢。移动互联网的本质在于各家的资源掌握在自己手里，绝不分享，这对于互联网的发展并不是一个好的现象，也就直接导致了如今的中文互联网像一滩狗屎。遥想 09 年之前，中文互联网是何等的辉煌，各种想要的资源应有尽有，高质量的内容产出也层出不穷，是真正的我为人人，人人为我。现如今内容资源都掌握在各家平台手上，还无法直接在浏览器上通过网页获取，必须使用各家的 APP，APP 就算是一滩屎，用户也只能跪舔，不过这各种流氓行为，说到底也都是用户自己惯的。现如今，中文互联网高质量的产出不多了，大多都存在于非常专业创立时间长且不太知名人数不多的社区和论坛中。不得不说，中文互联网变成如今这个样子，百度有很大一部分责任，贴吧可以说是一个跨时代的产品，被搞得乌烟瘴气，以前的百度空间确实也有些高质量的内容，直接关闭。</p><p>　　扯远了扯远了 (￣ε(#￣)。热门行业从来都不是一层不变的，大学的专业也是如此（Shaun 本科读的那个专业已经换了个名字），甚至大学本身也是如此，分拆合并，过去二三十年时有发生。时代在变化，行业在变化，大学也在变化，唯一不变的是变化本身，为适应变化，学习思维才是个人的立身之本。学习思维这种东西，确实无法明说，只能说是为自己量身定制的一种学习感觉（Shaun 刚入大学时，还停留在小初高的那种学习思维，认为多看书，多做题多想就能学好，这样的思维学习像高数这种基础课程，确实没问题，但像编程这样的专业课，这一套思维则完全走不通，Shaun 觉得编程更重要的是一种手感和思维方式，多抄多<strong>改</strong>，多模仿好代码，手感自然而来，不会的，网上也一般都有直接或近似的解决方案，拿过直接<strong>改改</strong>使用，在改的过程中就锻炼了编程手感和思维方式，这种方式虽然原始粗暴，但却是一种通用的编程学习方法，使用好这种方法，本科的专业课一般也比较轻松，甚至以后在工作中，就算网上没有任何解决方案，也能凭自己的感觉和思考将代码写好，至于代码的组织能力，就又需要另一种学习方法了，总之编程这门手艺，实践才是王道）。Shaun 觉得国内小初高的教育锻炼的是做题和狭小的思考能力，而大学的工科更注重的是动手和广泛的思考能力（当然基础课程还是小初高那一套），这两种学习思维是存在差异的，并且可以说差异很大。大学时期的建立的学习思维将直接影响个人的一生，拿大学的那套学习思维虽然不一定能在社会上混得开，但一定能让人把本职工作做好。</p><h2 id="大学篇">大学篇</h2><p>　　真正进入大学后，就有很多可以选择的事了，可以天天划水摸鱼，东游西逛，也可以比高三还要辛苦，这都是个人的选择，都看个人的追求，没有纯粹的对错。</p><p>　　Shaun 的四年本科一直很平庸，没干过什么大事，也没干过真正的蠢事，只是干过一些糗事（刚进大学的时候以为还要去某个教室集合，但其实只要在寝室等通知就好，军训是可以装病休息的，没人会在意，就大一上学期有过一些，后面摸清大学的套路就没了），也没伸手要过啥 🙃，虽被人有说愤青，但没真正做过网络喷子（在网络事件中，事和人需要分开讨论，事可能是好事，但人不一定是好人，同样，事是坏事，但人可能是好人，况且，网络上，事可能事假的，人可能也是假的，只要有自己的见解和判断，就不会人云亦云）。四年本科，唯一让 Shaun 觉得有价值的东西并不是学校提供的什么环境，也不是老师朋友的教导和帮助，而是这段时间逐渐形成在网络上求知的那种思维，这种思维在 Shaun 的读研和工作生涯中给予了极大的帮助。除真正的科研问题之外，工作中碰到的其他问题总能按部就班的解决，剩下的无非就是熟练度而已。</p><p>　　一般人在大学中待得最久的一个地方可能就是宿舍了，所以和室友之间的关系尽量不要搞得太僵，自身最应该做的就是不卑不亢，当然，每个学校总是会存在一部分蠢货的，运气不好，宿舍正好被分到，此时更加不能卑，只要有理就可以随便说放手做。</p><h2 id="后记">后记</h2><p>　　志愿篇是写给别人的，而大学篇是 Shaun 顺带回忆的，毕竟硕士的回忆篇早写了，大学篇也来凑个数吧，但正如『头脑特工队』中痛苦的记忆更容易被回忆起来，而平淡的记忆将逐渐灰飞烟灭，所以大学篇就只能简单写写了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;知识的积累如同滚雪球一般，越滚越大，越滚越快。&lt;/p&gt;&lt;p&gt;　　人类简史中，人类花了几万年的时间完成采集文明到农耕文明的过度，花了几千年的时间从农耕文明到工业文明，而工业文明短短几百年就过渡到现代信息化文明。而如今的时代，短短几年就会产生一些新的行业，有些能产生巨大的社会价值，而有些则会被人所遗忘，亦或过些年又卷土重来，潮起潮落，社会总是以一种加速递增的趋势在发展。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://cniter.github.io/categories/Life/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>2019，既是结束又是开始</title>
    <link href="http://cniter.github.io/posts/cf97ba7c.html"/>
    <id>http://cniter.github.io/posts/cf97ba7c.html</id>
    <published>2020-02-29T10:50:36.000Z</published>
    <updated>2020-03-07T10:59:23.400Z</updated>
    
    <content type="html"><![CDATA[<p>　　人生总算是告一段落了，虽然没取得好成绩，但总归要奔向新的起点，迎接新的挑战。</p><a id="more"></a><h2 id="前言">前言</h2><p>　　回首 2019，告别了学生身份，迎来的新的称号——社畜。普通人进入社会也只能是社畜，一批又一批的供养着食物链上层的生活，虽然有社畜能升级，但任务完成何其艰难，材料获取何其艰难。好了闲话也不多说了，开始进入正题吧。</p><h2 id="结束篇">结束篇</h2><p>　　19 年，终于迎来了学生生涯的最后阶段，依稀记得，从开学到毕业一直过的十分焦虑，虽说论文的思路早已想通，实验结果也有了，只剩对比试验还没做，但每周一次的例会着实让人头皮发麻。依旧每周一次的批斗大会，自己的想法，写的东西，说的东西，在导师面前都是屁，纯粹就是想把学生批的体无完肤，以体现自己导师的身份和那一份仅有的优越感。日子就这样一周周过去，从论文写完到查重，从答辩完到走完所有毕业流程，虽然心理上的压力不小，但总算还是顺利毕业了。不管怎么说，能够顺利毕业总比跳楼的要好太多了，如果说这小硕读的值不值，对于 Shaun 来说，还是值的，虽然承受了莫大的心理压力，但总归还算是承受住了，真鸡儿痛苦，完全不想承受第二次，估计也不会有第二次了，如果真有，Shaun 估计会选择尽快逃脱远离。</p><p>　　再回首 2019 年上半年，却发现从年初到脱离学生身份这一段时间发生的事已经渐渐模糊了，痛苦的事有时会被人选择性的忘记，最终回归平淡，或许这就是历史总会重演的原因。</p><p>　　好了，结束篇就这样结束吧，多的也不写了，该写的东西也早已写完。</p><h2 id="开始篇">开始篇</h2><p>　　刚步入社会就被上了一课，在培训时闹钟设错了，错设为工作日闹钟，而培训在周末仍在进行，而且当天开始的非常早，所以当然迟到了。事后反思这事最好自己闷在肚子里了，不要提任何理由，因为没人会同情你，甚至会嘲笑你，迟到就是迟到，过程就是个屁，结果才是王道，只能从中吸取经验，下次再有类似的事还是设一次性的临时闹钟比较好。本以为迟到这件事就会这样慢慢过去，但在新人见面会上（老板会和每一批新人见一下面），有人为了表现自己特意和老板强调了一下，也是有意思，非蠢即坏，不知是老板贵人多忘事还是情商高，这件事就这么过去了。这事算是 Shaun 真正步入社会后上的第一课，所以还是写下来了，以后估计还是会被上一些课，只是有些是大课有些是小课罢了，从课中吸取经验，或许就是成长吧。</p><p>　　初当社畜，干的当然都是一些打杂的活，还记得，正式干活的第一个任务就差点没完成，由于学生时代一直在搞图像，而第一个任务却是图形中的问题，那个问题是 “3维场景中选择物体不准确”。从来没接触过的 3维 的 Shaun 当时连相机模型都不了解，更何况是实际项目中的问题，就牵扯的更多了，于是花了几天时间熟悉项目中整个选择流程及 3维图形的一些基础知识，终于在一周后成功修复了这个 bug，刚开始还以为是相机模型的问题，重写了一下相机模型，中间确实发现了一个矩阵乘法的问题，修复了之后，这个 bug 还是存在，相机模型没有任何问题，最后选择输出全部点的坐标，发现有些点的 ndc 坐标有异常，排除这些点之后，选择终于正确了，社畜生涯中的第一个正式任务也算是圆满完成。</p><p>　　再之后就是一些大大小小的新功能添加以及 bug 修复。两个月后，来了一个项目，需要为这个项目单独开发一些功能在已有的产品上，鉴于组里其他人都有各自的任务，这个项目就落到 Shaun 头上了，还好经过两个月的熟悉，对已有产品基本熟悉了，开发相关的新功能难度也不大，唯独有一个要求导致已有的产品需要进行架构升级，不然就没法满足该需求，不知为啥，这架构升级的工作也落到了 Shaun 头上，没办法，只能硬着头皮上了，强行分离了一些文件出去，搞了一周多，虽然出现了一些 regression，但好歹也算是升级成功，满足了甲方的需求，以 Shaun 当前的眼光看，当时架构升级还是存在一些问题，有些文件不该抽离的，但碍于当时自身的能力以及对整个产品的理解程度，能升级成功也还可以了，这种经验算是比较难得的。</p><p>　　之后继续添加功能和修复 bug，就这样顺利过完了 19年，社畜的半年时间，虽然还不够真正入门，但好歹也摸到了门槛，开始接触了一些社畜的规则。</p><h2 id="总结">总结</h2><p>　　学生身份终于彻底结束，最后的学生阶段是 Shaun 整个学生生涯最难受的一段时间，说不好也可能是整个人生最难受的时光，不过总算是过去了。踏足当下，回首过去，展望未来，从这半年的社畜生活看，真的很不错，比读书爽太多了，也可能是最后的学生阶段压抑的太厉害了，总之感觉很爽，同事和上司都还可以，最重要的是没有了任人宰割的感觉，真的很舒服 😊。</p><div style="text-align:center;font-family:Allura,Consolas,Helvetica,Tahoma,Arial,Microsoft YaHei,微软雅黑,SimSun,宋体,Heiti,黑体,sans-serif;font-size:1.3em;color:#4094c3;font-weight:700;margin:.5em auto">19 年获得技能：<strong><em>社畜新手</em></strong><br>19 年获得成就：<strong><em>顺利毕业</em></strong></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　人生总算是告一段落了，虽然没取得好成绩，但总归要奔向新的起点，迎接新的挑战。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://cniter.github.io/categories/Life/"/>
    
    
      <category term="thought" scheme="http://cniter.github.io/tags/thought/"/>
    
  </entry>
  
  <entry>
    <title>快速判断三角形与长方体相交</title>
    <link href="http://cniter.github.io/posts/ff29de94.html"/>
    <id>http://cniter.github.io/posts/ff29de94.html</id>
    <published>2020-02-02T14:06:39.000Z</published>
    <updated>2020-02-02T14:13:57.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　一种快速判断空间中三角形与 box 相交的方法，出自论文：<em>Akenine-M, Ller T . Fast 3D triangle-box overlap testing. A. K. Peters, Ltd. 2002.</em></p><a id="more"></a><h2 id="预备篇">预备篇</h2><p>　　该论文的理论基础来自分离轴理论（separating axis theorem， AST），AST 常用于检测两凸多边形是否相交。一句话描述 AST 即为：若两多边形能用一条直线分隔开，则两多边形不相交。如何判断该直线存在即为 AST 的关键。常用的判断方法为找出两多边形所有边向量（多边形相邻两点构成的向量，顺时针或逆时针都行）的法向量，使用向量点积分别计算两多边形在各法向量上的投影（一般以多边形上的点和原点构成一个向量与法向量做点积），从而得到两个投影集合，判断两集合是否相交（找出两个集合的最大值和最小值，若最小值大于最大值，则不相交），若不相交，则 AST 中的直线存在，即两多边形不相交，若相交，则继续判断在其它法向量上的投影，若所有法向量上的投影都相交，则两凸多边形相交。AST 常用于二维下判断两凸多边形的相交情况，三维下的情况比较复杂。</p><h2 id="正文篇">正文篇</h2><p>　　该论文给定 13 个向量，若 box 的边和三角形的边在这 13 个向量中的投影均相交，则认为 box 与三角形相交。为简化运算，box 直接假定为轴向包围盒（axis-aligned bounding box， AABB），坐标轴原点为 box 中心，由于可以将普通 box 通过旋转平移等一系列变换，变成以原点为中心的 AABB， 所以该假定是有效的。设三角形的顶点为 <span class="math inline">\(v_0, v_1, v_2\)</span> ，box 的<strong>一半</strong>长宽高为 <span class="math inline">\(h_x, h_y, h_z\)</span> ，则这 13 个向量分别为 <span class="math inline">\(e_0(1, 0, 0), e_1(0, 1, 0), e_2(0, 0, 1)\)</span> ，三角形的法向量 <span class="math inline">\(n\)</span> （通过三角形两边向量叉乘得到），剩下九个向量分别为 <span class="math inline">\(a_{ij} = e_i \times f_j , i,j \in \{0, 1, 2\}\)</span> ，其中 <span class="math inline">\(f\)</span> 为三角形的边向量 <span class="math inline">\(f_0 = v_1 - v_0, f_1 = v_2 - v_1, f_2 = v_0 - v_2\)</span> ， <span class="math inline">\(\times\)</span> 代表向量叉乘。若直接这样一个个的计算投影是否相交，虽然能达到目的，但快速就无法体现了，所以作者根据向量计算方法和一些策略将其中一些需要计算投影的地方极大的简化了，所以加快的计算速度。具体简化过程为：</p><ol type="1"><li><p>首先来看最后九个向量，<span class="math inline">\(a_{00} = e_0 \times f_0 = (0, -f_{0z}, f_{0y})\)</span> ，三角形三个顶点在在该向量上的投影分别为：</p><p><span class="math inline">\(p_0 = a_{00} \cdot v_0 = (0, -f_{0z}, f_{0y}) \cdot v_0 = v_{0z}v_{1y} - v_{0y}v_{1z}\)</span></p><p><span class="math inline">\(p_1 = a_{00} \cdot v_1 = (0, -f_{0z}, f_{0y}) \cdot v_1 = v_{0z}v_{1y} - v_{0y}v_{1z} = p_0\)</span></p><p>$p_2 = a_{00} v_2 = (0, -f_{0z}, f_{0y}) v_2 = (v_{1y} - v_{0y})v_{2z} - (v_{1z} - v_{0z})v_{2y} $</p><p>由于 <span class="math inline">\(p_0 == p_1\)</span>， 所以在求最大最小值时只需要做一次比较，接着求 box 在该向量上的投影，box 中心在原点，所以投影半径 <span class="math inline">\(r\)</span> 可以以一种简单的方式求出：</p><p><span class="math inline">\(r = h_x|a_{00x}| + h_y|a_{00y}| + h_z|a_{00z}| = h_y|a_{00y}| + h_z|a_{00z}|\)</span></p><p>计算投影是否重合也很简单：</p><p><span class="math inline">\(if(min(p_0, p_2) &gt; r \ || \ max(p_0, p_2) &lt; -r) \quad return \ false\)</span> 否则两者投影相交，继续计算其它向量。</p></li><li><p>三个轴向单位向量 e 中的投影是否重合就更好判断了，完全不需要计算投影，只需要计算三角形的最小 AABB，判断两个 AABB 是否相交即可（取两个 AABB 最小的顶点和最大的顶点，从三维上判断最小是否的大于最大的即可，若任意一个维度上最小的比最大的大，则两者不相交），</p></li><li><p>至于判断最后一个向量——三角形的法向量上的投影是否重合，相当于判断三角形所在平面是否与 box 相交。判断 box 与平面相交有一种简单快速的方式，即通过公式 <span class="math inline">\(|d| &lt;= a_1 |n \cdot A^1| + a_2|n \cdot A^2| + a_3 |n \cdot A^3|\)</span> ，其中 <span class="math inline">\(d\)</span> 为 box 中心到平面的距离（中心点到平面上一点构成的向量与平面法向量做点积），<span class="math inline">\(n\)</span> 为平面法向量，<span class="math inline">\(A^1\)</span> 为 box 侧面法向量，对于 AABB 可为 <span class="math inline">\((1, 0, 0)\)</span>，<span class="math inline">\(a_1\)</span> 为 box 中心到侧面的距离，对于 AABB 可为 <span class="math inline">\(h_x\)</span>，同理 <span class="math inline">\(A^2\)</span> 为 box 顶面法向量，对于 AABB 可为 <span class="math inline">\((0, 1, 0)\)</span>，<span class="math inline">\(a_2\)</span> 为 box 中心到顶面距离，对于 AABB 可为 <span class="math inline">\(h_y\)</span>，<span class="math inline">\(A^3\)</span> 为 box 正面法向量，对于 AABB 可为 <span class="math inline">\((0, 0, 1)\)</span>，<span class="math inline">\(a_3\)</span> 为 box 中心到正面距离，对于 AABB 可为 <span class="math inline">\(h_z\)</span>，即在 AABB 中，该公式可简化为 <span class="math inline">\(|d| &lt;= h_x|n_x| + h_y|n_y| + h_z|n_z|\)</span> ，满足该公式，即可判定平面与 AABB 相交。</p></li></ol><p>　　如此 13 个向量全部判断完毕，如全都相交，则可认定三角形与长方体相交，若其中一个不相交，则三角形与长方体不相交。三维的都能判断，二维的三角形与矩形相交判断就更简单了，分成两类法向量后，利用向量运算先简化运算量，再计算投影是否相交即可。</p><h2 id="附录">附录</h2><p>　　还有一种根据距离判断两个 AABB 是否相交的办法，即先取两个 AABB 的中心 <span class="math inline">\((x_1, y_1, z_1)\)</span> 和 <span class="math inline">\((x_2, y_2, z_2)\)</span>，然后计算两个中心点之间的三个维度的距离，将 x 维度的距离与两个AABB 的 <span class="math inline">\(h_x\)</span> 之和比较，若中心点 x 维度的距离较大，则不相交。即：<span class="math inline">\(if (|x_1 - x_2| &gt; h_{x1} + h_{x2}) \quad return \ false\)</span> ，否则比较 y 维度， z 维度，若所有都小，则两 AABB 相交。这种方式是 Shaun 在一次面试中被问到没答出后在网上找到的答案，其实感觉和比较最小最大顶点也差不多，都是从不相交出发，因为直接判断相交基本不可能，而不相交很容易判断，把所有的不相交情况判断完，那就只剩相交了，可惜面试官只想要这种方案 ╮(╯▽╰)╭。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="http://fileadmin.cs.lth.se/cs/Personal/Tomas_Akenine-Moller/code/" target="_blank" rel="external">Code by Tomas Akenine-Möller</a></p><p>[2] <a href="https://www.gamasutra.com/view/feature/131790/simple_intersection_tests_for_games.php?print=1" target="_blank" rel="external">Simple Intersection Tests For Games</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　一种快速判断空间中三角形与 box 相交的方法，出自论文：&lt;em&gt;Akenine-M, Ller T . Fast 3D triangle-box overlap testing. A. K. Peters, Ltd. 2002.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="graphic" scheme="http://cniter.github.io/tags/graphic/"/>
    
      <category term="algorithm" scheme="http://cniter.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>网页菜单纯 css 实现</title>
    <link href="http://cniter.github.io/posts/70a807da.html"/>
    <id>http://cniter.github.io/posts/70a807da.html</id>
    <published>2019-10-28T02:18:36.000Z</published>
    <updated>2019-11-28T11:44:43.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　最近搞了些前端的工作，本来做菜单栏的时候想直接用 bootstrap 的，但是感觉 bootstrap 太大了，而且依赖有点多，在 webpack 中也不是很好打包（虽然可以绕过去），所以就索性自己在网上找了一些实现方式，改改感觉也还可以。这次主要实现了两种菜单栏，具体如下。</p><a id="more"></a><h2 id="鼠标悬停下拉菜单">鼠标悬停下拉菜单</h2><p>　　鼠标悬停下拉菜单应该是最常见的一种菜单栏了，当鼠标悬停在菜单栏上时，子菜单缓缓下拉，看起来就很舒服，用 flex 布局结合列表也很好实现（不用像以前那种 <code>float</code> 了，舒服）。具体实现方式如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="HTML"><figure class="highlight hljs html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.flex-body</span> &#123;</span></div><div class="line"><span class="undefined">        display: flex;</span></div><div class="line"><span class="undefined">        flex-direction: column;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    header &#123;</span></div><div class="line"><span class="undefined">        z-index: 1;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul,</span></div><div class="line"><span class="undefined">    ul li &#123;</span></div><div class="line"><span class="undefined">        list-style: none;</span></div><div class="line"><span class="undefined">        margin: 0;</span></div><div class="line"><span class="undefined">        padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu</span> &#123;</span></div><div class="line"><span class="undefined">        display: flex;</span></div><div class="line"><span class="undefined">        justify-content: start;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ul li &#123;</span></div><div class="line"><span class="undefined">        width: 100px;</span></div><div class="line"><span class="undefined">        height: 50px;</span></div><div class="line"><span class="undefined">        line-height: 50px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-class">.submenu</span> &#123;</span></div><div class="line"><span class="css">        <span class="comment">/* display: none; */</span></span></div><div class="line"><span class="undefined">        background-color: aqua;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.submenu</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">        height: 0;</span></div><div class="line"><span class="undefined">        line-height: 0;</span></div><div class="line"><span class="undefined">        opacity: 0;</span></div><div class="line"><span class="undefined">        visibility: hidden;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.submenu</span> <span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="css">        <span class="comment">/* display: block; */</span></span></div><div class="line"><span class="undefined">        height: 50px;</span></div><div class="line"><span class="undefined">        line-height: 50px;</span></div><div class="line"><span class="undefined">        opacity: 1;</span></div><div class="line"><span class="undefined">        visibility: visible;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-body"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span>&gt;</span>menu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"submenu"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span>&gt;</span>menu2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"submenu"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span>&gt;</span>menu3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"submenu"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>submenu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span>mainmainmainmainmainmainmainmainmainmain<span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></div><p>　　<strong><em>※注：</em></strong> 实现该菜单栏有两个需要注意的点：1、不能用 <code>display: none</code> 和 <code>block</code> 来使子菜单消失或出现，因为这样会造成缓缓下拉的动画失效，<code>transition</code> 并不支持 <code>display</code>，所以只能用 <code>visibility</code> 和 <code>height</code> 来共同实现，以达到下拉动画效果；2、因为使用了 <code>flex</code> 布局，所以 <code>z-index</code> 只对同级 <code>flex-item</code> 有效，所以为防止菜单栏下面的内容出现在子菜单之上，即将子菜单栏位于最上层，需要将整个页面的布局都设置为 <code>flex</code>，并使 <code>header</code> 的 <code>z-index</code> 最大，如此才能保证子菜单的菜单覆盖 <code>main</code> 中的内容，不然就会有重叠干扰现象。</p><h2 id="鼠标点击手风琴菜单">鼠标点击手风琴菜单</h2><p>　　手风琴特效也算是非常常见的了，一般的手风琴是鼠标悬停展开，这种比较好实现，难的是如何保持这种展开状态，<code>focus</code> 可以短暂保持展开状态，但是不能点击其他地方，局限性太大。所以需要引入其它的东西来记录这种展开状态，可以用 <code>checkbox</code> 或 <code>radio</code> 的 <code>checked</code> 来记录这种状态，从而只用 css 即可实现该菜单，具体实现如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="HTML"><figure class="highlight hljs html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[data-prop="menu-recorder"]</span> &#123;</span></div><div class="line"><span class="undefined">        display: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-title</span> &#123;</span></div><div class="line"><span class="undefined">        display: block;</span></div><div class="line"><span class="undefined">        width: 500px;</span></div><div class="line"><span class="undefined">        height: 50px;</span></div><div class="line"><span class="undefined">        line-height: 50px;</span></div><div class="line"><span class="undefined">        border: 1px solid black;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-content</span> &#123;</span></div><div class="line"><span class="undefined">        width: 500px;</span></div><div class="line"><span class="undefined">        max-height: 100px;</span></div><div class="line"><span class="undefined">        overflow-y: auto;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-content</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">        height: 0;</span></div><div class="line"><span class="undefined">        line-height: 20px;</span></div><div class="line"><span class="undefined">        overflow: auto;</span></div><div class="line"><span class="undefined">        opacity: 0;</span></div><div class="line"><span class="undefined">        visibility: hidden;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[data-prop="menu-recorder"]</span><span class="selector-pseudo">:checked+.menu-content</span>&gt;<span class="selector-tag">li</span> &#123;</span></div><div class="line"><span class="undefined">        height: 20px;</span></div><div class="line"><span class="undefined">        line-height: 20px;</span></div><div class="line"><span class="undefined">        opacity: 1;</span></div><div class="line"><span class="undefined">        visibility: visible;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"accordion-menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu1"</span>&gt;</span>menu1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu1"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu2"</span>&gt;</span>menu2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu2"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu3"</span>&gt;</span>menu3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu3"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu4"</span>&gt;</span>menu4<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu4"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></div><p>　　这里需要注意一点的就是 height 从 0 到 100% 并不会触发 transition 渐变动画，而是需要确切的高度值变化才能触发，所以上文这里添加了个 <code>&lt;li&gt;</code> 标签，直接在该标签上添加动画，还有一种就是在 <code>.menu-content</code> 上设定确定的 <code>max-height</code>，也能触发动画，但是有个缺点就是前后 <code>max-height</code> 的差距太大时，动画效果就很不理想了，这时可能只能依靠 js 了。上文中 <code>checkbox</code> 也可用 <code>radio</code> 替换，效果略有差异，一个是能全部展开或收起，而另一个则是能且仅能展开一个。</p><h2 id="tab-标签页切换菜单">Tab 标签页切换菜单</h2><p>　　这个菜单和上面那个菜单的实现非常相似，先上代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="HTML"><figure class="highlight hljs html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.tab-menu</span> &#123;</span></div><div class="line"><span class="undefined">        display: flex;</span></div><div class="line"><span class="undefined">        position: relative;</span></div><div class="line"><span class="undefined">        width: 500px;</span></div><div class="line"><span class="undefined">        height: 300px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[data-prop="menu-recorder"]</span> &#123;</span></div><div class="line"><span class="undefined">        display: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-title</span> &#123;</span></div><div class="line"><span class="undefined">        display: block;</span></div><div class="line"><span class="undefined">        width: 100px;</span></div><div class="line"><span class="undefined">        line-height: 50px;</span></div><div class="line"><span class="undefined">        text-align: center;</span></div><div class="line"><span class="undefined">        border: 1px solid black;</span></div><div class="line"><span class="undefined">        border-right: 0;</span></div><div class="line"><span class="undefined">        box-sizing: border-box;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.tab-menu</span> <span class="selector-class">.menu-item</span><span class="selector-pseudo">:last-child</span> <span class="selector-class">.menu-title</span> &#123;</span></div><div class="line"><span class="undefined">        border-right: 1px solid black;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.menu-content</span> &#123;</span></div><div class="line"><span class="undefined">        position: absolute;</span></div><div class="line"><span class="undefined">        left: 0;</span></div><div class="line"><span class="undefined">        top: 51px;</span></div><div class="line"><span class="undefined">        height: calc(100% - 50px);</span></div><div class="line"><span class="undefined">        overflow-y: auto;</span></div><div class="line"><span class="undefined">        width: 100%;</span></div><div class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></div><div class="line"><span class="undefined">        box-sizing: border-box;</span></div><div class="line"><span class="undefined">        font-size: 24px;</span></div><div class="line"><span class="undefined">        text-align: center;</span></div><div class="line"><span class="undefined">        opacity: 0;</span></div><div class="line"><span class="undefined">        visibility: hidden;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-attr">[data-prop="menu-recorder"]</span><span class="selector-pseudo">:checked+.menu-content</span> &#123;</span></div><div class="line"><span class="undefined">        opacity: 1;</span></div><div class="line"><span class="undefined">        visibility: visible;</span></div><div class="line"><span class="undefined">        transition: all 1s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu1"</span>&gt;</span>menu1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu1"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"tab-control"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu2"</span>&gt;</span>menu2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu2"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"tab-control"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu3"</span>&gt;</span>menu3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu3"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"tab-control"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"menu-title"</span> <span class="attr">for</span>=<span class="string">"menu4"</span>&gt;</span>menu4<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"menu4"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"tab-control"</span> <span class="attr">data-prop</span>=<span class="string">"menu-recorder"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></div><p>　　从代码上看关键点就是 <code>.menu-content</code> 的定位方式了，采用了绝对定位，并将整个菜单栏设置为相对定位，以保证所有 tab 标签页内容位置和大小保持一致。当然 tab 标签页肯定是唯一的，所以只能用 <code>radio</code> 记录显示标签页了。其中为了保证 <code>.menu-title</code> 和 <code>.menu-content</code> 的边框不重叠，所以在 <code>.menu-title</code> 中只设置 <code>line-height</code>，而 <code>.menu-content</code> 的 <code>top</code> 比其多一个像素。</p><h2 id="后记">后记</h2><p>　　这三种菜单应该是最常见也是用的最多的了，纯 css 实现的方式也比较类似，无非就是 flex 布局以及借助 css3 强大的选择器功能（父类选择器不知要到猴年马月了，比较遗憾 😥），就能相对简单的实现了，当然借助一些 js 库或框架可能会更简单一些 ，但能用 css 为何不用呢 😄。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://blog.csdn.net/colorfulqq/article/details/79886331" target="_blank" rel="external">利用flex实现的二级导航栏</a></p><p>[2] <a href="https://blog.csdn.net/touchingt/article/details/48630291" target="_blank" rel="external">CSS3动画下拉菜单（当transition遇到display的坑）</a></p><p>[3] <a href="https://www.jqhtml.com/962.html" target="_blank" rel="external">CSS3手风琴下拉菜单</a></p><p>[4] <a href="https://www.jianshu.com/p/cc0ac7845ded" target="_blank" rel="external">教你两招用纯CSS写Tab切换</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　最近搞了些前端的工作，本来做菜单栏的时候想直接用 bootstrap 的，但是感觉 bootstrap 太大了，而且依赖有点多，在 webpack 中也不是很好打包（虽然可以绕过去），所以就索性自己在网上找了一些实现方式，改改感觉也还可以。这次主要实现了两种菜单栏，具体如下。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="css" scheme="http://cniter.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>个人游记</title>
    <link href="http://cniter.github.io/posts/abe58f8c.html"/>
    <id>http://cniter.github.io/posts/abe58f8c.html</id>
    <published>2019-05-26T15:28:32.000Z</published>
    <updated>2019-08-08T15:31:25.498Z</updated>
    
    <content type="html"><![CDATA[<p>　　简单的记录一下个人游记吧。</p><a id="more"></a><h2 id="张家界两日游">张家界两日游</h2><h3 id="前言">前言</h3><p>　　端午节前一个星期，正好也做完了人生中的一件大事，遂和小伙伴们来了场说走就就走的旅行，也是 Shaun 人生中第一次正式旅行吧，直接定好晚上的火车票，睡一觉，到张家界的时候正好是中午。</p><h3 id="旅程篇">旅程篇</h3><h4 id="第一天下午">第一天下午</h4><p>　　在火车站附近简单的吃了个三下锅，就 Shaun 感觉是个大杂烩，里面就是些很常见的菜混合在一起，当然也可能吃的不正宗，然后决定先去天门山，在美团上看票，发现需要提前一天，于是决定直接去售票处买票，去的过程中差点被无良司机坑了，就几百米的路还要收 10 块钱，幸好问了饭店老板，知道直接去<strong>索道公司</strong>买票就行，地图搜索，买票点离火车站就几百米，遂一行人步行过去，到索道公司的时候发现这里的票价和美团上的价格是一样的，不亏，于是选了A线：索道上山，大巴下山，由于时间关系，只走了天门山的 3/4 吧，基本算是匆忙转了一圈，顺便花 5 块钱走了下西边的玻璃栈道，说实话对玻璃栈道还是挺失望的，由于走的人太多了，玻璃表面都磨花了，下面的景色看不清楚，刺激感也少了许多，5 点半左右，快下山的时候，突然下起了大雨，此时走步行的天梯下天门有点危险，不得已只能每人花 30 块钱坐电梯（这是在天门山游玩花的最不值的一笔钱 (╯‵□′)╯︵┻━┻），因为在下山到天门的那一段路就是一段很长很长的山内电梯，这种感觉已经体验到了，到时步行下天梯的感觉想尝试一下，奈何天公不作美。等到完全走完电梯的时候，开始上巴士，天门山的雨又停了，也是醉了 😓。接下来，就是 Shaun 坐得最爽的一次巴士了，秋名山和天门山的天路简直不是一个档次的，五连发卡弯和天路相比也不算什么，这里的盘山公路从索道上看起来非常漂亮，但真正坐巴士在盘山公路上走的时候，就会发现，巴士司机才是真正的车神，这车坐的可以说是非常刺激了。</p><h4 id="第一天晚上">第一天晚上</h4><p>　　走了一下午路，人都疲了，就在市区吃了个自助餐，也不好吃，随后讨论了下第二天的行程，由于时间关系，张家界大峡谷（有玻璃桥的那个景区）和张家界的武陵源（最大最有名的景区） 只能选择去一个了，考虑到张家界大峡谷离市区太远而且没去武陵源何谈到张家界玩，所以最终选择了武陵源，武陵源的门票有 3 天的有效期（可以游玩三天，后面进景区发现，若真要慢慢游玩，3 天还不一定能玩完），因为这景区非常大，所以还有年票卖 😂（一年的有效期）。于是当晚吃完饭就联系了个武陵源景区附近的一个客栈，顺便让客栈的老板叫辆车接我们过去，到客栈的时候都已经11点了，客栈老板问了下我们的时间安排，于是给我们安排了下游玩路线，老板顺便做起了导游的生意，由于我们人多，老板就没另收导游费了，因为当地人买索道票价格是半价的，所以这足以让老板赚上一笔，谈好生意后，就洗澡睡觉了。</p><h4 id="第二天全天">第二天全天</h4><p>　　因为和老板约好几点去买门票，所以就大早起床了，顺便买了些午餐，因为中午肯定还在山上，没记错的话，武陵源景区共有3个索道：黄石寨索道、杨家界索道和天子山索道。其中黄石寨索道可坐可不坐，如果准备一天的时间玩黄石寨可以不坐索道，徒步也行，但杨家界索道必须得坐，因为这是去杨家界的必经之路，徒步是到不了的，当然可以也可以在景区外包车去杨家界，因为徒步基本不可行，所以老板就推荐我们坐索道上去，然后包车下来，这样更划算一些（我们人多），车也是老板帮忙叫的，由于选择了包车下来，所以也就没坐天子山索道了，因为天子山索道比较特殊，它的索道下站是在景区外面，到时又要打车到客栈。老板让我们在景区门外一个地方买完门票之后（导游可以便宜几块购买门票），拿着门票就进进去了，第一个地方去的地方是黄石寨，由于赶时间所以买了双程票，索道上和索道下，大约玩了黄石寨 1/3 的地方，就下来了，又坐景区大巴赶往杨家界索道，坐索道去杨家界，主要看了个个天波府，然后坐景区大巴去袁家界，看了天下第一桥和阿凡达的取景地，最后坐大巴去了天子山，天子山上的天子阁我们刚到的时候正好关门 😔，没办法只好去贺龙公园下的观景台了，但是时机也不好，看不到云海，只能看看石柱山了，看完之后，天色也不晚了，老板也催着我们赶快坐车回去了，包车的那人在等了。虽然坐了索道，但还是走了一天，全员都乏了，不想去第三天的金鞭溪了，但是好不容易出来一趟，又硬着头皮上了。</p><h4 id="第三天上午">第三天上午</h4><p>　　本来老板说好的提前两小时带我们进景区，游完金鞭溪还能去看看十里画廊，但因为一些小插曲，我们最后还是只能准点进景区，搞得我们在外面冻了半个多小时（那天早上很冷），我们徒步金鞭溪，以为会有景区大巴回到起点，但是没想到，我们走了一上午走完金鞭溪，发现前头确实有个景区车站，但是不能直接到我们来的那个起点，可能要绕很长一段距离，基于这些不确定性，最终还是决定原路返回，加快速度也要走近两小时，本来就已经很累了，这非常难受了，但没办法，定的火车票就在下午，周一还要赶回去上班 /(ㄒoㄒ)/~~。最后还是比较顺利的坐上了景区到火车站的中巴车，顺利的赶上了火车。</p><h3 id="感想篇">感想篇</h3><p>　　这次游玩张家界，感觉天门山虽小，但是比武陵源好玩多了，主要是武陵源的山千遍一律，黄石寨就围绕一座山有几十个景点，也是绝了 🙄。杨家界的天波府虽然难上，但上去还是很值得的，袁家界的猴子很多，运气好的话，能看到猴子在树上跳来跳去的，就像杂耍一样，袁家界比杨家界要更值得一去。天子山其实就一个观景台够看，但也要好时机，如果有云海的话相信是武陵源最漂亮的一个景点之一。在袁家界有个比较坑的产品，叫 把你的名字用一幅画写出来，那个人在我们外行人眼里看来还是很厉害的，边画的时候还会说很多吉祥话，这幅画只卖 5 块，怎么样，还是很值得吧 🙃，但是等画完之后，那人会叫你去后面胶缝，不然就花了嘛，胶缝 20 多块，但是不胶缝，5 块钱就白花了，这要明说还好，毕竟这手艺应该也值这价，但这样暗地里搞事就很没意思了。还有一种晶莹剔透的粉色水果，看起来非常漂亮，说是张家界的特产，但是很贵，Shaun 就只能远远的看着，后面查了下发现这就是传说中的金西梅 (¬◡¬)✧。</p><h3 id="后记">后记</h3><p>　　总而言之，张家界还是挺值得一去的，就是要规划好路线和时间，一天半的时间，武陵源景区大概只玩了 1/2 不到，还是算走的快的了 ( ╯□╰ )。其实原来不去黄石寨的话，直接去杨家界，然后坐天子山索道下来，再坐景区大巴到金鞭溪和十里画廊的交界处感觉会更好些。</p><h2 id="桂林两日游">桂林两日游</h2><h3 id="前言-1">前言</h3><p>　　人生终于告一段落了，要开始新的阶段了，于是决定趁着退休前的最后一次真正意义上自由自在的长假出去玩一下，虽然想玩的想法早就有了，但一直没想好去什么地方，邻近放假前两天才想好去桂林，于是匆忙查了下桂林的景点以及买了火车票，简单的规划了一下路线，就出发了，剩下的到了桂林再说。</p><h3 id="旅程篇-1">旅程篇</h3><h4 id="第一天上午">第一天上午</h4><p>　　前一天晚上在上火车的时候就决定先去阳朔玩玩，于是就在 X团 上买了桂林到阳朔的船票，晚上的时候，旅游公司打来电话确定明天的接送大巴地点和时间，正好是早上的时候到桂林，也能赶上接送大巴，所以就决定坐他们的大巴去码头坐船了，在等大巴的时候，顺便花 5 块钱吃了正宗的桂林米粉以及在虞山公园里转了一圈。等到坐上大巴的时候，导游开始推荐特色食物了，先是试吃环节，可是 Shaun 就一个人去玩，导游就直接把 Shaun 忽略了，独游没人权吗？连个试吃的机会都不给 😥。送到码头之后，导游帮我们把船票取了，上了船之后，这船坐起来还行，比 Shaun 以前在宜昌去三峡坐的船确实要好很多，在没坐船之前，导游一直在推销升舱，即从一楼升到二楼，到了船上之后，发现一楼和二楼没什么两样，无非就是二楼更高一点，但要看到好点的景色还是要到三楼甲板上，当然二楼甲板也能看，游客能随便选择去哪，所以升舱的意义确实不大。经过近四个小时，船终于到了阳朔，这中间主要是看了下漓江周围的山，最有名的应该就是 20 元人民币的背景和九马画山了，至于漓江的水，由于去的时机不对，没法看。</p><h4 id="第一天下午和晚上">第一天下午和晚上</h4><p>　　本来第一天下午的行程没想好，后来坐大巴到码头的时候听到导游说，他们下午会去银子岩，于是 Shaun 也就到美团上买了阳朔到银子岩的票，于是下午中午到了阳朔时就坐大巴跟随另一个导游去银子岩，同样导游在车上也推荐了同样的食品，这次到没有忽略 Shaun，还是给试吃了下，味道也还行，就是太贵了，后来 Shaun 偷偷的在淘宝上搜了下，淘宝上的价格和导游给的价格一样。经过近一个小时到了银子岩，银子岩这个景点其实不归阳朔管，属于另一个县，本以为在山洞里会凉爽一些，但可能是由于人太多了，也可能是当天的天气原因，导致里面比外面还要闷热，幸好里面有很多台风扇，不然真有人可能会在里面中暑了，里面的景色确实还可以，灯光打的也不错 ๑乛◡乛๑。银子岩有着和张家界同样的套路：一样的金西梅，一样的名字作画，也是有意思。</p><p>　　从银子岩出来再坐原来的大巴到阳朔，在车上用飞猪定了个青年旅社，于是到阳朔的时候，就直奔那个青旅了，把背包放下，出去吃了个简单的晚餐，在回到青旅小睡了下，时间正好来到了晚上 8 点，可以去逛逛大名鼎鼎的阳朔西街了。来到西街，如果说白天的西街是死的，那么晚上的西街就是活的，这差距太大了，可能同样是时机不对，并没有出现人挤人的情况，但里面的人还是很多，歪果仁也不少，酒吧里的小姐姐也很可以。逛完阳朔西街给我留下最深印象的就是音乐喷泉的老板很有意思，很会招揽顾客，又不至于让顾客下不了台，就图个乐呵；比较后悔的就是没有拍一个陈文令的雕塑，主要原因是当时进西街的时候，就看到个小红人，以为就是个很普通的雕塑，根本没预料到这种雕塑遍布西街，是一个系列，所以就完全没有拍照的想法，又加上后面再看到的时候，感觉前面的都没拍，所以这个也就不拍了，导致一个都没拍，包括那些克苏鲁风格的也没拍。从西街回到青旅，已经快 11 点了，于是赶忙准备下明天的行程，在美团上看了下，就决定直接报个完整的跟团游，首先去十里画廊，再去遇龙河漂流，最后去世外桃源。下了单之后，就简单的洗了个澡睡觉了，毕竟逛了一天也累了。</p><h4 id="第二天白天">第二天白天</h4><p>　　跟随这次旅途中的第三个也是最后一个导游，先坐大巴来到了十里画廊，导游在大巴上告诉我们，吃啤酒鱼就要去西街上装饰最好的地方去吃，那样才能彰显自己的壕气 ๑乛◡乛๑，导游还告诉我们今天到十里画廊的朋友坐了全世界最贵的一趟的大巴，仅 20 分钟的路程就要 60 块，因为十里画廊是不要门票的，就只要花 20 块钱买张公交通票就行，哭唧唧 (ノへ￣、)，到了十里画廊，导游帮我们买好通票之后就带另一批人去往银子岩了。Shaun 就坐着十里画廊景区内的公交到处逛了，十里画廊景区还是很大的，远不止十里，那天的天气去十里画廊正好，阴雨朦胧，景区内的月亮山雨雾缭绕，十里画廊周边的景区都是要另外算钱的，而且由于时间关系，所以 Shaun 就也就没进去了，简单的坐车逛了下十里画廊，回到和导游约定地点的时候，已经中午12点，于是导游把我们拉到了一个饭馆吃饭，导游先征求了下我们的意见是吃团餐还是独自解决，因为 Shaun 就一个人，所以还是想跟着大家吃团餐的，但是由于队伍里有一家人共十几个，他们一投票，自然是独自解决了，于是 Shaun 只能和别人搭伙了，于是就吃了顿又贵又难吃的午餐，搭伙的人点菜品味太差劲了，尤其是点了个什么野菜，那还真是野菜啊，就是一个像蒲公英一样的植物，那在 Shaun 老家可是真正的猪食 🤮。</p><p>　　吃完饭就去遇龙河了，但由于当时的天气，导游就预测今天应该是不能漂流了，因为头天晚上下了很大的雨，由于一些原因，导游也不确定是否能漂流，所以他还是带我们先去遇龙河看一下到底能不能漂流，等到了遇龙河，发现果然漂不了，于是导游带着我们徒步了遇龙桥，幸好漂不了，不然 Shaun 还得找人一起搭伙去漂流，因为如果没有两个人一起漂，就得还补一张票，80 块，这 tm 什么鬼，第一次听说有这种情况，来旅个游还必须偶数个人，要是游乐场敢这么搞，早关门倒闭了了，在张家界坐索道的时候也没听说过要把缆车里的人全部坐满，要不然要补票的，这遇龙河真 tm 坑，真的是幸好不能漂。听导游说好像是由于遇龙河以前出过一些事，后面就由上头接管了，所以情况就是这么个情况了。</p><p>　　既然没法漂流了，徒步过遇龙桥之后，导游就带我们去世外桃源了，据导游说世外桃源是当年一个台湾人在这边玩想方便却没有厕所，于是这人就在这里方便一下，方便完之后发现这里景色不错，于是<del>为方便后来人，就在这修了个厕所，顺便</del>圈了块地作为景点 。世外桃源主要是坐船玩，岸上确实没什么好玩的，在坐船的过程中，有一处确实有桃花源记描述的那样，还在出口处搞了些塑料桃花，船上的导游小姐姐说这是四季桃花 ๑乛◡乛๑ 。游玩世外桃源之后，就开始返程了，导游给了两个选择，一个是返回阳朔，另一个是直接返回桂林，Shaun 感觉在阳朔这边也玩够了，于是就回到了桂林，正好游游两江四湖的夜景。</p><h4 id="第二天晚上">第二天晚上</h4><p>　　回到桂林，大巴正好带我们到象山公园附近，本以为在外面也能看到象山，但是周围都被封的严严实实的，就算没有树遮住的地方也会被人工挡住，或许越没有料就越要遮严实点，象山公园的门票又是老贵了，就为了看个象山实在是不值得，而且那天漓江的水还是浑的，所以就只在远处远远的望了下象山。两江四湖最有名的景点当属日月双塔，而这个景点在晚上看更合适一点，又是免费的，所以 Shaun 在远望象山之后就直接去了日月双塔，在晚上灯光的照耀下，日月双塔确实非常漂亮。看完日月双塔，也算是满足了，就决定真正返程了，买好火车票之后，在火车站旁定了个旅馆，简单的洗洗睡了。</p><h3 id="感想篇-1">感想篇</h3><p>　　桂林总的来说要比张家界好玩一点，毕竟有水，而张家界只有山，但是由于 Shaun 去的时机不对，前几桂林正下大雨，漓江的水位上涨，又很浑浊，所以没看到好水还是有点遗憾的。至于景点，银子岩就真是景如其名，景区里面的东西就和银子有关，什么都能牵扯到钱，这也太俗了，Shaun 就想玩玩，谁管赚钱还是花钱（主要是 Shaun 没钱，看到这些虚假的钱就有点烦 ╮(╯▽╰)╭）。十里画廊是免费的，可以随便游玩，里面的景色其实还算可以了，不过周边单独的小景点都是要收费的，而且价格不菲，有些就是度假村一样的地方。至于西街，说实话如果没有那么多酒吧，那么西街应该就是条比较普通的小吃街了，和普通的小吃街一样，里面的东西一般很贵而且不一定好吃。遇龙河，应该最可惜的了，本来 Shaun 已经找到了搭伙人，但是不能漂也是没办法了，算是一个遗憾了，里面公厕据说是收费的，连导游都不放过。如果在世外桃源里不坐船的话那还不如不进去，感觉整个世外桃源的看点都在燕子湖上了。再谈谈桂林市区吧，整个桂林市区给 Shaun 留下的影响极差，Shaun 再桂林市走的时候刚好下过一场大雨，这时桂林市区遍布雷区，下面的铺的地砖基本都是坏的，如果不小心踩到一块中空的地砖，那么恭喜你，该洗鞋洗裤子了，地砖里藏得的脏水会全部溅到裤脚上，那脏水也有很多时米粉店里倒出来的水，又臭又油又脏，城市路面基建也太差劲了，作为一个旅游城市这太不应该了。象山公园的主要一个看点就是象山，但为了尽量不让外地人看到，就圈了超大一个地方作为象山景区，景区内除了象山感觉就没什么好看的了，不过也正好多收点费，一举两得啊，能想出这个点子的人真是个人才啊，希望桂林市多出点这样的人才，努力创收。在最后一个导游那里得知市区里面有个叫 <em>小老弟</em> 的面馆，那里面的米粉非常好吃，但只有早上有，下午就卖其它的小吃了，Shaun 就要走了，所以就没有这个口福了。</p><h3 id="后记-1">后记</h3><p>　　桂林还是很值得去的，主要是一定要选择个好季节和好天气，Shaun 去的时候天气非常热，完全不想出去的那种，所以就只玩了两天，天气不好，出去太累了。桂林的景点非常分散，小景点太贵且又不值得去，所以 Shaun 这次就尽量选择了报团，因为交通出行确实很是个问题，其实如果第一天下午不去银子岩，而是先去十里画廊的话应该就比较完美了，十里画廊和西街挨得很近。<strong><em>切记：如果要去遇龙河漂流的话最好选择偶数个人去桂林</em></strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　简单的记录一下个人游记吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://cniter.github.io/categories/Life/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-chi主题更新小记</title>
    <link href="http://cniter.github.io/posts/26d437be.html"/>
    <id>http://cniter.github.io/posts/26d437be.html</id>
    <published>2019-04-06T09:02:39.000Z</published>
    <updated>2019-05-12T15:15:49.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　Chi 主题的大体结构功能算是写完了，但是还有一些个性化的东西需要添加，所以以后有关于 Chi 主题更新的部分就都写在这里吧。但是由于是 Shaun 个性化定制的一些东西，所以如果不是大 Bug 或大优化的更新，一般就不进 <a href="https://github.com/cniter/hexo-theme-chi" target="_blank" rel="external">Chi 主题仓库</a> 中了。</p><a id="more"></a><h2 id="功能篇">功能篇</h2><h3 id="脚注提示功能">1. 脚注提示功能</h3><p><strong>功能描述：</strong> 鼠标悬停在脚注上即可显示对应脚注内容。 Shaun 的脚注由于是采用 pandoc 渲染的，所以也是属于个性化定制，就不将这个功能放进 Chi 主题仓库中了。</p><p><strong>解决方案：</strong> 还是利用 Bootstrap 的 tooltip 提示插件，具体实现代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="JAVASCRIPT"><figure class="highlight hljs javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'a.footnote-ref'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, elem</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> post_id = $(<span class="keyword">this</span>).parents(<span class="string">'article'</span>).attr(<span class="string">'id'</span>);</div><div class="line">    <span class="keyword">let</span> fn_href = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>);</div><div class="line">    elem.setAttribute(<span class="string">'data-toggle'</span>, <span class="string">'tooltip'</span>);</div><div class="line">    elem.setAttribute(<span class="string">'data-html'</span>, <span class="string">'true'</span>);</div><div class="line">    elem.setAttribute(<span class="string">'title'</span>, $(<span class="string">"#"</span> + post_id + <span class="string">" "</span> + fn_href).html());</div><div class="line">&#125;);</div></pre></td></tr></table></figure></div><p>遍历脚注，先获取文章 id，再获取对应文章下的对应脚注内容，使用 tooltip 提示。</p><h2 id="bug-篇">Bug 篇</h2><h3 id="图片没居中">1. 图片没居中</h3><p><strong>问题描述：</strong> 上次那篇翻译的文章有几张图片，在放置的时候发现图片没有居中，查看代码后发现居中样式没写，但由于其图片标签 <code>&lt;img&gt;</code> 是放在一个 <code>&lt;figure&gt;</code> 标签中，由于不确定是不是 pandoc 渲染的问题，所以就没将这个修正放进 Chi 主题仓库中了。</p><p><strong>解决办法：</strong> 在 <code>style.styl</code> 文件中添加样式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="CSS"><figure class="highlight hljs css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">figure</span> &#123;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>即可让图片居中。</p><h2 id="动画篇">动画篇</h2><h3 id="鼠标跟随动画">1. 鼠标跟随动画</h3><p>　　其实一直都想把『奥日与黑暗森林』中的鼠标轨迹特效移植过来，但是苦于水平有限，一直没法做到，恰好 19 年 StackOverflow 的愚人节彩蛋中有个鼠标跟随动画很有意思，有好事者还专门将该彩蛋做了个脚本：<a href="https://meta.stackexchange.com/questions/326037/will-there-be-an-option-to-permanently-keep-this-years-april-fools-design-activ" target="_blank" rel="external">Will there be an option to permanently keep this year’s April Fools design active?</a> 。查看代码，知道实现原理后，发现用 jQuery 和 CSS3 实现一个类似的效果也不算很难，于是 Shaun 就尝试做了一下，并简单的美化了一下，感觉效果还行，就加到自己的个性化主题上了。至于在 Chrome 中的小尾巴和 Firefox 中的卡顿现象，是 Shaun 故意的，因为 Shaun 觉得这个小尾巴很有意思，从这个动画看，Chrome 确实比 Firefox 要流畅一点。最终实现代码如下：</p><p>css 代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="CSS"><figure class="highlight hljs css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cursor-trail--item</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">pointer-events</span>: none;</div><div class="line">    <span class="attribute">touch-action</span>: none;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">9999999</span>;</div><div class="line">    <span class="attribute">will-change</span>: transform;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(186, 227, 240, 0.1);</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#6CC2F8</span>;</div><div class="line">    <span class="attribute">-webkit-animation</span>: cursorTrail <span class="number">0.9s</span> ease;</div><div class="line">    <span class="attribute">animation</span>: cursorTrail <span class="number">0.9s</span> ease;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> cursorTrail &#123;</div><div class="line">    0% &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    20% &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">0.5</span>;</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(5);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    100% &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3D</span>(0, -20px, 0) <span class="built_in">scale</span>(1) <span class="built_in">rotate</span>(90deg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>js 代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="JAVASCRIPT"><figure class="highlight hljs javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.time &amp;&amp; (<span class="built_in">Date</span>.now() - <span class="keyword">this</span>.time) &lt; <span class="number">16</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">this</span>.time = <span class="built_in">Date</span>.now();</div><div class="line">    <span class="keyword">let</span> trail_character = <span class="string">'•'</span>;</div><div class="line">    <span class="keyword">let</span> mouse_x = e.originalEvent.x || e.originalEvent.layerX || <span class="number">0</span>; </div><div class="line">    <span class="keyword">let</span> mouse_y = e.originalEvent.y || e.originalEvent.layerY || <span class="number">0</span>;</div><div class="line">    mouse_x = mouse_x + <span class="number">20</span>;</div><div class="line">    mouse_y = mouse_y + <span class="number">26</span>;</div><div class="line">    </div><div class="line"></div><div class="line">    $(<span class="string">'#cursor-trail'</span>).append(</div><div class="line">        <span class="string">'&lt;span class="cursor-trail--item" style="left:'</span> </div><div class="line">        + mouse_x </div><div class="line">        + <span class="string">'px;top:'</span> </div><div class="line">        + mouse_y </div><div class="line">        + <span class="string">'px;"&gt;'</span> </div><div class="line">        + trail_character </div><div class="line">        + <span class="string">'&lt;/span&gt;'</span></div><div class="line">    );</div><div class="line"></div><div class="line">    $(<span class="string">'.cursor-trail--item'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> item = $(<span class="keyword">this</span>);</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">            $(item).remove(); </div><div class="line">        &#125;, <span class="number">900</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></div><p>若不要小尾巴，则只需要将移除元素的时间改快一点就行了，除开上面的代码，还需要在 html 页面中添加一个元素 <code>&lt;span id=&quot;cursor-trail&quot;&gt;&lt;/span&gt;</code> 。</p><h3 id="点击波纹">2. 点击波纹</h3><p>　　一次偶然的机会，看到一篇这样的文章：<a href="https://juejin.im/post/5ba5ab8ce51d450e7762cca5" target="_blank" rel="external">还原一个 Windows 10 Metro 布局</a> 。感觉其中的点击波纹动画很有意思，Shaun 决定把这个动画也放进自己的个性化主题中。至于代码就不贴了，毕竟就是上面文章提供的代码，只是用这个动画的时候发现了 Chrome 的一个问题，就是在进行模糊动画的时候会出现正方形的右边框和下边框，单个模糊不进行动画，不会有边框，进行动画但没模糊也不会有边框，两个同时一起就会出现问题，Firefox 没有这个问题，但 Firefox 存在另一个问题，就是鼠标快速连点的时候，鼠标跟随动画可能会出现问题。浏览器的问题 Shaun 暂时没法解决了，就先这样吧 ╮(╯▽╰)╭。虽然对 Chrome 为啥会出现这样的问题有些猜想，但还是不说出来丢人了，万一不是 Shaun 想的这样就尴尬了 ,,ԾㅂԾ,, 。</p><h2 id="后记">后记</h2><p>有更新再继续更新吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　Chi 主题的大体结构功能算是写完了，但是还有一些个性化的东西需要添加，所以以后有关于 Chi 主题更新的部分就都写在这里吧。但是由于是 Shaun 个性化定制的一些东西，所以如果不是大 Bug 或大优化的更新，一般就不进 &lt;a href=&quot;https://github.com/cniter/hexo-theme-chi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chi 主题仓库&lt;/a&gt; 中了。&lt;/p&gt;
    
    </summary>
    
      <category term="建站小记" scheme="http://cniter.github.io/categories/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>［译］为什么深度学习没有取代传统的计算机视觉</title>
    <link href="http://cniter.github.io/posts/3578e309.html"/>
    <id>http://cniter.github.io/posts/3578e309.html</id>
    <published>2019-03-26T04:50:28.000Z</published>
    <updated>2019-03-26T04:52:57.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　这是一篇<strong>译文</strong>，译自：<a href="http://zbigatron.com/has-deep-learning-superseded-traditional-computer-vision-techniques/?spm=a2c4e.11153940.blogcont543029.21.3ec3c1c3DsQmF2" target="_blank" rel="external">Why Deep Learning Has Not Superseded Traditional Computer Vision</a>，原作者为：<a href="http://zbigatron.com/author/zbigatron/" target="_blank" rel="external">Zbigatron</a> 。Shaun 水平有限，仅供参考学习，更多内容还请自行查看原文。</p><p>至于为什么要翻译这篇文章，算是回答别人的一个问题吧。</p><a id="more"></a><h2 id="为什么深度学习还没有取代传统的计算机视觉">为什么深度学习还没有取代传统的计算机视觉？</h2><figure><img src="http://zbigatron.com/wp-content/uploads/2018/01/scale-done_small.jpg" alt="scale-cv-dl"><figcaption>scale-cv-dl</figcaption></figure><p>　　编写这篇文章的原因是在论坛中经常有人问：深度学习是否取代了传统的计算机视觉？或者类似的问题：深度学习效果这么好，还有继续研究传统计算机视觉的必要？</p><p>　　这是个好问题，深度学习（DL）确实彻底改变了计算机视觉（CV）和人工智能，许多曾经看起来不可能解决的问题都解决了，甚至达到了 <a href="https://www.theguardian.com/global/2015/may/13/baidu-minwa-supercomputer-better-than-humans-recognising-images" target="_blank" rel="external">机器的结果比人类更好</a> 的程度，比如图像分类。正如 <a href="http://zbigatron.com/the-reasons-behind-the-recent-growth-of-computer-vision/" target="_blank" rel="external">我之前讨论的</a>，<strong>深度学习确实为计算机视觉做了很大的贡献</strong>。</p><p>　　但是深度学习只是计算机视觉的一个工具，并不是解决所有问题的万能药，所以，在这篇文章中，<strong>我想详细说明一下为什么传统的计算机视觉仍然非常有用</strong>，并且应该继续学习。</p><p>这篇文章主要有一下几个观点：</p><ul><li>深度学习需要大量数据；</li><li>深度学习有时大材小用了；</li><li>传统的计算机视觉可以辅助深度学习。</li></ul><p>　　但是在我开始讨论这些观点之前，需要先解释一下什么是传统的计算机视觉，什么是深度学习，以及深度学习为何这么 dio。</p><h3 id="背景知识">背景知识</h3><p>　　在深度学习之前，如果要实现图像分类这样的功能，需要首先进行 <a href="https://en.wikipedia.org/wiki/Feature_extraction" target="_blank" rel="external">特征提取</a>。特征即为图像中的信息块，能代表图像的部分信息，可以通过 <a href="https://en.wikipedia.org/wiki/Edge_detection" target="_blank" rel="external">边缘检测</a>，<a href="https://en.wikipedia.org/wiki/Corner_detection" target="_blank" rel="external">角点检测</a>，<a href="https://en.wikipedia.org/wiki/Object_detection" target="_blank" rel="external">物体检测</a> 等技术来提取特征。</p><p>　　在进行特征提取和图像分类之类的工作时，一个想法是从一类对象（例如椅子，马等）的图像中提取尽可能多的特征，并将这些特征视为对象的一种定义（比如 <a href="https://en.wikipedia.org/wiki/Bag-of-words_model_in_computer_vision" target="_blank" rel="external">词袋模型</a>），然后在其他图像中查找这些定义，若另一个图像中的特征和定义的特征很相似，则该图像可能包含该特定的对象（如椅子，马等）。</p><p>　　在图像分类中，这种特征提取的难点在于<strong>每个图像都必须选择哪些特征进行查找</strong>，当需要分类的类别开始增加时，比如 10 或 20 种类别，这种方式将变得很麻烦以至于不可能实现。当然也可以考虑角点、边缘和纹理信息，使用不同的特征可以更好的描述不同类别的对象，但是如果选择使用很多特征，则必须处理大量参数，所有这些参数都必须微调。</p><p>　　深度学习中有一个<strong>端到端学习</strong>的概念，其含义为告诉机器要针对每个特定类别对象<strong>学习</strong>需要查找的特征，它为每个对象设计了最具描述性和显著性的特征，换言之，<strong>告诉神经网络要发现图像中每个类别的基本模式</strong>。</p><p>　　因此，通过端到端学习，不需要再决定使用哪种传统的计算机视觉技术来描述特征，机器自动选择好了，<a href="https://www.wired.com/2016/05/the-end-of-code/" target="_blank" rel="external">Wired magazine</a> 说过：</p><blockquote><p>如果想教一个神经网络识别一只猫，不需要让它寻找胡须、耳朵、皮毛和眼睛，只需要给它大量猫的图像，它就会自动识别猫，若它将狐狸错认成猫，不需要重写代码，只需要继续训练即可。</p></blockquote><p>下图表示了特征提取（使用传统计算机视觉）和端到端学习之间的差异：</p><figure><img src="http://zbigatron.com/wp-content/uploads/2018/03/Screen-Shot-2018-03-16-at-3.06.48-PM.png" alt="traditional-cv-and-dl"><figcaption>traditional-cv-and-dl</figcaption></figure><p>　　以上就是需要的背景知识，下面开始深入探讨为什么传统的计算机视觉仍然有存在的必要。</p><h3 id="深度学习需要大量数据">深度学习需要大量数据</h3><p>　　首先，深度学习需要大量的数据，那些著名的图像分类模型就是在海量数据集上训练的，训练数据集中最大的三个是：</p><ul><li><a href="http://www.image-net.org/" target="_blank" rel="external">ImageNet</a> – <strong>150 万张图片</strong>，包含有 1000 个对象类别；</li><li><a href="http://cocodataset.org/" target="_blank" rel="external">Microsoft Common Objects in Context</a> (COCO) – <strong>250 万张图片</strong>，91 个对象类别；</li><li><a href="http://host.robots.ox.ac.uk/pascal/VOC/" target="_blank" rel="external">PASCAL VOC Dataset</a> – <strong>50 万张图片</strong>，20 个对象类别。</li></ul><p>　　一般的图像分类任务不需要这么多图片，但仍然需要很多，如果没办法获得这么多图片怎么办？我们还是得训练我们所有的数据（有些方法可以增多我们的训练数据，但这些都是人工方法）。但是，没有足够的数据支持，训练出来的模型可能会在训练集之外表现不好，因为机器没有洞察能力，无法对没有的数据进行分类。而且无法直观查看训练好的模型并手动调整里面的数据，因为<strong>深度学习模型里面有数百万个参数</strong>，并且这些参数在训练时会自动微调，某种程度上，深度学习模型就是一个黑盒子。</p><p>　　传统的计算机视觉完全透明，可以很清楚的判断自己的解决方案在训练数据之外是否可行，而且<strong>可以深入了解算法中存在的问题</strong>。如果有没法解决的问题，也可以更容易的找出原因并调整。</p><h3 id="深度学习有时大材小用了">深度学习有时大材小用了</h3><p>　　这可能是我支持传统计算机视觉技术研究的最佳理由。</p><p>　　训练深度神经网络需要很长时间，而且需要专门的硬件（高性能 GPU），如果想在普通的笔记本上训练最先进的图像分类模型，可以去外面玩一个星期，回来之后应该还没训练完 ：) 。而且，如果训练好的模型表现不好怎么办？必须调整训练参数并重新开始训练，这个过程有时会重复数百次。</p><p>　　但有时候使用深度学习是完全没有必要的，因为<strong>有时传统的计算机视觉技术可以比深度学习更有效的解决问题并且代码更少</strong>。比如，我曾经做过一个项目来检测传送带上每个罐头是否都有红色的勺子，解决这个问题可以训练深度神经网络来检测勺子，也可以针对红色编写一个简单的阈值分割算法（红色的某个范围内的像素点为白色，其它像素点为黑色），然后计算有多少个白色像素点，后者明显简单的多，一个小时就完成了。</p><p>　　<strong>了解传统的计算机视觉有时会节省大量时间和避免不必要的麻烦</strong>。</p><h3 id="传统计算机视觉提高改进深度学习技能">传统计算机视觉提高改进深度学习技能</h3><p>　　了解传统的计算机视觉可以帮助我们更好地进行深度学习。</p><p>　　例如，计算机视觉中使用的最常见的神经网络是卷积神经网络。但什么是卷积？它实际上是一种广泛使用的图像处理技术（例如 <a href="https://en.wikipedia.org/wiki/Sobel_operator" target="_blank" rel="external">Sobel边缘检测</a>）。了解这一点可以帮助我们了解神经网络正在做什么，并因此可以更好的设计和调整神经网络来解决问题。</p><p>　　深度学习中还可以对图像进行<strong>预处理</strong>，所谓的预处理是指对训练的数据进行一定的处理（Shaun 注：比如图像增强，图像去噪等），这些预处理操作一般由传统的计算机视觉技术完成，比如：当没有足够的训练数据时，可以使用一种叫<strong>数据增强</strong>的技术，使用数据增强让图像进行旋转，平移，裁剪等操作，从而增加“新”图像，通过执行这些操作，可以成倍的增加训练数据集。</p><h3 id="总结">总结</h3><p>　　在这篇文章中，我解释了为什么深度学习还没有取代传统的计算机视觉技术，因此还需要研究后者。首先我发现了深度学习要想表现的足够好需要大量数据的问题，有时候没法获得大量数据，这时只能用传统计算机视觉技术代替；其次，对于特定的任务，使用深度学习可能大材小用了，传统计算机视觉有时比深度学习更有效且代码量也更少；最后了解传统的计算机视觉可以更好的学习深度学习，因为这可以使我们更好的了解深度学习的内部机制，并且可以使用某些预处理操作来改善深度学习结果。</p><p>　　简而言之，深度学习只是计算机视觉的一个工具，不是万能药，不要只是因为它现在很流行所以使用它，传统的计算机视觉技术仍然十分有用，了解它可以节省时间和避免许多麻烦。</p><h2 id="后记">后记</h2><p>　　翻译这篇文章的原因在于，因为某些原因，Shaun 不得不回答一个 “为什么不用深度学习？” 的问题，虽然这里面有极大的因素是客观原因（设备不够 ╮(╯▽╰)╭），但 Shaun 不能明说，正好在网上看到这篇文章，加上也看到过一个问题（类似于 “既然已经能用深度学习做高层次的工作，为何还要用深度学习做底层的工作？”，比如深度学习能做全景分割（可以说是基本完成了图像理解），为何还要做目标检测，图像分割），预计以后有很大的概率也会被问到，所以就需要借用文中的一些观点来进行回答。至于为啥还要用深度学习做底层的工作，可以这样认为，如果用深度学习做底层工作效果不错的话，应该可以对上层工作进行一些辅助，并且可以为上层工作的做法提供一些新的思路。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　这是一篇&lt;strong&gt;译文&lt;/strong&gt;，译自：&lt;a href=&quot;http://zbigatron.com/has-deep-learning-superseded-traditional-computer-vision-techniques/?spm=a2c4e.11153940.blogcont543029.21.3ec3c1c3DsQmF2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why Deep Learning Has Not Superseded Traditional Computer Vision&lt;/a&gt;，原作者为：&lt;a href=&quot;http://zbigatron.com/author/zbigatron/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zbigatron&lt;/a&gt; 。Shaun 水平有限，仅供参考学习，更多内容还请自行查看原文。&lt;/p&gt;&lt;p&gt;至于为什么要翻译这篇文章，算是回答别人的一个问题吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Share" scheme="http://cniter.github.io/categories/Share/"/>
    
    
      <category term="cv" scheme="http://cniter.github.io/tags/cv/"/>
    
  </entry>
  
  <entry>
    <title>再也不见，18年</title>
    <link href="http://cniter.github.io/posts/37b89a23.html"/>
    <id>http://cniter.github.io/posts/37b89a23.html</id>
    <published>2019-02-28T02:18:36.000Z</published>
    <updated>2019-03-26T04:45:51.162Z</updated>
    
    <content type="html"><![CDATA[<p>　　转眼间，19 年也过去了两个月，迟来的 18 年小结还是得来。</p><a id="more"></a><p>　　18 年，感觉自己成长不大，该了解的在去年就了解的差不多，18 年了解的程度也并没有怎么加深，不了解的，18 年还是不了解。<strong>果然要想成长的更快些，了解的更多些，还是得去一个完全崭新的环境</strong>。</p><p>　　18 年，被老板派出去做事了，前前后后应该有三个多月，要说这三个多月完全没有成长，那也是不可能的，毕竟是一个完全崭新的环境，在那里面也做了一些粗浅的事（整整 Android，整整 C#， 整整 SQL Server 存储过程等等），也基本了解了一些在外面做事的一些规则，初步了解了全干工程师的痛苦，了解了被业务捆绑的码农的无奈，了解了有一个好领导是多么重要，……。</p><p>　　总之要说 Shaun 在 18 年哪段时间成长的最快，那无疑是这三个月了。在这三个月中，Shaun 从一个 Android 小白，成长为一个能解决 Android 各项问题的小白（好吧，还是小白 o(╯□╰)o，这里不得不插一句，Android 的各项兼容性真痛苦，简直比之 Web 前端兼容 IE 6 也不遑多让，同做 IOS 的那位童鞋就没这种烦恼了），从一个完全不会 C# 的到一个不怎么会 C# 的（好吧，确实在那里也没写过几行 C#，做最多的 C# 相关事情就是维护和重做几个零几年的水晶报表，照着前人写的代码实现并维护一些小功能），从一个完全不会存储过程的小白到熟练使用各种触发器各种游标各种联合查询语句的小白，……，鬼知道 Shaun 经历了什么 ⊙﹏⊙。</p><p>　　3 个多月的外包全栈（gan）工程师体验，总体来说还是学到了一些东西，见识到了外面的一些人，一些事，最深刻的体会就是大部分程序员的代码终究是为业务需求服务的，同时也体会到<strong><em>完全</em>被业务捆绑的悲哀</strong>，业务需求是咋样的，代码就是咋样的，只不过不同的思维方式，会造成实现的方式的不同，而考虑不全面的代码，在后续使用中就极有可能会出现一些问题，最有可能的一个问题，就是 SQL 执行缓慢导致的一系列问题。还有一个问题就是，<strong>健全的文档很重要</strong>，别和 Shaun 扯什么「代码即文档」，当代码一团混乱，又没有文档，开发人员一波接一波的来来走走，会有人完全知道这个项目的具体实现方式也怕是有鬼了，这样的项目维护起来实在是太困难了。以后再有人和 Shaun 说「不懂的去看代码啊，代码里面什么都有」，怕不是要被 Shaun 打出屎来 (￣ε(#￣)☆╰╮(￣▽￣///)。Shaun 相信，真能写出代码即文档的人，在正规的开发流程下，也是会留下文档的。</p><p>　　18 年，收获最大的应该是提前了解了一些人性的恶，也真正见识到了「人前笑嘻嘻，背后捅刀子」的事。一个看起来还算和蔼的人，却是如此的小心眼，背地里一肚子坏水，就因为一些技术上的问题讨论，驳了 ta 的意思，就玩些不上台面的小把戏，呵，有意思的人啊。技术上的问题，就算从来一次，Shaun 还是要问个为什么，虽然 Shaun 碍于目前的眼界学识，对业务的了解程度，无法给出一些非常有用的建议，但是业务的实现，实现方式的好坏，Shaun 还是有基本的判断能力的，总不能说什么就做什么吧。</p><p>　　18 年初发生的一些事基本已经忘记了，年中的一些事也快忘了，有些事情不出意外还是会重复发生的，毕竟人类的本质就是复读机 ๑乛◡乛๑，太阳底下也很少有新鲜事，不过还好「暴走·大事件·第六季· 05 总结2018感谢有你陪伴，2019我们再出发！」这一期盘点了 18 年发生的一些事，虽然还有些事没有说，因为如果说了可能大概率已经被和谐了，毕竟有些事不存在了就可以当没发生过嘛 ╮(￣▽￣&quot;)╭ 。不过反正这些事总还是会以某种形式再次发生的，只是看什么时候发生，发生在谁身上而已，Shaun 能做的，就是尽量避免这些事发生在自己身上，反正 Shaun 个人也无法改变什么，普罗大众也乐得逍遥自在。</p><p>　　算了，就写到这里了，18 年确实没有什么值得称道的事 o(︶︿︶)o 。</p><div style="text-align:center;font-family:Allura,Consolas,Helvetica,Tahoma,Arial,Microsoft YaHei,微软雅黑,SimSun,宋体,Heiti,黑体,sans-serif;font-size:1.3em;color:#4094c3;font-weight:700;margin:.5em auto">18 年获得技能：<strong><em>废人一个</em></strong><br>18 年获得成就：<strong><em>毫无成就</em></strong></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　转眼间，19 年也过去了两个月，迟来的 18 年小结还是得来。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://cniter.github.io/categories/Life/"/>
    
    
      <category term="thought" scheme="http://cniter.github.io/tags/thought/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-chi主题开发小记</title>
    <link href="http://cniter.github.io/posts/ac4679b5.html"/>
    <id>http://cniter.github.io/posts/ac4679b5.html</id>
    <published>2019-02-20T10:53:49.000Z</published>
    <updated>2019-02-26T13:21:17.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　2019 年 2 月 20 日，Shaun 的站点主题终于完成了，终于能用上自己的主题了，开心 ～(￣▽￣～)。</p><a id="more"></a><p>　　在网上看到的建议都是多写内容少整主题，但强迫症表示受不了，Shaun 就是想要一个自己的主题，自己怎么看着舒服就怎么来，即使没有一个访客，至少也要让自己看着舒服，自己想怎么设计就怎么设计，想用什么技术就用什么技术，想怎么排版就怎么排版，尽量少受写约束，总而言之，Shaun 喜欢自由。</p><h2 id="回顾篇">回顾篇</h2><p>　　自己写主题的想法由来已久，应该是从 17 年 12 月份开始的吧，当时就感觉自己魔改的 spfk_x 主题只能勉强符合自己的需求，但是因为已经用的是别人已经完成的框架，大体框架也不好做太多修改（如果要改的话还不如自己重新写一个），而且里面由于经手太多人的修改，里面的代码结构在 Shaun 看起来有点混乱，而且有很多冗余的代码，有些代码甚至完全没有用上，导致修改起来有点麻烦。</p><p>　　至于为什么不在 17 年寒假期间就开始写，而要拖到 18 年 12 月份才开始动手，一部分原因是 Shaun 的拖延症，一部分原因是还没具体想好该怎么布局，该用什么技术，还有一部分就是外在客观原因了。</p><p>　　18 年 12 月份开始动手写，是因为这段时间稍显空闲，虽然白天还是一样的忙，但至少没那么多心里负担了，而且此时 Shaun 对于自己想要的大体布局已经十分清楚了（虽然一些具体细节还没不是那么清楚），所以就趁着晚上有时间写写，有时候晚上高兴或没事干就写写，有时候没想法或还没想好具体怎么实现就不写，就这样断断续续的写，总算在 19 年 2 月完成了。</p><p>　　本来想在 19 年之前完成的，可是由于本人的拖延症和一些客观原因，还是超期了很久，侯世达定律总是存在的（ sigh~😔），不过总的开发时间也差不多是一个月吧。感觉花费这一个月的晚上时间还是挺值得的，虽然从中学到的东西不多，但总算也有点自己的东西了。</p><h2 id="实现篇">实现篇</h2><p>　　既然要开始写主题了，首先当然要想一个主题名字，本来最初是直接取原来主题的首尾字母作为名字，但后面想了想感觉有点不对劲，有点骂人的意味在里面 (´ ; ω ; `)，后面又想了想，就用尾字母 X 算了，反正站点图标也是那个，后面感觉还是不好，单字母太单一了，后面突然想到希腊字母，就以希腊字母的英语命名了。</p><p>　　名字想好之后，就要决定用什么技术了，由于 Shaun 只是一个前端小白，无论用什么技术对 Shaun 来说难度都差不多，Shaun 理想的主题是能够支持响应式的，所以为了尽可能简单的支持响应式，CSS 方面的库就采用 Bootstrap4，CSS 预处理器当然是用 Stylus 了， JS 方面最令 Shaun 纠结，到底是采用现代的 Vue 还是传统的 jQuery，最终从相对熟悉程度和相关资料广度方面考虑，Shaun 最终选择了 jQuery3（以后有机会再尝试一下 Vue 吧），接下来要选择的是 Node.js 模板引擎，候选的主要有三个 EJS、Swig 和 Jade（现已更名Pug），Shaun 原来的主题是用 EJS 的，著名的 NexT 主题用的 Swig，而 Pug 的语法目前有点接受不能，所以直接放弃了，而 Swig 早已停止更新，所以也放弃了，所以最终选择的还是相对熟悉的 EJS（而 EJS 最近的一次提交时间为 2018 年 11 月 28 日，看来应该也是要停止更新了，以后有机会试试 Pug 吧）。</p><p>　　技术决定之后，就要开始写了，最开始写的时候，由于不清楚 hexo 的工作机制，导致完全无法显示页面，后面查阅了几篇关于如何写 hexo 主题的文章，加上自己的慢慢摸索，终于弄懂了，hexo 的最初页面需要有一个 index 文件，在 index 中写入的东西，将会显示在 <code>http://localhost:4000/</code> 页面中，好了，终于能显示内容了，接下来要解决的是布局问题，hexo 的所有页面渲染都会通过一个叫 layout 的文件，layout 文件中必须存在一个 <code>&lt;%- body %&gt;</code> 语句，在渲染时，hexo 会用其它页面的内容替换 layout 中的 <code>&lt;%- body %&gt;</code> 语句，包括 index 中，所以在 layout 中写好 HTML 框架之后，其它页面只需要负责写内容就行。实现一个最简单的主题（只有纯文字版网页），只需要下面几步：</p><blockquote><blockquote><ol type="1"><li>在 index.ejs 文件中写入 <code>&lt;%- include('_partial/archive', {item: page, is_index: true}) %&gt;</code>；</li><li>然后在 _partial 文件夹中 archive.ejs 文件中写入：</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;% page.posts.each(function(item) &#123; %&gt;</div><div class="line">    &lt;%- include(&apos;article&apos;, &#123;item: item, is_index: true&#125;) %&gt;</div><div class="line">&lt;% &#125;) %&gt;</div><div class="line"></div><div class="line">&lt;% if (page.total &gt; 1)&#123; %&gt;</div><div class="line">    &lt;%- paginator(&#123;</div><div class="line">        prev_text: &apos;&amp;laquo; Prev&apos;,</div><div class="line">        next_text: &apos;Next &amp;raquo;&apos;</div><div class="line">    &#125;) %&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></div></blockquote><blockquote><blockquote><ol start="3" type="1"><li>在 _partial 文件夹中 article.ejs 文件中写入 <code>&lt;div&gt;&lt;%- item.content %&gt;&lt;/div&gt;</code>；</li><li>最后在 layout.ejs 文件中写入：</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;%- body %&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></div></blockquote><blockquote><blockquote><p>即可将文章内容显示出来，前提是已有文章。当然也可把上面的1~3步合起来算作一步，直接在 index.ejs 文件中写入：</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;% page.posts.each(function(post) &#123; %&gt;</div><div class="line">    &lt;div&gt;&lt;%- post.content %&gt;&lt;/div&gt;</div><div class="line">&lt;% &#125;) %&gt;</div><div class="line"></div><div class="line">&lt;% if (page.total &gt; 1)&#123; %&gt;</div><div class="line">    &lt;%- paginator(&#123;</div><div class="line">        prev_text: &apos;&amp;laquo; Prev&apos;,</div><div class="line">        next_text: &apos;Next &amp;raquo;&apos;</div><div class="line">    &#125;) %&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></div></blockquote><blockquote><p>这样就算是实现了一个最简单的主题，只是这个主题十分丑陋，文章也没有对应的标题。</p></blockquote><p><strong><em>※注：</em></strong> 在写这几步的时候，Shaun 在这里发现 hexo-browsersync 插件和 hexo s 命令有冲突，会造成一个bug：<a href="https://github.com/hexojs/hexo/issues/3180" target="_blank" rel="external">hexo s 启动后，页面加载错误，大BUG</a>，具体表现为：当直接使用 <code>&lt;%- post.content %&gt;</code> 在首页显示文章时，index.html 将会无法加载完全，后面的一部分会加载错误。<strong>解决办法为：</strong>卸载 hexo-browsersync 插件。</p><p>　　完成上面几步，就算是写主题已经入门了，万事开头难，入门之后就相对简单了，只要按部就班的一步步走下去就行了，接下来就是慢慢进行排版布局问题，就这样，Shaun 一边参考其它一些主题的排版和写法，一边查阅网上资料实现自己的想法，一步一步的解决问题，直到完成该主题。</p><p><strong>PS：</strong> <em>主题配置文件 _config.yml 中的配置变量的命名和其它编程语言一样，不能以数字作为第一个字符</em>。</p><h2 id="文档篇">文档篇</h2><p>　　Chi 主题涉及到的技术主要为：Bootstrap4、jQuery3、Stylus、EJS、HTML5、CSS3、ES6 等；运行环境为：node-v8.11.1、Hexo-3（hexo-cli-1.1.0）等；测试浏览器为Firefox 60.5.0 esr 和 Chrome 72.0.3626.109，其它浏览器没测过，也不考虑测，有兴趣的童鞋可以自己测自己改。</p><p>　　Chi 主题的配色主要参考 Shaun 原来的主题 spfk_x，排版部分参考了 <a href="https://github.com/wzpan/hexo-theme-freemind" target="_blank" rel="external"><strong>hexo-theme-freemind</strong></a>，部分代码也是来自这两个主题。Chi 主题的一些动画实现优先采用 CSS，除了那些无法用 CSS 实现或 Shaun 不知道如何用 CSS 实现的，所以 JS 代码部分不算很多，网页加载速度也勉强能够接受吧。</p><p>　　Chi 主题的代码高亮部分本来想参考 <a href="http://jumpbyte.cn/2016/07/02/use-and-install-prettify/" target="_blank" rel="external">为hexo博客加入prettify高亮插件</a> 使用prettify替换默认的代码高亮，但使用了之后发现效果不是很好，就还是使用默认的样式了。</p><p>　　Chi 主题的使用文档暂时就不写了，毕竟这个主题只是 Shaun 个人使用（应该也不会有其他人使用了，万一真有人要用却不太会用，欢迎提 issue，以后酌情考虑添加使用文档 🙃），由于 Shaun 只是前端小白，这个主题也只是当学习练手开发，里面肯定会有各种各样的问题，欢迎提 issue 或 fork 或 clone 后自行修改，提 issue 的话，Shaun 不保证一定能解决，毕竟水平有限，当然如果有代码优化想法还望不吝赐教 (｡･ω･｡)ﾉ♡ （至于 px 换 em 或 rem 就不用提了，没什么原因，主要是 Shaun 懒，更深层的原因在于 Shaun 手头上还没有更高分辨率的显示器，不知道显示差距有多大，不好进行测试 😓）。</p><p><strong>PS：</strong> Shaun 使用了 <a href="https://blog.ihoey.com/posts/Hexo/2018-05-27-hexo-code-block.html" target="_blank" rel="external">Hexo 博客美化代码块| 梦魇小栈</a> 中的脚本对 Markdown 代码部分进行了美化渲染，但是该脚本有时候渲染会出现一些问题，无法进行美化，可能是代码语法格式有错误，这时<em>需要自己手动调整一下 Markdown 代码格式</em>。</p><p>使用 Chi 主题推荐安装插件：</p><ul><li>hexo-renderer-pandoc # 使用pandoc渲染markdown，安装前需卸载默认渲染器hexo-renderer-marked</li><li>hexo-generator-feed # RSS订阅</li><li>hexo-generator-searchdb # 本地搜索</li><li>hexo-abbrlink # 文章唯一永久链接</li><li>hexo-all-minifier # 快速压缩优化代码</li></ul><p>好了，暂时就写到这里了。</p><h2 id="后记">后记</h2><p>　　当 Shaun 有一天使用其它 blog 框架时，这个主题可能就不再维护更新了，但其中的排版样式应该还会或保留或更新。下面要做的事就不立 Flag 了，因为立了多半会完不成，这就很尴尬了，但不立又没有动力，真是让人脑壳疼啊 (๑•ั็ω•็ั๑)，反正是一件长期要做的事了，长到可能接下来的业余时间可能都在做这件事，或开源或不开源，看以后的心情和完成程度了 （↖(^ ω ^)↗）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　2019 年 2 月 20 日，Shaun 的站点主题终于完成了，终于能用上自己的主题了，开心 ～(￣▽￣～)。&lt;/p&gt;
    
    </summary>
    
      <category term="建站小记" scheme="http://cniter.github.io/categories/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Matlab和OpenCV混合编程小结</title>
    <link href="http://cniter.github.io/posts/64889158.html"/>
    <id>http://cniter.github.io/posts/64889158.html</id>
    <published>2018-11-09T12:26:16.000Z</published>
    <updated>2019-02-26T11:34:37.392Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#FA8072">本文所用的 Matlab 版本为 Matlab R2017b，OpenCV 版本为 opencv-3.4.3，C++ IDE 为 Visual Studio 2017，系统环境为 Windows 10_x64。</font></p><h2 id="前言">前言</h2><p>　　秋招告一段落了，又要回到最初的起点，继续搞（qu）科（hua）研（shui）了，由于前人的代码主要是用 C++ 和 Matlab 混编实现的，而 Shaun 比较熟悉的是 C++ 和 OpenCV，而用 OpenCV 完全重写前人的代码工作量又太大了而且有些 API 不是很好互换，为了方便站在巨人的肩膀上继续前进，所以只能学习一下 OpenCV 和 Matlab 的混合编程了，这样在前人的基础上实现 Shaun 自己的想法相对来说更容易一些。</p><a id="more"></a><h2 id="准备篇">准备篇</h2><p>　　由于目前主要用 C++ 实现的是一些小功能，也不需要调试，所以就直接使用 VSCode 进行编程了（或许以后还是会用 VS 进行一些简单的调试），而在没有配置相关环境的前提下，VSCode 无法实现自动补全，所以需要在 VSCode 中配置相应环境。具体添加方法如下：在 VSCode 中点击菜单栏 “<strong>查看</strong>” ==》“<strong>命令面板…</strong>” ==》选择 “<strong>C/Cpp: Edit Configurations…</strong>”==》在出现的 <code>c_cpp_properties.json</code> 文件中 <code>&quot;includePath&quot;</code> 对应的值中添加 OpenCV 的 include 目录和 Matlab 的 include 目录，添加之后的 <code>&quot;includePath&quot;</code> 如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="JSON"><figure class="highlight hljs json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"includePath"</span>: [</div><div class="line">	<span class="string">"$&#123;workspaceFolder&#125;/**"</span></div><div class="line">	, <span class="string">"D:/ProgramFiles/OpenCV/3.4.3/build/include/**"</span></div><div class="line">	, <span class="string">"C:/Program Files/MATLAB/R2017b/extern/include/**"</span></div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>如此就能在 VSCode 中写 OpenCV 和 Matlab 相关函数时实现自动补全了。</p><h2 id="matlab-和-c-混编篇">Matlab 和 C++ 混编篇</h2><p>　　由于 Shaun 使用的是 OpenCV 的 C++ 接口，所以需要先知道 Matlab 和 C++ 混合编程如何进行。以实现两个数的加法为例，首先创建一个 mexAdd.cpp 文件，其中 C++ 代码具体如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="C++"><figure class="highlight hljs c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mex.h&gt;    // 必须包含头文件 mex.h</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 检查输入是否合法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkInputs</span><span class="params">(<span class="keyword">int</span> nrhs, <span class="keyword">const</span> mxArray *prhs[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (nrhs != <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        mexErrMsgTxt(<span class="string">"Incorrect number of inputs. Function expects 2 inputs."</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!mxIsDouble(prhs[<span class="number">0</span>]))</div><div class="line">    &#123;       </div><div class="line">        mexErrMsgTxt(<span class="string">"Input number must be double."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * nlhs：matlab 函数左边变量个数，即返回值参数个数</span></div><div class="line"><span class="comment"> * plhs： matlab 函数左边变量，即返回值参数</span></div><div class="line"><span class="comment"> * nrhs： matlab 右边变量个数，即函数输入参数个数</span></div><div class="line"><span class="comment"> * prhs： matlab 函数右边变量，即函数输入参数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mexFunction</span><span class="params">(<span class="keyword">int</span> nlhs, mxArray *plhs[], <span class="keyword">int</span> nrhs, <span class="keyword">const</span> mxArray *prhs[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    checkInputs(nrhs, prhs);</div><div class="line"></div><div class="line">    <span class="comment">// 输入参数可以不使用指针，但输出参数必须使用指针</span></div><div class="line">    <span class="keyword">double</span> *a = <span class="literal">nullptr</span>;    <span class="comment">// 输出参数</span></div><div class="line">    <span class="keyword">double</span> b = <span class="number">0.0</span>, c = <span class="number">0.0</span>;    <span class="comment">// 两个输入参数</span></div><div class="line">    plhs[<span class="number">0</span>] = mxCreateDoubleMatrix(<span class="number">1</span>, <span class="number">1</span>, mxREAL);   <span class="comment">// 创建1x1的实数矩阵用作输出第一个参数</span></div><div class="line">    a = mxGetPr(plhs[<span class="number">0</span>]);  <span class="comment">// 用指针a指向第一个输出</span></div><div class="line">    b = *(mxGetPr(prhs[<span class="number">0</span>]));   <span class="comment">// b作为第一个输入</span></div><div class="line">    c = *(mxGetPr(prhs[<span class="number">1</span>]));   <span class="comment">// c作为第二个输入</span></div><div class="line">    *a = add(b, c); <span class="comment">// 计算b、c之和得到a</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　若要使用 Matlab 混合编译 C++，必须要添加头文件 <code>mex.h</code>，使用 <code>void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])</code> 函数接收输入输出参数，如此编译完成之后，就和使用普通的 Matlab 函数一样了。具体编译调用方法如下，新建 addTest.m 文件，其中 Matlab 代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="MATLAB"><figure class="highlight hljs matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">clc, clear, close all;  <span class="comment">% 清空变量和关闭所有打开窗口</span></div><div class="line"></div><div class="line">current_folder = pwd;   <span class="comment">% 获取当前文件路径</span></div><div class="line">addpath(genpath(current_folder));    <span class="comment">% 添加matlab临时搜索路径，并包含子文件夹（matlab退出后该路径不存在）</span></div><div class="line"></div><div class="line">mex mexAdd.cpp; <span class="comment">% 混合编译C++，得到matlab可识别的函数</span></div><div class="line"></div><div class="line">a = <span class="number">3.1</span>; b = <span class="number">2.6</span>;</div><div class="line">c = mexAdd(a, b);</div></pre></td></tr></table></figure></div><p>其中 <code>mex mexAdd.cpp</code> 可以直接在 Matlab 命令行窗口下预先执行编译动作，编译成功后会输出一个 mexAdd.mexw64 文件，若是 32 位系统则后缀为 mexw32，之后直接执行 <code>ans = mexAdd(3.1, 2.6);</code> 即可在 Matlab 中调用该函数。在 Matlab 首次执行 mex 命令时，Matlab 会自动选择 VS 编译器作为默认 C++ 编译器，也可以执行 <code>mex -setup</code> 初始化或更换默认编译器。</p><p><strong>BTW：</strong> 最好在安装 Matlab 之前安装 Visual Studio，否则使用 <code>mex</code> 编译时，可能会出现找不到编译器的情况。</p><h2 id="matlab-和-opencv-混编篇">Matlab 和 OpenCV 混编篇</h2><p>　　Matlab 和 OpenCV 混编大体上和 C++ 混编差不多，最大的区别在于如何利用 OpenCV 的 cv::Mat 对象和相关的库函数，Matlab 良心的提供了 OpenCV 接口以实现 mexArray 和 cv::Mat 格式之间的互相转化，使用这些接口需要包含头文件 <code>opencvmex.hpp</code> 。如果不使用 Matlab 提供的这些接口而是自己写转换过程的话有点麻烦，因为 Matlab 的数据是以列优先方式存储的，而 OpenCV 的数据是以行优先方式存储的。至于如何进行混编，主要有以下三种方式：</p><ol type="1"><li>第一种是自己写 make.m 文件，相当于 gcc 编译时需要的 Makefile 文件，需要手动拼接各种编译命令和添加相应的附加依赖库；</li><li>第二种是通过 Matlab 官方提供的 <a href="http://cn.mathworks.com/help/vision/ug/opencv-interface.html" target="_blank" rel="external">Computer Vision System Toolbox OpenCV Interface</a> 功能，Matlab 没有默认安装该功能，这个功能需要另外安装，具体安装方法为：在 Matlab 命令行窗口输入 <code>visionSupportPackages</code>，即可弹出“<strong>附加功能资源管理器</strong>”窗口选择对应附加功能安装即可，安装完之后可通过 <code>mexOpenCV</code> 命令对包含 OpenCV 库函数的 .cpp 文件进行编译，查看 mexOpenCV.m 的源码可知，<code>mexOpenCV</code> 其实是对 <code>mex</code> 命令进行了封装，其调用的 OpenCV 库也是其工具箱自带的 OpenCV，而且有些库还没有包含，有一定的局限性，不过该附加功能自带了些示例程序，可以参考学习一下；</li><li>第三种是使用第三方的 <a href="https://github.com/kyamagu/mexopencv" target="_blank" rel="external">mexopencv</a>，不过需要安装与该工具对应的 OpenCV 版本，并需要进行一定的配置工作，略显麻烦。</li></ol><p>　　Shaun 这里直接使用的是第一种方式，自己写 make.m 文件，比较灵活，想怎么配置就怎么配置。下面具体以 RGB 转 GRAY 为例，首先新建 mexRGB2GRAY.cpp，其中 C++ 代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="C++"><figure class="highlight hljs c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencvmex.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _DO_NOT_EXPORT</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_DO_NOT_EXPORT)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DllExport  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DllExport __declspec(dllexport)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Usage: [img_matrix] = mexRGB2GRAY('img.jpg');</span></div><div class="line"><span class="comment"> * Input: a image file;</span></div><div class="line"><span class="comment"> * Output: a matrix of image which can be read by Matlab</span></div><div class="line"><span class="comment">**/</span></div><div class="line"></div><div class="line"><span class="comment">// 检查输入是否合法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkInputs</span><span class="params">(<span class="keyword">int</span> nrhs, <span class="keyword">const</span> mxArray *prhs[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (nrhs != <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        mexErrMsgTxt(<span class="string">"Incorrect number of inputs. Function expects 1 inputs."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mxGetNumberOfDimensions(prhs[<span class="number">0</span>]) != <span class="number">3</span>) <span class="comment">// 获取Matlab图像总的维度个数（灰度图为2维，RGB彩色图为3维）</span></div><div class="line">    &#123;</div><div class="line">        mexErrMsgTxt(<span class="string">"Incorrect number of dimensions. First input must be a RGB image."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 检查图像数据类型</span></div><div class="line">    <span class="keyword">if</span> (!mxIsUint8(prhs[<span class="number">0</span>]))</div><div class="line">    &#123;</div><div class="line">        mexErrMsgTxt(<span class="string">"Template and image must be UINT8."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit_with_help</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    mexPrintf(<span class="string">"Uasge: [image_matrix] = mexRGB2GRAY('image_file.jpg');\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fakeAnswer</span><span class="params">(mxArray *plhs[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    plhs[<span class="number">0</span>] = mxCreateNumericMatrix(<span class="number">0</span>, <span class="number">0</span>, mxDOUBLE_CLASS, mxREAL);  <span class="comment">// 创建一个0x0的空双精度matlab矩阵</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">cv::<span class="function">Mat <span class="title">RGB2GRAY</span><span class="params">(<span class="keyword">const</span> mxArray *prhs[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    cv::Ptr&lt;cv::Mat&gt; img_cv = ocvMxArrayToMat_uint8(prhs[<span class="number">0</span>], <span class="literal">true</span>);   <span class="comment">// 将unit8数据类型的matlab矩阵转换为OpenCV的mat对象智能指针</span></div><div class="line">    <span class="keyword">if</span> (img_cv.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> cv::Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将RGB转化为GRAY图</span></div><div class="line">    cv::Mat gray((*img_cv).size(), CV_8UC1);</div><div class="line">    <span class="keyword">if</span> ((*img_cv).channels() == <span class="number">3</span>)</div><div class="line">    &#123;</div><div class="line">        cv::cvtColor(*img_cv, gray, CV_RGB2GRAY);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((*img_cv).channels() == <span class="number">4</span>)</div><div class="line">    &#123;</div><div class="line">        cv::cvtColor(*img_cv, gray, CV_RGBA2GRAY);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        (*img_cv).copyTo(gray);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gray;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mexFunction</span><span class="params">(<span class="keyword">int</span> nlhs, mxArray *plhs[], <span class="keyword">int</span> nrhs, <span class="keyword">const</span> mxArray *prhs[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    checkInputs(nrhs, prhs);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (nrhs == <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        cv::Mat gray = RGB2GRAY(prhs);</div><div class="line">        plhs[<span class="number">0</span>] = ocvMxArrayFromMat_uint8(gray);   <span class="comment">// 将unit8数据类型的OpenCV的mat对象转换为matlab矩阵</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        exit_with_help();</div><div class="line">        fakeAnswer(plhs);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>然后新建 makefile.m 文件，自己配置相关编译环境， Shaun 这里具体如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="MATLAB"><figure class="highlight hljs matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makefile</span><span class="params">()</span></span></div><div class="line"></div><div class="line">    <span class="comment">% 选择相应计算机系统版本</span></div><div class="line">    is_64bit = strcmp(computer, <span class="string">'MACI64'</span>) || strcmp(computer, <span class="string">'GLNXA64'</span>) || strcmp(computer, <span class="string">'PCWIN64'</span>);</div><div class="line"></div><div class="line">    <span class="comment">% 配置OpenCV编译环境，如果系统是64位的，则OpenCV也需要是64位的</span></div><div class="line">    out_dir = <span class="string">'.'</span>; <span class="comment">% 输出目录,这里为当前目录</span></div><div class="line">    CPPFLAGS = <span class="string">' -O -DNDEBUG -I./ -ID:/ProgramFiles/OpenCV/3.4.3/build/include'</span>; <span class="comment">% OpenCV “include” 目录</span></div><div class="line">    LDFLAGS = <span class="string">' -LD:/ProgramFiles/OpenCV/3.4.3/build/x64/vc15/lib -LC:/PROGRA~1/MATLAB/R2017b/extern/lib/win64/microsoft'</span>;  <span class="comment">% OpenCV “lib” 目录 和 MatLab 附加库目录</span></div><div class="line">    LIBS = <span class="string">' -lopencv_world343 -lmwocvmex'</span>; <span class="comment">% 添加OpenCV相关库和Matlab libmwocvmex.lib库</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> is_64bit</div><div class="line">        CPPFLAGS = [CPPFLAGS <span class="string">' -largeArrayDims'</span>];</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="comment">% 需要编译的 cpp 文件</span></div><div class="line">    compile_files = &#123;</div><div class="line">        <span class="string">'mexRGB2GRAY.cpp'</span></div><div class="line">        <span class="string">'mexAdd.cpp'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">% 开始编译</span></div><div class="line">    <span class="keyword">for</span> k = <span class="number">1</span> : <span class="built_in">length</span>(compile_files)</div><div class="line">        str = compile_files&#123;k&#125;;</div><div class="line">        fprintf(<span class="string">'compilation of: %s\n'</span>, str);</div><div class="line">        str = [str <span class="string">' -outdir '</span> out_dir CPPFLAGS LDFLAGS LIBS];</div><div class="line">        args = regexp(str, <span class="string">'\s+'</span>, <span class="string">'split'</span>);</div><div class="line">        mex(args&#123;:&#125;);</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></div><p>其中 Matlab 配置路径中的 <code>PROGRA~1</code> 是指 Windows 下的 C 盘中的 Program Files 文件夹，为了使用 Matlab 提供的转换接口，<code>libmwocvmex.lib</code> 是必须要添加的一个库。最后具体使用示例 Matlab 代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="MATLAB"><figure class="highlight hljs matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">clc, clear, close all;  <span class="comment">% 清空变量和关闭所有打开窗口</span></div><div class="line"></div><div class="line">current_folder = pwd;   <span class="comment">% 获取当前文件路径</span></div><div class="line">addpath(genpath(current_folder));    <span class="comment">% 添加matlab临时搜索路径，并包含子文件夹（matlab退出后该路径不存在）</span></div><div class="line"></div><div class="line">makefile();</div><div class="line"></div><div class="line">image = imread(<span class="string">'lena.jpg'</span>);</div><div class="line"></div><div class="line">I = mexRGB2GRAY(image);</div><div class="line">figure, imshow(I);</div></pre></td></tr></table></figure></div><p>也可以将 <code>makefile();</code> 函数预先执行。<strong>※注：</strong> <em>这里如果出现编译报错 “<font color="#FA8072">缺少依赖共享库</font>” 的情况可能还需要把 OpenCV 的 bin 目录加到系统环境变量 Path 中，Shaun 这里是路径 <code>D:\ProgramFiles\OpenCV\3.4.3\build\x64\vc15\bin</code>，然后重启 Matlab</em>。</p><h2 id="调试篇">调试篇</h2><p>　　若要对写的 mexAdd.cpp 文件进行调试，则需要</p><ol type="1"><li><p>先使用 <code>mex -g mexAdd.cpp</code> 编译该文件，由于添加了 -g 参数，此时除了会生成 mexAdd.mexw64 文件之外，还会生成一个 mexAdd.mexw64.pdb 文件，该文件即包含调试信息；</p></li><li><p>然后在相应 .m 文件中调用 mexAdd 函数的位置设置断点，运行该相关文件，matlab 程序会在调用 mexAdd 函数之前停下；</p></li><li><p>此时使用 VS2017 打开 mexAdd.cpp 文件，在需要调试的地方设置好断点，选中菜单栏中的“<strong>调试</strong>” ==》“<strong>附加到进程</strong>”，或者直接点击菜单栏上的<strong><em>绿色三角</em> 附加…</strong>，选中 <strong>MATLAB.exe</strong> ，点击附加，即可看到 VS2017 调试程序已启动；</p></li><li><p>最后回到 matlab 中继续运行相关文件，即可看到程序跳转到 VS2017，并执行到设置断点的地方，此时即可在 VS2017 中按调试 C++ 程序一样对其进行调试。</p></li></ol><p>　　完成调试并执行完 mexAdd.cpp 之后，程序将回到 matlab 界面继续执行，直到整个 matlab 程序执行完成。</p><h2 id="后记">后记</h2><p>　　这次主要是记录 Matlab 如何调用 C++ 编写的函数，其实还可以用 C++ 调用 Matlab 编写的函数，不过那是另一种混编方式了，以后有机会碰到的话再继续记录吧。</p><h2 id="参考资料">参考资料</h2><p>[１] <a href="https://blog.csdn.net/zouxy09/article/details/20553007" target="_blank" rel="external">Matlab与C++混合编程（依赖OpenCV）</a></p><p>[２] <a href="https://ww2.mathworks.cn/help/matlab/matlab_external/changing-default-compiler.html" target="_blank" rel="external">更改默认编译器</a></p><p>[３] <a href="http://www.mathworks.com/help/vision/opencv-interface-support-package.html" target="_blank" rel="external">OpenCV Interface Support</a></p><p>[４] <a href="https://blog.csdn.net/linzhineng44/article/details/51646765" target="_blank" rel="external">Matlab OpenCV混合编程</a></p><p>[５] <a href="http://blog.sina.com.cn/s/blog_620b47660100h3yn.html" target="_blank" rel="external">vc与matlab连接的实用函数简介</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font color=&quot;#FA8072&quot;&gt;本文所用的 Matlab 版本为 Matlab R2017b，OpenCV 版本为 opencv-3.4.3，C++ IDE 为 Visual Studio 2017，系统环境为 Windows 10_x64。&lt;/font&gt;&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　秋招告一段落了，又要回到最初的起点，继续搞（qu）科（hua）研（shui）了，由于前人的代码主要是用 C++ 和 Matlab 混编实现的，而 Shaun 比较熟悉的是 C++ 和 OpenCV，而用 OpenCV 完全重写前人的代码工作量又太大了而且有些 API 不是很好互换，为了方便站在巨人的肩膀上继续前进，所以只能学习一下 OpenCV 和 Matlab 的混合编程了，这样在前人的基础上实现 Shaun 自己的想法相对来说更容易一些。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
      <category term="matlab" scheme="http://cniter.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>Android实践小结</title>
    <link href="http://cniter.github.io/posts/be7949e4.html"/>
    <id>http://cniter.github.io/posts/be7949e4.html</id>
    <published>2018-07-16T13:00:50.000Z</published>
    <updated>2018-08-14T06:40:34.824Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#FA8072">实践环境为：android-studio-bundle-162.4069837-windows（Android Studio 2.3.3 带 Android SDK 版）、该 Android Studio 自带的 JRE，系统环境为 Win10-1607。</font></p><h2 id="前言">前言</h2><p>　　由于上一届没有更新任何项目文档和学习文档，Shaun 只能自己去网上查找相关的资料，从零开始学习，顺便留下一些文档，正所谓：「代码未动，文档先行」，也算是实践出真知吧。</p><p><strong>PS：</strong> 本次实践的项目主要来自 <a href="http://www.runoob.com/w3cnote/android-tutorial-exercise-1.html" target="_blank" rel="external">12.1Android 实战 ：DrySister看妹子应用(第一版) — 项目搭建与简单实现</a>（<a href="http://www.runoob.com/w3cnote_genre/android" class="uri" target="_blank" rel="external">http://www.runoob.com/w3cnote_genre/android</a>） 以及目前手头上正在维护的项目。</p><a id="more"></a><h2 id="布局篇">布局篇</h2><p>　　首先打开 Android Studio ，新建项目，一路默认下去即可，等待片刻，“MainActivity.java” 文件的错误提示就会自然消失，<em>将左侧栏上方的 “Android” 切换为 “Project”</em>，打开 <strong>app</strong> -&gt; <strong>src</strong> -&gt; <strong>main</strong> -&gt; <strong>res</strong> -&gt; <strong>layout</strong> -&gt; <strong>activity_main.xml</strong>，由于其默认是以 “Text” 的模式打开（Android Studio 右侧有个 “Preview” 标签可以进行当前布局预览），这对于小白来说不大好控制布局，所以需要在该文件底部将 “Text” 切换为 “Design”，如此可以进行拖拽式布局，以下正式开始进入 Android UI 的布局。至于具体如何进行布局设置，可以参考 <a href="https://www.diycode.cc/topics/744" target="_blank" rel="external">Android ConstraintLayout 使用指南</a> 和 <a href="https://blog.csdn.net/nicolelili1/article/details/52611162" target="_blank" rel="external">Android实现拖拽式布局开发—-约束性布局</a> 以下两篇资料。</p><p>　　而若要使控件大小根据屏幕大小自适应，一般可使用相对布局，但如今的 Android Studio 默认新建的页面就是一种类似于相对布局的页面，所以直接在控件中设置 <code>android:layout_width=&quot;match_parent&quot;</code> 以及 <code>android:layout_height=&quot;match_parent&quot;</code> 属性即可，再设置 layout_margin 属性进行调整即可，而若要让控件大小随控件内的内容自适应，则只需要将 match_parent 更改为 wrap_content 即可。</p><h2 id="编码篇">编码篇</h2><p>　　首先新建自己的业务逻辑 java 代码，具体新建方法可参考 <a href="https://jingyan.baidu.com/article/f79b7cb36fc6369145023e7f.html" target="_blank" rel="external">Android studio怎么创建一个Java类文件</a> ，在 <strong>MainActivity.java</strong> 文件所在目录上鼠标右键 <strong>New</strong> -&gt; <strong>Java Class</strong>，新建完成之后即可编写自己的业务逻辑。若要新建文件夹，则在目录上鼠标右键 <strong>New</strong> -&gt; <strong>Package</strong> 。若要使级联目录展开，例如 <code>com.example.admin.myapplicationtest</code>，则需要在该目录的父级目录新建一个 <code>com.example.admin.test</code> Package 即可将<code>com.example.admin</code> 目录展开。</p><h3 id="页面跳转">页面跳转</h3><p>　　首先新建一个页面 jump_test_activity，在 <code>\MyApplicationTest\app\src\main\res\layout</code>，即 layout 文件夹上鼠标右键，“<strong>New</strong>” ==》“<strong>Activity</strong>” ==》“<strong>Empty Activity</strong>” （有多种 Activity 样式可供选择，Shaun 这里就以 Empty Activity为例了），随后弹出窗口，在 <strong>Activity Name</strong> 栏填写页面逻辑控制代码文件名 JumpTestActivity，在 <strong>Layout Name</strong> 栏填写页面 UI 设计代码文件名 jump_test_activity，在 <strong>Package name</strong> 以及页面逻辑控制代码文件所在在包名 com.example.admin.myapplicationtest.ui.activity，其它设置为默认即可，这样新建的页面的有个问题就是会有一个丑陋的标题栏，所以还需要去掉该标题栏，具体方法为：</p><ol type="1"><li><p>在 <code>MyApplicationTest\app\src\main\res\values\styles.xml</code> 文件中添加：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="XML"><figure class="highlight hljs xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></div></li><li><p>将 <code>MyApplicationTest\app\src\main\AndroidManifest.xml</code> 中的 <code>&lt;activity android:name=&quot;.ui.activity.JumpTestActivity&quot;&gt;&lt;/activity&gt;</code> 更改为 <code>&lt;activity android:name=&quot;.ui.activity.JumpTestActivity&quot; android:theme=&quot;@style/AppTheme.NoActionBar&quot;&gt;&lt;/activity&gt;</code> ，再次编译运行即可看到标题栏已消失。</p></li></ol><p>好了，准备阶段已经搞完，接下来就是正式的页面跳转了，一般页面跳转是用户点击事件发生的，所以需要添加一个具有点击事件的控件，一般而言就是 Button 了，这里设该 button 的 id 为 page_jump_btn；该 button 所在页面为 <code>MyApplicationTest\app\src\main\res\layout\activity_main.xml</code>，则在对应的逻辑控制文件<code>MyApplicationTest\app\src\main\java\com\example\admin\myapplicationtest\ui\activity\MainActivity.java</code> 中的页面跳转代码为：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="JAVA"><figure class="highlight hljs java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">page_jump_btn = (Button) findViewById(R.id.page_jump_btn);</div><div class="line">page_jump_btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">		Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, JumpTestActivity.class);</div><div class="line">		MainActivity.<span class="keyword">this</span>.startActivity(intent);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></div><p>如此，在主界面中点击跳转按钮，即可跳转到新建页面。</p><h3 id="url-中的坑">URL 中的坑</h3><p>　　在学 12.2 的时候，由于请求的URL地址中有中文“福利”，所以其返回的字符串为：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="JSON"><figure class="highlight hljs json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"error"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"results"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>可以看到 “results” 的值为空，这显然是错的，后面调试发现需要对 URL 地址转义（这都 8102 年了，为什么 URL 地址中还要有中文，或者说为什么 URL 地址还不支持解析中文 ╮(╯▽╰)╭），具体转义代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="JAVA"><figure class="highlight hljs java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fetch_url = Uri.encode(fetch_url);  <span class="comment">// 将URL地址转义</span></div><div class="line">fetch_url = fetch_url.replace(<span class="string">"%3A"</span>, <span class="string">":"</span>);  <span class="comment">// 将%3A替换为:</span></div><div class="line">fetch_url = fetch_url.replace(<span class="string">"%2F"</span>, <span class="string">"/"</span>);  <span class="comment">// 将%2F替换为/</span></div></pre></td></tr></table></figure></div><p>主要参考资料为：<a href="https://blog.csdn.net/joshuaxx316/article/details/47749181" target="_blank" rel="external">Android url中文乱码问题及解决办法</a> 和 <a href="https://blog.csdn.net/top_code/article/details/26288057" target="_blank" rel="external">Android URL encode 空格处理</a> 。</p><h3 id="sql-语句中的坑">SQL 语句中的坑</h3><p>　　在使用字符串拼写 SQL 语句时，<strong><em>一定要注意 SQL 语句中的空格</em></strong>，要不然拼起来的 SQL 语句可能语法不通而导致 APP 崩溃。如在使用创建表的 SQL 语句时，可能的错误写法（不注意空格）如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SQL"><figure class="highlight hljs sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">String create_table_sql = "<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span><span class="string">" + TableDefine.TABLE_FULI + "</span>(<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_ID + "</span><span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT,<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_ID + "</span><span class="built_in">TEXT</span>,<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_CREATEAT + "</span><span class="built_in">TEXT</span>,<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_DESC + "</span><span class="built_in">TEXT</span>,<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_PUBLISHEDAT + "</span><span class="built_in">TEXT</span>,<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_SOURCE + "</span><span class="built_in">TEXT</span>,<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_TYPE + "</span><span class="built_in">TEXT</span>,<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_URL + "</span><span class="built_in">TEXT</span>,<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_USED + "</span><span class="built_in">BOOLEAN</span>,<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_WHO + "</span><span class="built_in">TEXT</span><span class="string">"</span></div><div class="line"><span class="string">                + "</span>)<span class="string">";</span></div></pre></td></tr></table></figure></div><p>以上写法无法正确建表，甚至会因为错误 SQL 语句而导致 APP 闪退，正确的写法如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="SQL"><figure class="highlight hljs sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">String create_table_sql = "<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">" + TableDefine.TABLE_FULI + "</span> (<span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_ID + "</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT, <span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_ID + "</span> <span class="built_in">TEXT</span>, <span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_CREATEAT + "</span> <span class="built_in">TEXT</span>, <span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_DESC + "</span> <span class="built_in">TEXT</span>, <span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_PUBLISHEDAT + "</span> <span class="built_in">TEXT</span>, <span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_SOURCE + "</span> <span class="built_in">TEXT</span>, <span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_TYPE + "</span> <span class="built_in">TEXT</span>, <span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_URL + "</span> <span class="built_in">TEXT</span>, <span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_USED + "</span> <span class="built_in">BOOLEAN</span>, <span class="string">"</span></div><div class="line"><span class="string">                + TableDefine.COLUMN_FULI_WHO + "</span> <span class="built_in">TEXT</span><span class="string">"</span></div><div class="line"><span class="string">                + "</span>)<span class="string">";</span></div></pre></td></tr></table></figure></div><h2 id="调试篇">调试篇</h2><p>　　编码完成之后，一般而言需要进行调试，Android Studio 的调试可参考 <a href="https://blog.csdn.net/testcs_dn/article/details/53714678" target="_blank" rel="external">【Android 开发入门】android studio 控制台打印输出日志</a> ，进入调试模式具体方法为：点击上方工具栏中的 <strong>Debug ‘app’</strong> 图标，而不是直接 <strong>Run ‘app’</strong>，进入调试模式之后，点击下方的 “Android Monitor”，切换到 “logcat” 标签，即可查看调试信息。</p><p>　　华为手机打印调试信息可参考 <a href="https://blog.csdn.net/scwhy/article/details/7432414" target="_blank" rel="external">华为手机logcat不出日志解决方案</a>。这里由于 Shaun 还没有对 <strong>AndroidManifest.xml</strong> 进行修改，所以该 APP 在点击 Button 的时候会直接闪退，调试窗口出现 <font color="#FA8072"><em>java.lang.SecurityException: Permission denied (missing INTERNET permission?)</em></font> 错误信息，参考 <a href="https://blog.csdn.net/hack8/article/details/28038541" target="_blank" rel="external">android菜瓜笔记之missing INTERNET permission</a> 和 <a href="https://stackoverflow.com/questions/17360924/securityexception-permission-denied-missing-internet-permission" target="_blank" rel="external">SecurityException: Permission denied (missing INTERNET permission?)</a> 可知，该 APP 没有网络权限，所以需要在 AndroidManifest.xml 中添加网络权限，具体在 <em>manifest</em> 标签中添加语句 <code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code>，如此该 APP 就能正常执行了。</p><p><strong>PS：</strong> <em>如果是对应用发生闪退或崩溃的原因进行调试，建议直接在 <strong>logcat</strong> 中搜索 <strong>fatal</strong> 关键字</em>。</p><h2 id="附录">附录</h2><h3 id="更换马甲重新发布为另一个-app">更换马甲重新发布为另一个 app</h3><p>　　即一样的代码却编译出另一个相同的 app，在某些特殊的需求（使两个功能大致一样的 app 共存在一台手机上）上可能需要这个技巧，具体步骤如下（以 MyApplicationTest 更名为 MyApplication 为例）：</p><ol type="1"><li>首先将 MyApplicationTest 文件夹（即 APP 根目录）更名为 MyApplication；（这一步不是刚需）</li><li>将 <code>MyApplicationTest\app\src\main\res\values\strings.xml</code> 文件中 <code>&lt;string name=&quot;app_name&quot;&gt;MyApplicationTest&lt;/string&gt;</code> 更改为 <code>&lt;string name=&quot;app_name&quot;&gt;MyApplication&lt;/string&gt;</code>；</li><li>将 <code>MyApplicationTest\app\build.gradle</code> 文件中 <code>applicationId &quot;com.example.admin.myapplicationtest&quot;</code> 更改为 <code>applicationId &quot;com.example.admin.myapplication&quot;</code> 。（这一步是刚需）</li></ol><p>如此，即可另外安装一个全新 APP，同时保留原有 APP，至于 applicationId 的更多作用和用法可参考 <a href="https://developer.android.com/studio/build/application-id?hl=zh-cn" target="_blank" rel="external">设置应用 ID</a> 。更换 APP 图标只需在 app 文件上鼠标右键， “<strong>New</strong>” ==》“<strong>Image Asset</strong>” ，即可弹出设置 app 图标窗口，或者直接更改 AndroidMainfest.xml 文件中的 <code>android:icon</code> 也可。</p><h2 id="后记">后记</h2><p>　　排版可能有点乱，毕竟是随便写的，碰到问题就简单的记录一下，Shaun 这次的实践过程可在 <a href="https://github.com/cniter/AndroidLearning" target="_blank" rel="external"><strong>AndroidLearning</strong></a> 中查看，页面跳转的方法来自手头上正在开发维护的一个项目，附录中第一个问题的来源是对方提出的一个特殊需求。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font color=&quot;#FA8072&quot;&gt;实践环境为：android-studio-bundle-162.4069837-windows（Android Studio 2.3.3 带 Android SDK 版）、该 Android Studio 自带的 JRE，系统环境为 Win10-1607。&lt;/font&gt;&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　由于上一届没有更新任何项目文档和学习文档，Shaun 只能自己去网上查找相关的资料，从零开始学习，顺便留下一些文档，正所谓：「代码未动，文档先行」，也算是实践出真知吧。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;PS：&lt;/strong&gt; 本次实践的项目主要来自 &lt;a href=&quot;http://www.runoob.com/w3cnote/android-tutorial-exercise-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12.1Android 实战 ：DrySister看妹子应用(第一版) — 项目搭建与简单实现&lt;/a&gt;（&lt;a href=&quot;http://www.runoob.com/w3cnote_genre/android&quot; class=&quot;uri&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.runoob.com/w3cnote_genre/android&lt;/a&gt;） 以及目前手头上正在维护的项目。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="java" scheme="http://cniter.github.io/tags/java/"/>
    
      <category term="android" scheme="http://cniter.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>C++数组中的坑</title>
    <link href="http://cniter.github.io/posts/fc1165b7.html"/>
    <id>http://cniter.github.io/posts/fc1165b7.html</id>
    <published>2018-06-28T12:46:12.000Z</published>
    <updated>2019-02-26T11:47:03.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　在写快排的时候偶然发现了 C++ 数组中的一个坑，具体表现为：对数组元素进行无临时变量的自交换时竟然会将数组该元素置为 0，这应该是 <del>C++ 的一个 BUG</del> Shaun 脑子抽了。</p><a id="more"></a><h2 id="交换函数篇">交换函数篇</h2><p>　　据参考资料 [1] 中， C++ 的交换函数可以有如下三种写法：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="C++"><figure class="highlight hljs c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种：使用模板，创建临时变量</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">swap</span>(<span class="title">T</span> &amp;<span class="title">a</span>, <span class="title">T</span> &amp;<span class="title">b</span>)</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	<span class="function">T <span class="title">temp</span><span class="params">(a)</span></span>; a = b; b = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 第二种：无临时变量，针对int,double等内建数值类型的基本运算（以double为例）</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">double</span> &amp;a, <span class="keyword">double</span> &amp;b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	a = a + b;</div><div class="line">	b = a - b;</div><div class="line">	a = a - b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 第三种：无临时变量，针对int的异或运算</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// a ^= b ^= a ^= b;</span></div><div class="line">	a = a ^ b;</div><div class="line">	b = b ^ a;</div><div class="line">	a = a ^ b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　其中，第一种是通用的交换方法，无论做什么交换都能用第一种，但需要创建一个临时对象；而第二种不需要创建一个临时对象，只能用在 int，double 等内建数值类型上，且存在溢出的风险；第三种同样不需要创建临时对象，只能用在 int 类型上，由于采用位运算，所以不存在溢出的风险，且效率最高。</p><h2 id="bug-复现篇">BUG 复现篇</h2><p>　　bug 复现代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="C++"><figure class="highlight hljs c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">swap_1</span>(<span class="title">T</span> &amp;<span class="title">a</span>, <span class="title">T</span> &amp;<span class="title">b</span>)</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	<span class="function">T <span class="title">temp</span><span class="params">(a)</span></span>; a = b; b = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_2</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	a = a + b;</div><div class="line">	b = a - b;</div><div class="line">	a = a - b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_3</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	a ^= b ^= a ^= b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> data[] = &#123; <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span> &#125;;</div><div class="line">	<span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</div><div class="line">	swap_1&lt;<span class="keyword">int</span>&gt;(data[a], data[b]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t%d\n"</span>, data[a], data[b]);	<span class="comment">// 输出 8	3</span></div><div class="line">	swap_1&lt;<span class="keyword">int</span>&gt;(data[a], data[a]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t%d\n"</span>, data[a], data[a]);	<span class="comment">// 输出 8	8</span></div><div class="line">	swap_2(data[a], data[b]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t%d\n"</span>, data[a], data[b]);	<span class="comment">// 输出 3	8</span></div><div class="line"></div><div class="line">	swap_2(data[a], data[a]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t%d\n"</span>, data[a], data[a]);	<span class="comment">// ***输出 0	0***</span></div><div class="line"></div><div class="line">	swap_3(data[b], data[c]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t%d\n"</span>, data[b], data[c]);	<span class="comment">// 输出 2	8</span></div><div class="line"></div><div class="line">	swap_3(data[b], data[b]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t%d\n"</span>, data[b], data[b]);	<span class="comment">// ***输出 0	0***</span></div><div class="line">	</div><div class="line">	<span class="built_in">std</span>::swap(data[<span class="number">4</span>], data[<span class="number">5</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t%d\n"</span>, data[<span class="number">4</span>], data[<span class="number">5</span>]);	<span class="comment">// 输出 4	9</span></div><div class="line">	<span class="built_in">std</span>::swap(data[<span class="number">4</span>], data[<span class="number">4</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t%d\n"</span>, data[<span class="number">4</span>], data[<span class="number">4</span>]);	<span class="comment">// 输出 4	4</span></div><div class="line">	</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　目前没有找到什么好的解决方案，<strong>只能老老实实的用第一种创建一个临时变量的交换方法</strong>，或者<strong>在交换之前先判断一下是不是同一个元素，若不为同一个元素，才进行交换，否则不交换，即避免自交换</strong>。</p><h2 id="后记">后记</h2><p>　　刚开始出现这个问题的时候，Shaun 还纳闷了，怎么写个快排把数组元素都改变了，刚开始根本没想到这茬，还以为是 Shaun 代码的问题，倒着检查了好几遍，换第一种交换方式以及换个冒泡排序用一样的交换方式进行排序输出结果都没问题，后面使出终极调试法，一个个的输出看看才知道原来是自交换的锅。</p><p>　　如果有大佬知道为什么会出现这个问题还望不吝赐教 ◔ ‸◔?。经 @ <strong>Magnesium12</strong> 大佬提醒，这个问题由于引用引起的，采用第二种方法进行交换时如果两个数是完全一样的（地址也一样），则在进行两数相减时，由于是引用，所以这两个数完全一样，则最后会导致这两个完全一样的数，即自交换的该数置为 0 。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://blog.csdn.net/ryfdizuo/article/details/6435847" target="_blank" rel="external">谈谈C++中的swap函数</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　在写快排的时候偶然发现了 C++ 数组中的一个坑，具体表现为：对数组元素进行无临时变量的自交换时竟然会将数组该元素置为 0，这应该是 &lt;del&gt;C++ 的一个 BUG&lt;/del&gt; Shaun 脑子抽了。&lt;/p&gt;
    
    </summary>
    
      <category term="Problems" scheme="http://cniter.github.io/categories/Problems/"/>
    
    
      <category term="c/cpp" scheme="http://cniter.github.io/tags/c-cpp/"/>
    
  </entry>
  
  <entry>
    <title>Android开发环境配置</title>
    <link href="http://cniter.github.io/posts/cafdd60d.html"/>
    <id>http://cniter.github.io/posts/cafdd60d.html</id>
    <published>2018-06-21T10:17:39.000Z</published>
    <updated>2018-07-14T11:38:39.563Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#FA8072">由于一些历史原因，本篇配置的 Android 开发环境所需的软件对应版本号为：jdk-7u80-windows-x64、android-studio-bundle-162.4069837-windows（Android Studio 2.3.3 带 Android SDK 版），系统环境为 Win10-1607。</font></p><h2 id="前言">前言</h2><p>　　没想到，时隔两年之后又要重新捡起 Java，还要学基本没怎么做过的 Android，而且还是在这节骨眼上，真是造化弄人 _(´ཀ`」 ∠)_。</p><a id="more"></a><h2 id="java-环境篇">Java 环境篇</h2><p>　　先在 <a href="http://www.oracle.com/technetwork/java/archive-139210.html" target="_blank" rel="external">Oracle Java Archive</a> 下载对应的 Java 版本，下载完成后去 <a href="https://www.oracle.com/webfolder/s/digest/7u80checksum.html" target="_blank" rel="external">这里</a> 校验对应的 Hash 值（若是其它 JDK 版本，则只需将 url 末尾的 <code>7u80</code> 改成相应的版本号即可），并安装，安装时需要注意，<em>在安装完 JDK 之后，该安装器还会继续弹出让安装 JRE 的窗口，此时直接点取消即可，因为 JDK 中已包含 JRE ，所以没必要也不需要再继续安装，安装了之后，就相当于有两个 JRE ，还可能会为以后的工作造成一些麻烦</em>。具体系统环境变量配置如下（若没有相应的变量名则新建）：</p><table><colgroup><col style="width:13%"><col style="width:86%"></colgroup><thead><tr class="header"><th>变量名</th><th>变量值</th></tr></thead><tbody><tr class="odd"><td>JAVA_HOME</td><td>C:\Program Files\Java\jdk1.7.0_80 （PS：此为JDK安装目录，后面不能加分隔符分号）</td></tr><tr class="even"><td>CLASSPATH</td><td>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; （PS：最前面的 <code>.;</code> 必须要有）</td></tr><tr class="odd"><td>Path</td><td>%JAVA_HOME%\bin;%JAVA_HOME%\jre;</td></tr></tbody></table><p>配置完之后，键入 Win+R ==》cmd ==》 Enter，在终端输入 “java -version”，“java”，“javac” ，这几个命令，若有正确的响应，则表示配置成功。</p><h2 id="android-篇">Android 篇</h2><p><strong>※注：</strong> <em>在安装和配置 Android Studio 时最好先自行找好梯子，这其中有一些步骤可能需要连接外网</em>。</p><p>　　自然还是先在<a href="http://www.android-studio.org/index.php/download/hisversion" target="_blank" rel="external">这里</a>（<a href="http://www.android-studio.org/" class="uri" target="_blank" rel="external">http://www.android-studio.org/</a>）下载安装 Android Studio ，为避免再下载安装配置 SDK 的麻烦，推荐直接下载带 SDK 版本的 Android Studio 。直接默认安装，其中安装 SDK 的时间略长。<em>安装完成之后，推荐把 SDK 目录下的 tools 和 platform-tools 子目录也添加到系统的 PATH 环境变量中</em>。</p><p>　　在第一次打开 Android Studio 的时候，可能需要连接外网以更新 SDK ，所以需要自行设置好代理，更新又要花一段时间 ╮(╯▽╰)╭，当然也可以选择不更新，不更新的办法为：</p><blockquote><p>在AS启动前，打开安装目录，请先将bin目录的idea.properties文件中增加一行：disable.android.first.run=true就行了，避免第一次打开AS时自动重新下载SDK。</p></blockquote><p>　　第一次运行时，首先需要配置 SDK 路径和 JDK 路径，配置 SDK 路径方法为：“Configure” —&gt; “SDK Manager”，编辑 “Android SDK location” ，其会自动找到安装的 SDK 路径；配置 JDK 路径方法为：“Configure” —&gt; “Project Defaults” —&gt; “Project Structure”，编辑 “JDK location”（这里它有个默认内置的 jre，但推荐还是使用自己的 JDK）。</p><p>　　Android Studio 默认的编辑器方案无法更改字体（若真想在默认的方案上更改字体，可以先将其另存为一个新方案），而且个人认为其默认的主题（配色，字体等）不好看，所以推荐自行去 <a href="http://color-themes.com/?view=index" target="_blank" rel="external">Color Themes</a> 选择合适的主题。最终 Shaun 选择 <a href="http://color-themes.com/?view=theme&amp;id=563a1a6480b4acf11273ae48" target="_blank" rel="external">Wombat</a> 主题。至于导入主题的方法为：“Configure” —&gt; “Import Settings”，将下载好的 jar 包导入即可。</p><p>　　为了测试方便，就直接装了个 <a href="http://mumu.163.com/" target="_blank" rel="external">网易MuMu模拟器</a> ，用起来感觉还可以，至于 Android Studio 连接 MuMu 模拟器的方法为：先打开 MuMu 模拟器，在 Android Studio 底下的 <strong>Terminal（终端）</strong> 中输入命令：<code>adb connect 127.0.0.1:7555</code> ，响应 <code>connected to 127.0.0.1:7555</code> 则说明连接成功，这时就能愉快的使用 MuMu 模拟器调试 Android app 了。</p><h2 id="后记">后记</h2><p>　　以后有碰到什么坑再继续记录吧 ╮(╯▽╰)╭。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://www.cnblogs.com/yanglh6-jyx/p/Android_AS_Configuration.html" target="_blank" rel="external">Android Studio安装配置、环境搭建详细步骤及基本使用</a></p><p>[2] <a href="https://www.cnblogs.com/smyhvae/p/4390905.html" target="_blank" rel="external">第一次使用Android Studio时你应该知道的一切配置</a>（<a href="http://www.cnblogs.com/smyhvae/category/587732.html" class="uri" target="_blank" rel="external">http://www.cnblogs.com/smyhvae/category/587732.html</a>）</p><p>[3] <a href="https://blog.csdn.net/qq_35605213/article/details/80241641" target="_blank" rel="external">Android Studio连接不到MuMu模拟器</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font color=&quot;#FA8072&quot;&gt;由于一些历史原因，本篇配置的 Android 开发环境所需的软件对应版本号为：jdk-7u80-windows-x64、android-studio-bundle-162.4069837-windows（Android Studio 2.3.3 带 Android SDK 版），系统环境为 Win10-1607。&lt;/font&gt;&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　没想到，时隔两年之后又要重新捡起 Java，还要学基本没怎么做过的 Android，而且还是在这节骨眼上，真是造化弄人 _(´ཀ`」 ∠)_。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="java" scheme="http://cniter.github.io/tags/java/"/>
    
      <category term="android" scheme="http://cniter.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Windows实用技巧</title>
    <link href="http://cniter.github.io/posts/27a4c8b6.html"/>
    <id>http://cniter.github.io/posts/27a4c8b6.html</id>
    <published>2018-06-06T02:50:42.000Z</published>
    <updated>2020-02-08T12:14:59.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　本篇主要用来记录在 Windows 下使用命令行能做到的一些特殊技巧。</p><a id="more"></a><h2 id="windows-粉碎文件技巧">Windows 粉碎文件技巧</h2><p>　　有时候 Windows 下会莫名出现文件无法删除的现象，即使通过 Shift+Delete 组合键也还是无法删除，这时可能需要通过一种 “文件粉碎机” 的工具才能删除，但是为了偶尔出现的这种现象而安装一个这样的工具又略显麻烦，这时只需要新建一个 Windows 批处理文件，即新建一个 txt 文本文件，并将后缀改为 .bat 即可，文件内容输入：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="BAT"><figure class="highlight hljs bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">DEL</span> /F /A /Q \\?\%<span class="number">1</span></div><div class="line"><span class="built_in">RD</span> /S /Q \\?\%<span class="number">1</span></div></pre></td></tr></table></figure></div><p>其中</p><blockquote><p><strong>DEL 表示删除文件，命令参数为： del /?</strong></p><p>/F：表示强制刪除</p><p>/A：选择文件的属性</p><p>/Q：静默模式，在删除时不会弹出提示信息</p><p><strong>RD 表示刪除目录，命令参数为： rd /?</strong></p><p>/S：连带删除子目录下的文件</p><p>/Q：静默模式，在删除时不会弹出提示信息</p></blockquote><p>　　具体用法为将待删除的文件拖拽到该 .bat 文件图标上，用该 .bat 文件打开待删除的文件即可。</p><p>　　但有时候即使使用上面的方法，也无法删除文件，同时还会弹出“无法删除文件，文件或目录损坏且无法读取”这样的提示，这可能是文件存储时发生错误造成的，此时需要在 Windows 命令提示符界面中输入命令 <code>CHKDSK 盘符:/F</code>，盘符为需要删除的文件所在的磁盘或 U 盘，比如在 D 盘，则输入命令 <code>CHKDSK D:/F</code>，如出现无法锁定的提示信息，则输入 <code>Y</code> 强制卸载该卷，等待一段时间，等磁盘扫描和修复完成后即可删除待删除的文件。</p><h2 id="windows-校验文件技巧">Windows 校验文件技巧</h2><p>　　为确保从网络上下载的文件为原文件，一般需要对其进行 hash 校验（如 SHA1、SHA256、SHA384、SHA512、MACTripleDES、MD5、RIPEMD160 值等），一般随原文件一起释放的比较常见的 hash 值有 SHA1、SHA256 或 MD5 等，但是为了校验下载文件的 hash 值可能需要专门的第三方工具，但其实 Windows 、Linux 和 macOS 都自带了校验 hash 值的命令，通过这些命令可以直接对文件的 hash 值进行校验，而不需要使用额外的第三方工具，这里只介绍 Windows 的哈希值校验命令，其命令为 <code>Get-FileHash</code>，具体使用方法如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="BASH"><figure class="highlight hljs bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># []内为待校验的文件 和 所用的hash算法</span></div><div class="line">Get-FileHash [文件路径及名称] -Algorithm [校验的Hash值类型]| Format-List</div></pre></td></tr></table></figure></div><p>　　如果觉得每次这样输入比较麻烦，可以使用<strong>参考资料[2]</strong>提供的注册表文件（.reg 后缀），双击运行，即可在鼠标右键菜单添加「文件哈希校验」，如此可以通过鼠标右键直接对文件进行 hash 校验。附其中代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\*\shell\文件哈希校验]</div><div class="line"></div><div class="line">&quot;SubCommands&quot;=&quot;MACTripleDES;MD5;RIPEMD160;SHA1;SHA256;SHA384;SHA512&quot;</div><div class="line"></div><div class="line">&quot;MUIVerb&quot;=&quot;文件哈希校验&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\MACTripleDES]</div><div class="line"></div><div class="line">@=&quot;MACTripleDES&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\MACTripleDES\command]</div><div class="line"></div><div class="line">@=&quot;PowerShell Get-FileHash -Algorithm MACTripleDES \\\&quot;%1\\\&quot; | format-list;“按任意键退出...”;[Console]::Readkey() | Out-Null;exit&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\MD5]</div><div class="line"></div><div class="line">@=&quot;MD5&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\MD5\command]</div><div class="line"></div><div class="line">@=&quot;PowerShell Get-FileHash -Algorithm MD5 \\\&quot;%1\\\&quot; | format-list;“按任意键退出...”;[Console]::Readkey() | Out-Null;exit&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\RIPEMD160]</div><div class="line"></div><div class="line">@=&quot;RIPEMD160&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\RIPEMD160\command]</div><div class="line"></div><div class="line">@=&quot;PowerShell Get-FileHash -Algorithm RIPEMD160 \\\&quot;%1\\\&quot; | format-list;“按任意键退出...”;[Console]::Readkey() | Out-Null;exit&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\SHA1]</div><div class="line"></div><div class="line">@=&quot;SHA1&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\SHA1\command]</div><div class="line"></div><div class="line">@=&quot;PowerShell Get-FileHash -Algorithm SHA1 \\\&quot;%1\\\&quot; | format-list;“按任意键退出...”;[Console]::Readkey() | Out-Null;exit&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\SHA256]</div><div class="line"></div><div class="line">@=&quot;SHA256&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\SHA256\command]</div><div class="line"></div><div class="line">@=&quot;PowerShell Get-FileHash -Algorithm SHA256 \\\&quot;%1\\\&quot; | format-list;“按任意键退出...”;[Console]::Readkey() | Out-Null;exit&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\SHA384]</div><div class="line"></div><div class="line">@=&quot;SHA384&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\SHA384\command]</div><div class="line"></div><div class="line">@=&quot;PowerShell Get-FileHash -Algorithm SHA384 \\\&quot;%1\\\&quot; | format-list;“按任意键退出...”;[Console]::Readkey() | Out-Null;exit&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\SHA512]</div><div class="line"></div><div class="line">@=&quot;SHA512&quot;</div><div class="line"></div><div class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\SHA512\command]</div><div class="line"></div><div class="line">@=&quot;PowerShell Get-FileHash -Algorithm SHA512 \\\&quot;%1\\\&quot; | format-list;“按任意键退出...”;[Console]::Readkey() | Out-Null;exit&quot;</div></pre></td></tr></table></figure></div><h2 id="windows-隐写文件技巧">Windows 隐写文件技巧</h2><p>　　在 Windows 下可以通过 <code>copy</code> 命令实现简单的文件合并，即隐写，例如：将压缩文件隐写入 jpg 文件中，将 txt 文件隐写入 jpg 文件中。这样在没改后缀名的情况下，该文件是以图片形式存在，若要恢复原有隐写文件信息，则只需要将 jpg 后缀名更改为相应文件后缀名，例如：若隐写的是 rar 文件，则只需将后缀名 .jpg 改为 .rar ，再用解压缩软件打开即可，也可以直接用解压缩软件打开相应 jpg 文件；若隐写的是 txt 文件，则需要用记事本打开该文件，通过 ctrl+end 组合键让光标定位到文件最末尾，即可看到隐写的 txt 文件内容。</p><p>具体命令如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="BASH"><figure class="highlight hljs bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将 b.txt 隐写进 a.jpg 中，并输出为 c.jpg</span></div><div class="line">copy/b a.jpg+b.txt c.jpg</div><div class="line"></div><div class="line"><span class="comment"># 将当前目录下 2.rar 隐写进 1.jpg 中，并输出为 3.jpg</span></div><div class="line">copy /b ./1.jpg + ./2.rar ./3.jpg</div><div class="line"></div><div class="line"><span class="comment"># 将 b.txt 隐写进 a.jpg 中，并输出为 c.jpg</span></div><div class="line">copy a.jpg /b + b.txt /a c.jpg</div><div class="line"></div><div class="line"><span class="comment"># 将 b.rar 隐写进 a.jpg 中，并输出为 c.jpg</span></div><div class="line">copy a.jpg /b + b.rar c.jpg</div></pre></td></tr></table></figure></div><p><em>※注：图片文件要放在前面，需要隐写的信息放在后面，不然输出的图片无法正常查看和显示</em>。</p><p>　　其中参数 <code>/b</code> 表示以二进制格式复制、合并文件，在合成图片和压缩文件等二进制文件时必须使用该参数，不然会丢失信息，从而造成合成失败，当然合成 txt 文本文件时也可以使用该参数；参数 <code>/a</code> 表示以 ASCII 码格式复制、合并文件，参数 <code>/a</code> 只适用于 txt 文本文件合并。</p><p>　　至于其它需要注意的就是：<em>1、要合成的两个文件最好放在同一目录下，不然输入路径有点麻烦； 2、txt 文本文件前面最好空三行，这样它头部的内容就不会丢失</em>。</p><p>　　输出的图片 c.jpg 和原图片 a.jpg 显示是一样的，看起来就是同一张图片，因此达到隐写的目的。</p><h2 id="win10-开启休眠方法">Win10 开启休眠方法</h2><p>　　不知道巨硬是怎么肥事，居然 Win10 中默认电源选项中没有「休眠」选项，需要手动开启。虽然睡眠和休眠有重叠的地方，但是休眠是完全关机，再次开机时会恢复原有工作状态，更多的情况是必须要关机（因为需要考虑电量情况），相反如果有充足电力的情况下，还不如使用锁定代替睡眠，从这里的需求看还不如在默认电源选项中去掉「睡眠」选项。好了，抱怨吐槽的话就说这么多了，具体开启「休眠」的方法为：只需要在命令行（需要以管理员身份打开「命令提示符」）中输入一下命令：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="BAT"><figure class="highlight hljs bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">powercfg /H on</div></pre></td></tr></table></figure></div><p>回车 执行即可在电源选项中发现「休眠」选项。</p><h2 id="windows-新建用户命令">Windows 新建用户命令</h2><p>　　前一段时间电脑系统升级之后崩了，资源管理器损坏，没有任务栏，没有桌面，Win 键都无法使用，还好可以使用任务管理器，通过任务管理器调出 cmd，输入以下命令新建一个用户：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="BASH"><figure class="highlight hljs bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加用户tmp、密码123  </span></div><div class="line">net user tmp 123 /add  </div><div class="line">  </div><div class="line"><span class="comment"># 设置tmp为管理员  </span></div><div class="line">net localgroup administrators tmp /add</div></pre></td></tr></table></figure></div><p>　　通过 tmp 用户可以正常使用电脑，因此猜测应该是原来的用户系统配置文件（例如注册表文件，系统设置文件等等）损坏。系统损坏之后捣鼓了两天，这没办法修复了，即使新建用户也还是有些软件没法使用，还不如直接重装系统（系统出现问题果然重装系统才是最快的解决方案），还好可以新建用户以备份原有系统盘文件，不然就是真 gg 了。既然新建命令记录了，也顺便记录一下删除命令吧，删除用户 tmp 命令为：<code>net user tmp /del</code> 。</p><h2 id="windows-解除-u盘或移动移动硬盘被占用技巧">Windows 解除 U盘或移动移动硬盘被占用技巧</h2><p>　　Windows 在弹出 U盘或移动硬盘时，有时会出现 “该设置正在使用中，请关闭可能使用该设备的所有程序或窗口，然后重试。” 的提示，导致 弹出 USB 大容量存储设备时出现问题，无法弹出。解决该问题需要知道是那个或哪些程序占用该存储设备，然后结束该进程即可。查看存储设备占用程序 Shaun 知道的有两种方法：</p><ol type="1"><li>通过 “Windows 日志”。Windows 每次弹窗提示都会有相应的日志，右键计算机 ==》管理 ==》事件查看器 ==》Windows日志 ==》系统，然后在窗口左侧查找其中有黄色警告的日志信息，找到来源为 <em>Kernel-PnP</em> 的日志，双击该日志即可看到 “进程 ID 为 XXX 的应用程序 XXX 已停止删除或弹出设备 XXX。” 之类的信息，从而知道是哪个进程占用该存储设备，停止该进程即可正常弹出。停止进程一般通过 任务管理器 ==》详细信息，找到对应的 名称 和 PID，右键 ==》结束任务即可。</li><li>通过 “资源监视器”。右键计算机 ==》管理 ==》性能，打开资源监视器。然后在 “CPU” 栏中找到 “关联的句柄”，在后面的搜索栏中输入存储设备的盘符（D: 、E: 或 F: 等 ），即可显示占用程序的 名称 和 PID，随后在任务管理器中停止该进程即可。</li></ol><p>　　<strong><em>※注：</em></strong> 有时只有 System 进程阻止存储设备弹出，这时可以直接关机了 :），因为 System 进程是系统核心进程，不能结束，结束之后系统会崩溃，并自动关机。当然，如果是其他进程阻止，可以用上述方法正常弹出，一般阻止存储设备弹出的都是 explorer.exe，在停止该进程后，Windows 的任务栏将会消失，所以需要在任务管理器中重新运行该任务（任务管理器 ==》文件 ==》运行新任务， 输入 “explorer” 即可）。</p><h2 id="后记">后记</h2><p>　　如果以后碰到更多有意思的小技巧再继续和大家分享吧 ↖(^ω^)↗。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://www.jianshu.com/p/a86d89c78d33" target="_blank" rel="external">windows文件夹删不掉怎么办</a></p><p>[2] <a href="https://www.windows10.pro/right-click-menu-verifying-hash-value/" target="_blank" rel="external">巧在Win10右键菜单添加校验文件Hash值命令（MD5、SHA1/256等）</a></p><p>[3] <a href="https://jingyan.baidu.com/article/72ee561a865508e16138df05.html" target="_blank" rel="external">【命令行copy命令】将txt文档与jpg图片合并</a></p><p>[4] <a href="https://answers.microsoft.com/zh-hant/windows/forum/windows_10-start-winpc/%E5%8D%87%E7%B4%9Awin10%E5%BE%8C%E7%82%BA%E4%BD%95/081e227d-a97e-4319-a726-1c1ded999d02" target="_blank" rel="external">升級Win10後，為何筆電專有的休眠選項消失了</a></p><p>[5] <a href="https://blog.csdn.net/scimence/article/details/47803873" target="_blank" rel="external">CMD命令（添加删除管理员账户）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　本篇主要用来记录在 Windows 下使用命令行能做到的一些特殊技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="Share" scheme="http://cniter.github.io/categories/Share/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg剪切与合并命令使用小结</title>
    <link href="http://cniter.github.io/posts/6315717b.html"/>
    <id>http://cniter.github.io/posts/6315717b.html</id>
    <published>2018-05-28T13:19:07.000Z</published>
    <updated>2018-07-14T11:45:36.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　前面有一段时间需要对视频做一些简单的处理，所以就去查了一下一些常用的视频处理工具，因为不想再另外装个什么软件，所以就决定直接采用 <a href="https://www.ffmpeg.org/" target="_blank" rel="external">FFmpeg</a> 了，毕竟其它的一些视频处理软件也极有可能只是对 FFmpeg 进行一些图形化界面的封装而已。</p><a id="more"></a><p>　　而在查找 FFmpeg 相关资料的时候，也同时发现了 <a href="https://www.libav.org/" target="_blank" rel="external">Libav</a> ， 对于 FFmpeg 和 Libav Shaun 只想说，开源界的战争总是这么莫名其妙，有各种各种一些奇怪的原因（或许大佬们都是各有各的脾性吧 ╮(╯▽╰)╭），像两个小飞机的战争也是如此，不过神仙打架，凡人享福也好 ~\(≧▽≦)/~。神仙们的想法我等凡人是无法揣测了，不过这种事还是少出点为好，不然下次变为小鬼遭殃就不好了。</p><p>　　使用 FFmpeg 而不是 Libav 是因为 FFmpeg 的相关资料相对来说要多很多；而且Libav 更新的特性，FFmpeg 全都支持；更重要的是 FFmpeg 是更新特别频繁，差不多是日更了，几乎每天都会发布一个稳定版；而且从两者的下载页面来看， FFmpeg 好像更会照顾跨平台用户一点。下文主要是对 FFmpeg 的部分命令进行记录总结。</p><p><em>Shaun 的系统环境为 Win10 1607，测试的 FFmpeg 版本为 ffmpeg-20180429-19c3df0-win64-static</em>。</p><p>　　在 Win10 下使用 FFmpeg 前首先需要配置系统环境变量，Windows 下 FFmpeg 的安装是下载完 Windows 版编译好的 FFmpeg 压缩包后直接解压即可，<strong>将解压后的 FFmpeg 文件夹中的 bin 目录添加到系统环境变量 Path 中</strong>，不然系统会无法找到 ffmpeg 命令。</p><h2 id="剪切命令">剪切命令</h2><p>　　FFmpeg 的剪切命令的参数很多，因此可以使用不同参数排列组合达到不同的剪切效果，具体如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="BASH"><figure class="highlight hljs bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># （1）快速剪切video.mp4从第一分钟开始持续两分钟的视频，即到第三分钟，并将剪切结果输出为cut.mp4</span></div><div class="line">ffmpeg -ss 00:01:00 -i video.mp4 -to 00:02:00 -c copy cut.mp4</div><div class="line"></div><div class="line"><span class="comment"># （2）快速剪切video.mp4从第一分钟开始持续两分钟的视频，即到第三分钟，并将剪切结果输出为cut.mp4</span></div><div class="line">ffmpeg -ss 00:01:00 -i video.mp4 -t 00:02:00 -c copy cut.mp4</div><div class="line"></div><div class="line"><span class="comment"># （3）快速剪切video.mp4从第一分钟开始到第二分钟的视频，并将剪切结果输出为cut.mp4</span></div><div class="line">ffmpeg -ss 00:01:00 -i video.mp4 -to 00:02:00 -c copy -copyts cut.mp4</div><div class="line"></div><div class="line"><span class="comment"># （4）精确剪切video.mp4从第一分钟开始到第二分钟的视频，并将剪切结果输出为cut.mp4</span></div><div class="line">ffmpeg -i video.mp4 -ss 00:01:00 -to 00:02:00 -c copy cut.mp4</div><div class="line"></div><div class="line"><span class="comment"># （5）精确剪切video.mp4从第一分钟开始持续两分钟的视频，即到第三分钟，并将剪切结果输出为cut.mp4</span></div><div class="line">ffmpeg -i video.mp4 -ss 00:01:00 -t 00:02:00 -acodec copy -vcodec copy cut.mp4</div><div class="line"></div><div class="line"><span class="comment"># （6）快速剪切video.mp4从第三分钟开始持续60秒的视频，即到第四分钟，并将剪切结果输出为cut.mp4</span></div><div class="line">ffmpeg -ss 00:03:00 -i video.mp4 -t 60 -c copy -avoid_negative_ts 1 cut.mp4</div></pre></td></tr></table></figure></div><p>以下为各参数的含义：</p><ul><li><code>-i</code>：用法为 <code>-i INPUT_VIDEO</code>，代表输入的视频，该视频应为 MPEG 编码（h.264, MPEG4/divx/xvid, MPEG2; MP2, MP3, AAC） ；</li><li><code>-ss</code>：用法为 <code>-ss START_TIME</code>，代表剪切的开始时间，时间格式有两种写法：1、纯数字格式，以秒为单位（eg: <code>-ss 90</code>，代表从第90秒开始剪切）；2、时:分:秒 格式（eg: <code>-ss 00:01:30</code>，代表从 0 时 1 分 30 秒开始剪切）；</li><li><code>-to</code>：用法为 <code>-to STOP_TIME</code>，代表剪切的结束时间，时间格式同样有两种写法：1、纯数字格式，以秒为单位（eg: <code>-to 180</code>，代表第180秒结束剪切）；2、时:分:秒 格式（eg: <code>-to 00:03:00</code>，代表 0 时 3 分 00 秒结束剪切）；</li><li><code>-t</code>：用法为 <code>-t DURATION_TIME</code>，代表剪切的持续时间，时间格式同样有两种写法：1、纯数字格式，以秒为单位（eg: <code>-to 180</code>，代表剪切持续180秒）；2、时:分:秒 格式（eg: <code>-to 00:03:00</code>，代表剪切持续 0 时 3 分 00 秒）；</li><li><code>-c</code>：用法为 <code>-c CODEC</code>，代表音视频编码格式（若 CODEC 为 <code>copy</code> 则代表输出视频的音视频编码格式与原视频一样），其实 <code>-c</code> 是 <code>-codec</code> 的缩写，其中包含音频编码参数 <code>-acodec</code> 和 视频编码参数 <code>-vcodec</code> ；</li><li><code>-copyts</code>：保持原有时间戳，即使当 <code>-ss</code> 在 <code>-i</code> 之前时，仍使 <code>-t</code> 和 <code>-to</code> 保持原有效果，不会被同化；</li><li><code>-avoid_negative_ts</code>：当开启该参数时，剪切视频会找到首尾的相邻关键帧（这样会造成剪切时间不精确），补全视频，当 <code>-ss</code> 在 <code>-i</code> 之前时该参数默认开启；</li><li><code>-accurate_seek</code>：使剪切时间更精确，在转码时该参数默认启用。</li><li>更多参数可参考：<a href="https://ffmpeg.org/ffmpeg-all.html#Format-Options" target="_blank" rel="external">Format-Options</a> 。</li></ul><p><strong>※注：</strong> 1、<code>-t</code> 和 <code>-to</code> 不能同时使用，若同时使用，将以 <code>-t</code> 为准；　　2、当 <code>-ss</code> 在 <code>-i</code> 之前时，可以实现快速剪切，但剪切的时间点不精确，此时<code>-to</code> 和 <code>-t</code> 的效果一样，都表现为 <code>-t</code> ，此时可以加上 <code>-copyts</code> 参数使两者效果不一样；　　3、当 <code>-ss</code> 在 <code>-i</code> 之后时，剪切的时间点比较精确，但剪切速度比较慢。</p><p>　　以上命令（1）、（2）是一样的剪切结果，命令（3）的 <code>-t</code> 和 <code>-to</code> 会产生不一样的结果，（6）的 <code>-t</code> 和 <code>-to</code> 会产生一样的结果。<strong>因此若只考虑速度，可以使用命令（3），若需使剪切时间精确，则需使用命令（4）和（5）</strong>。</p><p><strong>PS：</strong>当然还有一种更精确的方式，通过命令 <code>ffmpeg -i input.mp4 -strict -2 -qscale 0 -intra output.mp4</code> 将输入视频由原来的帧间编码转换为帧内编码，使每一帧都成为关键帧，如此转换之后再进行剪切，可使剪切时间十分精确，但该转换方式会造成视频文件空间成倍增大。</p><h2 id="合并命令">合并命令</h2><p>　　FFmpeg 的合并命令大概有 4 种，可参考： <a href="https://blog.csdn.net/doublefi123/article/details/47276739" target="_blank" rel="external">FFMpeg无损合并视频的多种方法</a> 。这里主要介绍两种：</p><h3 id="方法一使用-ffmpeg-concat-分离器推荐">方法一：使用 FFmpeg concat 分离器（推荐）</h3><p>　　该方法使用命令为：<code>ffmpeg -f concat -i filelist.txt -c copy output.mp4</code>，其中 filelist.txt 文件最好和待合并的视频在同一个文件夹中，文件中内容就是待合并的视频的描述，具体内容如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">file &apos;input1.mp4&apos;</div><div class="line">file &apos;input2.mp4&apos;</div></pre></td></tr></table></figure></div><p>或</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="PLAIN"><figure class="highlight hljs plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">file ./input1.mp4</div><div class="line">file ./input2.mp4</div></pre></td></tr></table></figure></div><p><strong>※注：</strong> <em>待合并的视频文件名最好由英文、数字、连接符（<code>-</code>）或下划线（<code>_</code>）组成，且中间最好不要有空格，不然可能会因为文件名而在合并时出现一些奇怪的错误</em>。</p><h3 id="方法二利用中间格式合并">方法二：利用中间格式合并</h3><p>　　所谓利用中间格式进行合并是因为可能有些待合并的视频编码不一致，这时采用方法一可能无法进行合并，这时需要对待合并的视频的进行统一转码，都转成同一个编码格式。若要采用这种方法，建议都转成 mpg 格式，因为 mpg 格式可以直接 cat 命令进行合并，具体如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="BASH"><figure class="highlight hljs bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将input1.avi转成intermediate1.mpg,输出视频质量为1</span></div><div class="line">ffmpeg -i input1.avi -qscale:v 1 intermediate1.mpg</div><div class="line"><span class="comment"># 将input2.mp4转成intermediate2.mpg,输出视频质量为1</span></div><div class="line">ffmpeg -i input2.mp4 -qscale:v 1 intermediate2.mpg</div><div class="line"><span class="comment"># 合并intermediate1.mpg和intermediate2.mpg，输出合并结果intermediate_all.mpg</span></div><div class="line">cat intermediate1.mpg intermediate2.mpg &gt; intermediate_all.mpg</div><div class="line"><span class="comment"># 将intermediate_all.mpg转成output.avi,输出视频质量为2</span></div><div class="line">ffmpeg -i intermediate_all.mpg -qscale:v 2 output.avi</div></pre></td></tr></table></figure></div><p>　　其中参数 <code>-qscale</code> 是指使用固定的视频量化标度 ，取值范围为 0.01 ~ 255 ，越小代表质量越好，一般推荐取值为 2 ~ 5，实际使用不能超过 50， <code>-qscale:v</code> 代表设置视频输出质量。</p><p><strong>PS：</strong> <em>方法一为无损合并，方法二为有损合并</em>。</p><h2 id="后记">后记</h2><p>　　以后有用到新的命令再继续记录吧 ↖(^ω^)↗ 。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="external">ffmpeg Documentation</a>（<a href="https://ffmpeg.org/documentation.html" class="uri" target="_blank" rel="external">https://ffmpeg.org/documentation.html</a>）</p><p>[2] <a href="http://trac.ffmpeg.org/wiki/Seeking" target="_blank" rel="external">FFmpeg wiki: Seeking</a>（<a href="http://trac.ffmpeg.org/wiki" class="uri" target="_blank" rel="external">http://trac.ffmpeg.org/wiki</a>）</p><p>[3] <a href="http://fzheng.me/2016/01/08/ffmpeg/" target="_blank" rel="external">FFmpeg：视频转码、剪切、合并、播放速调整</a></p><p>[4] <a href="https://segmentfault.com/a/1190000000414341" target="_blank" rel="external">通过 ffmpeg 无损剪切/拼接视频</a></p><p>[5] <a href="https://blog.csdn.net/u012587637/article/details/51670975" target="_blank" rel="external">使用ffmpeg合并视频文件的三种方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　前面有一段时间需要对视频做一些简单的处理，所以就去查了一下一些常用的视频处理工具，因为不想再另外装个什么软件，所以就决定直接采用 &lt;a href=&quot;https://www.ffmpeg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FFmpeg&lt;/a&gt; 了，毕竟其它的一些视频处理软件也极有可能只是对 FFmpeg 进行一些图形化界面的封装而已。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="ffmpeg" scheme="http://cniter.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>解决VSCode使用Cmder作为默认终端问题</title>
    <link href="http://cniter.github.io/posts/fd823bf9.html"/>
    <id>http://cniter.github.io/posts/fd823bf9.html</id>
    <published>2018-05-17T14:16:59.000Z</published>
    <updated>2018-07-14T12:28:56.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　Shaun 最近想换换新口味，想尝试用 Cmder 作为 VSCode 下的默认终端，不想再继续使用 git-bash 了，因为 git-bash 有时会出现一些乱码问题。但是在用 VSCode 集成 Cmder 时出现了几个问题。</p><a id="more"></a><h2 id="问题篇">问题篇</h2><p>　　如果在 VSCode 用户设置文件中直接添加 Cmder.exe 及其路径，那么在使用 VSCode 终端时会重新打开一个 Cmder 窗口，而不是直接显示在 VSCode 的「终端」里。Shaun 想要的是 Cmder 就是 VSCode 的终端，就在 VSCode 里，就和原有cmd 终端一样，在 VSCode 下的终端可以直接输入相关命令，而不是另外弹出一个命令行窗口。</p><h2 id="解决方案篇">解决方案篇</h2><h3 id="方法一">方法一</h3><p>将 Cmder 放进一个文件夹中，文件夹名不带空格，比如 Shaun 所有的绿色软件全部放在 <code>D:\ProgramFiles</code> 下，在 VSCode 用户设置文件中添加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"terminal.integrated.shell.windows": "C:\\Windows\\Sysnative\\cmd.exe",</div><div class="line">"terminal.integrated.shellArgs.windows": [</div><div class="line">    <span class="string">"/k D:\\ProgramFiles\\Cmder\\vendor\\init.bat"</span></div><div class="line">],</div></pre></td></tr></table></figure><h3 id="方法二">方法二</h3><p>一部分用户可能有点强迫症 ๑乛◡乛๑，硬是要把绿色软件还放入系统盘中的 <code>Program Files</code> 文件夹里，这样在 VSCode 里配置 Cmder 作为默认终端时就会出现问题。主要是因为 <code>Program Files</code> 文件夹名中有空格（这里吐槽一下带空格的文件名真鸡儿坑爹，命令行中根本无法访问，这应该是巨硬的历史遗留问题了， 特立独行的支持带空格的路径名，想显摆一下自己，但以目前的情况看，这种支持简直无力吐槽，造成了一堆问题，和 Windows 路径名中的 <code>\</code> 有的一拼，都是逼死现代程序员的设计 _(´ཀ`」 ∠)_）。好了，吐槽的话也就说到这里了，如果配置路径里无法避免 Program Files 文件夹，这里有三种解决方案：</p><ol type="1"><li><p>Windows 在支持带空格的长文件名的同时，也会分配一个短名称，可以称为该文件夹的别名，通过这个别名就可以在命令行中访问该文件夹，获取这个别名的方法有：在命令行中输入 <code>dir /X</code> ，即可在文件夹名之前的一列的看到该别名，若没有别名则为空白，若要添加别名则需要加入 <code>/N</code> 参数。Shaun 这里显示别名如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="BASH"><figure class="highlight hljs bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ dir /X</div><div class="line"> 驱动器 C 中的卷是 System</div><div class="line"> 卷的序列号是 XXXX-XXXX</div><div class="line"></div><div class="line"> C:\ 的目录</div><div class="line"></div><div class="line">.........</div><div class="line"></div><div class="line">2018/05/16  19:21    &lt;DIR&gt;          PROGRA~1     Program Files</div><div class="line">2018/05/17  15:14    &lt;DIR&gt;          PROGRA~2     Program Files (x86)</div><div class="line"></div><div class="line">..........</div></pre></td></tr></table></figure></div><p>由上面可知 <code>Program Files</code> 文件夹的别名为 <code>PROGRA~1</code>，而 <code>Program Files (x86)</code> 文件夹的别名为 <code>PROGRA~2</code>，在配置路径时只需要用别名替换相应的文件夹名即可，如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="JSON"><figure class="highlight hljs json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Windows\\Sysnative\\cmd.exe"</span>,</div><div class="line">    <span class="attr">"terminal.integrated.shellArgs.windows"</span>: [</div><div class="line">        <span class="string">"/k C:\\PROGRA~1\\Cmder\\vendor\\init.bat"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></div></li><li><p>通过转义符添加 <code>&quot; &quot;</code> 使 <code>Program Files</code> 作为一个整体，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"terminal.integrated.shell.windows": "cmd.exe",</div><div class="line">"terminal.integrated.shellArgs.windows": ["/k", "C:\\\"Program Files\"\\Cmder\\vendor\\init.bat"],</div></pre></td></tr></table></figure></li><li><p>直接在系统环境变量中新建一个变量，将 Cmder 的根目录加进去，如下：</p><table><thead><tr class="header"><th>变量名</th><th>变量值</th></tr></thead><tbody><tr class="odd"><td>CMDER_ROOT</td><td>C:\Program Files</td></tr></tbody></table><p>再在 VSCode 用户设置文件中添加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"terminal.integrated.shell.windows": "C:\\Windows\\system32\\cmd.exe",</div><div class="line">"terminal.integrated.shellArgs.windows": [</div><div class="line">    <span class="string">"/k %CMDER_ROOT%\\vendor\\init.bat"</span></div><div class="line">]</div></pre></td></tr></table></figure></li></ol><p>通过以上几种方法（<strong><em>推荐直接使用方法一</em></strong>），就能成功在 VSCode 中集成 Cmder，可以直接在 VSCode 的终端里享受 Cmder 了。</p><h2 id="后记">后记</h2><p>　　没有什么好说的了，该吐槽也已经吐槽完了。<strong>方法二</strong> Shaun <strong>没</strong>试过，只是感觉应该可行，有问题的小伙伴可以在下方留言（这是不可能的，这辈子都不会有人留言的，反正也没人会看到的 ╮(╯▽╰)╭）。以上解决方案全部来自网络，Shaun 只是做个总结记录，万一以后碰到类似问题至少有多种方案可以尝试。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://stackoverflow.com/questions/45765853/how-to-use-cmder-in-visual-studio-code" target="_blank" rel="external">How to use Cmder in Visual Studio Code?</a></p><p>[2] <a href="https://github.com/Microsoft/vscode/issues/12006" target="_blank" rel="external">Setting Cmder.exe as integrated shell still opens in separate window</a></p><p>[3] <a href="http://www.cnblogs.com/eastegg/p/8532266.html" target="_blank" rel="external">IntelliJ idea webstrom Visual Studio Code vscode 设置cmder为默认终端 Terminal</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　Shaun 最近想换换新口味，想尝试用 Cmder 作为 VSCode 下的默认终端，不想再继续使用 git-bash 了，因为 git-bash 有时会出现一些乱码问题。但是在用 VSCode 集成 Cmder 时出现了几个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Problems" scheme="http://cniter.github.io/categories/Problems/"/>
    
    
      <category term="vscode" scheme="http://cniter.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>图割算法之NCuts浅见</title>
    <link href="http://cniter.github.io/posts/fddd1e17.html"/>
    <id>http://cniter.github.io/posts/fddd1e17.html</id>
    <published>2018-04-26T03:36:16.000Z</published>
    <updated>2018-07-14T12:12:13.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　图割算法主要有两个发展方向，一个是 Shaun 上次写过的 <a href="http://cniter.github.io/posts/c42ff8d4.html"><strong>Graph Cuts</strong></a> ，通过边界项和区域项（有的可能还会添加一个约束项，或者叫标签项）之和建立能量方程，并利用一定程度的交互式构建一个 S/T 图，最后采用最大流/最小割（Max-flow/Min-cut ）算法寻找 S/T 图的最小“割”，从而对图像进行分割；而另一个方向就是 <strong>NCuts</strong>（Normalized Cuts），中文一般叫规范割、标准割等等，该方法主要出自：<em>Shi J, Malik J. Normalized cuts and image segmentation[J]. IEEE Transactions on pattern analysis and machine intelligence, 2000, 22(8): 888-905.</em> 。</p><a id="more"></a><p>提到 NCuts，就不得不提「谱聚类」，因为 NCuts 可以说是谱聚类的一个应用。</p><h2 id="谱聚类篇">谱聚类篇</h2><blockquote><p>谱聚类（Spectral Clustering， SC）是一种基于图论的聚类方法——将无向带权图划分为两个或两个以上的最优子图(sub-Graph)，使子图内部尽量相似，而子图间距离尽量远，以达到常见的聚类的目的。</p></blockquote><p>在了解谱聚类之前需要先了解两个概念：拉普拉斯矩阵（Laplace Matrix）和瑞利熵（Rayleigh quotient）。</p><h3 id="拉普拉斯矩阵">拉普拉斯矩阵</h3><p>拉普拉斯矩阵的定义如下：</p><blockquote><p>设 <span class="math inline">\(W\)</span> 为无向带权图 <span class="math inline">\(G=(V,E)\)</span> 的邻接矩阵，<span class="math inline">\(D\)</span> 为无向带权图 <span class="math inline">\(G\)</span> 的度矩阵，（所谓的度矩阵即为图中各顶点邻接的所有边权值之和构成的矩阵，是一个对角矩阵，若设顶点 <span class="math inline">\(i\)</span> 和顶点 <span class="math inline">\(j\)</span> 之间的权值为 <span class="math inline">\(w(i,j)\)</span>，则度矩阵对角线上的元素 <span class="math inline">\(d_{i,i}=\sum \limits_{j=1}^n w(i,j)\)</span> ），则拉普拉斯矩阵 <span class="math inline">\(L=D-W\)</span>。如下图：</p><blockquote><p>若图的邻接矩阵：<span class="math inline">\(\mathbf{W}=\begin{pmatrix} 0 &amp; 0.1 &amp; 0 &amp; 0 &amp; 0.2 &amp; 0 \\ 0.1 &amp; 0 &amp; 0 &amp; 0.5 &amp; 0.1 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0.3 &amp; 0 &amp; 0.4 \\ 0 &amp; 0.5 &amp; 0.3 &amp; 0 &amp; 0 &amp; 0.1 \\ 0.2 &amp; 0.1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0.4 &amp; 0.1 &amp; 0 &amp; 0 \end{pmatrix}\)</span> ，其中图中不连通的顶点之间的权值为 0；</p><p>则对应的度矩阵为：<span class="math inline">\(\mathbf{Ｄ}=\begin{pmatrix} 0.3 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0.7 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0.7 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0.9 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0.3 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0.5 \end{pmatrix}\)</span></p><p>则拉普拉斯矩阵 <span class="math inline">\(L\)</span> 为：<span class="math inline">\(\mathbf{L}=\mathbf{D}-\mathbf{W}=\begin{pmatrix} 0.3 &amp; -0.1 &amp; 0 &amp; 0 &amp; -0.2 &amp; 0 \\ -0.1 &amp; 0.7 &amp; 0 &amp; -0.5 &amp; -0.1 &amp; 0 \\ 0 &amp; 0 &amp; 0.7 &amp; -0.3 &amp; 0 &amp; -0.4 \\ 0 &amp; -0.5 &amp; -0.3 &amp; 0.9 &amp; 0 &amp; -0.1 \\ -0.2 &amp; -0.1 &amp; 0 &amp; 0 &amp; 0.3 &amp; 0 \\ 0 &amp; 0 &amp; -0.4 &amp; -0.1 &amp; 0 &amp; 0.5 \end{pmatrix}\)</span></p><p>以上三个矩阵都为实对称矩阵。对于拉普拉斯矩阵，由 $L* [1,1,1,1,1,1]^T =0* [1,1,1,1,1,1]^T= $ 可知其一定存在一个特征值为 0，对应的特征向量为 <span class="math inline">\([1,1,1,1,1,1]^T\)</span> 。</p><p>拉普拉斯矩阵是半正定的，且对应的 n 个实数特征值都大于等于 0，即 <span class="math inline">\(0=λ_1≤λ_2≤\cdots≤λ_n\)</span>， 且最小的特征值为 0 。</p><p>至于拉普拉斯矩阵的更多性质，可参考：<a href="https://en.wikipedia.org/wiki/Laplacian_matrix" target="_blank" rel="external"><strong>Laplacian matrix</strong></a> 。</p></blockquote></blockquote><h3 id="瑞利熵">瑞利熵</h3><p>　　瑞利熵的公式形如：<span class="math inline">\(R(M,x)=\frac{x^*Mx}{x^*x}\)</span> ，其中 M 是厄米特矩阵（Hermitian matrix），满足 <span class="math inline">\(M=M^H\)</span> ，即矩阵 <span class="math inline">\(M\)</span> 与其共轭转置矩阵相等，<span class="math inline">\(x\)</span> 为非 0 向量，<span class="math inline">\(x^*\)</span> 是指 <span class="math inline">\(x\)</span> 向量的共轭转置向量。对于实数而言，厄米特矩阵就是对称阵 <span class="math inline">\(M=M^T\)</span>，<span class="math inline">\(x^*\)</span> 就是 <span class="math inline">\(x\)</span> 向量的转置向量 <span class="math inline">\(x&#39;\)</span> 或 <span class="math inline">\(x^T\)</span>。</p><p>　　若设 <span class="math inline">\(x^*x=c\)</span>，其中 <span class="math inline">\(c\)</span> 为一个常数，则 <span class="math inline">\(R(M,x)=\frac{x^*Mx}{c}\)</span> ，则其极值问题可转化为：<span class="math inline">\(\min R(M,x) = \min x^*Mx \qquad s.t.\ x^*x=c\)</span> ，可利用拉格朗日乘数法求取 <span class="math inline">\(x^*Mx\)</span> 的极值。 具体求法如下： <span class="math display">\[ \mathcal{L}(x) = x^T M x -\lambda \left (x^Tx - c \right) \\ \begin{align} &amp;\frac{d\mathcal{L}(x)}{dx} = 0 \\ &amp;\Rightarrow x^TM - \lambda x^T = 0 \\ &amp;\Rightarrow Mx - \lambda x = 0 \\ &amp;\Rightarrow M x = \lambda x \end{align} \\ \therefore R(M,x) = \frac{x^T M x}{x^T x} = \lambda \frac{x^Tx}{x^T x} = \lambda. \]</span></p><p>瑞利熵有如下几个性质：</p><blockquote><ul><li>R 的最大值就是 M 最大特征值，R 的最小值就是 M 最小特征值 ；</li><li>x 的解，就是 M 对应的特征向量。</li></ul><p>至于瑞利熵的更多性质，可参考：<a href="https://en.wikipedia.org/wiki/Rayleigh_quotient" target="_blank" rel="external"><strong>Rayleigh quotient</strong></a> 。</p></blockquote><p>　　以上只是一般意义上的普通瑞利熵，还有一个广义瑞利熵（<strong>generalized Rayleigh quotient</strong> ），其定义为：<span class="math inline">\(R(M,D;x)=\frac{x^*Mx}{x^*Dx}\)</span> ，即在分母上添加一个 D 矩阵相乘，其中 D 为 <strong>Hermite 正定矩阵</strong> ，满足 <span class="math inline">\(D=D^*\)</span>，普通瑞利熵是广义瑞利熵中 D 矩阵为单位矩阵时的情况。广义瑞利熵可以通过以下变换转换为普通瑞利熵： <span class="math display">\[ \begin{equation} \begin{aligned} R(M,D;x) &amp;= \frac{x^*Mx}{x^*Dx} \xlongequal{x=D^{-\frac{1}{2}}y} \frac{(D^{-\frac{1}{2}}y)^*M(D^{-\frac{1}{2}}y)}{(D^{-\frac{1}{2}}y)^*D(D^{-\frac{1}{2}}y)} \\ &amp;= \frac{y^*(D^{-\frac{1}{2}})^*M(D^{-\frac{1}{2}}y)}{y^*(D^{-\frac{1}{2}})^*D(D^{-\frac{1}{2}}y)}=\frac{y^*D^{-\frac{1}{2}}MD^{-\frac{1}{2}}y}{y^*D^{-\frac{1}{2}}DD^{-\frac{1}{2}}y} \\ &amp;= \frac{y^*(D^{-\frac{1}{2}}MD^{-\frac{1}{2}})y}{y^*y} \end{aligned} \end{equation} \]</span></p><p>只需要求出矩阵 <span class="math inline">\(D^{-\frac{1}{2}}MD^{-\frac{1}{2}}\)</span> 的特征值和特征向量即可。</p><hr><p><em>好了，这两个概念介绍完了，就可以真正介绍谱聚类了。</em></p><p>　　上面说了，谱聚类是一种基于图论的聚类方法，既然有图，则必有相应的邻接矩阵。设图 G 的顶点被聚类成两类，即将图 G 分割为子图 A 和 B，则所要断开的边的权值之和为代价函数（也叫损失函数），类似于“Graph Cuts”中的能量方程。割边 Cut(A,B) 的具体表示为：<span class="math inline">\(Cut(A,B)=\sum \limits_{i \in A,j \in B} w(i,j)\)</span> 。</p><p>　　设图 <span class="math inline">\(G\)</span> 中共有 <span class="math inline">\(n\)</span> 个顶点，则需要构建一个 <span class="math inline">\(n \times n\)</span> 的邻接矩阵 <span class="math inline">\(W\)</span>，其相应的度矩阵为 <span class="math inline">\(D\)</span>，对应的拉普拉斯矩阵为 <span class="math inline">\(L=D-W\)</span>，令 <span class="math inline">\(p_i = \begin{cases} l_1 &amp; i \in A \\ l_2 &amp; i \in B\end{cases}\)</span> ，则 <span class="math display">\[ Cut(A,B)=\sum \limits_{i \in A,j \in B} w(i,j) = \frac{\sum \limits_{i=1}^n \sum \limits_{j=i}^n w(i,j) (p_i-p_j)^2}{(l_1-l_2)^2}= \frac{\sum \limits_{i=1}^n \sum \limits_{j=1}^n w(i,j) (p_i-p_j)^2}{2(l_1-l_2)^2} \]</span></p><p>当且仅当 <span class="math inline">\(i\)</span> 和 <span class="math inline">\(j\)</span> 不属于同一子图时，<span class="math inline">\((p_i-p_j)^2/(l_1-l_2)^2=1\)</span>，否则 <span class="math inline">\((p_i-p_j)^2/(l_1-l_2)^2=0\)</span>，（为什么采取这种计算方式，是因为在无法直接确定割边时，用这种计算方式能确保全部割边且只有割边会被加入权重之和），至于为什么等式最后还要除以 2 ，是因为等式最后的那种写法每条边会被遍历两次，每条割边权值会被计入两次，所以还要除以2。</p><p>而： <span class="math display">\[ \begin{equation} \begin{aligned} &amp; \sum \limits_{i=1}^n \sum \limits_{j=1}^n w(i,j) (p_i-p_j)^2 = \sum \limits_{i=1}^n \sum \limits_{j=1}^n w(i,j) (p_i^2-2p_ip_j+p_j^2) \\ &amp;= \sum \limits_{i=1}^n \sum \limits_{j=1}^n w(i,j) (p_i^2) + \sum \limits_{i=1}^n \sum \limits_{j=1}^n w(i,j) (p_j^2) - \sum \limits_{i=1}^n \sum \limits_{j=1}^n w(i,j) (2p_ip_j) \\ &amp;= \sum \limits_{i=1}^n p_i^2 (\sum \limits_{j=1}^n w(i,j)) + \sum \limits_{j=1}^n p_j^2 (\sum \limits_{i=1}^n w(i,j)) - 2\sum \limits_{i=1}^n \sum \limits_{j=1}^n p_iw(i,j) p_j \\ &amp;= p^TDp+p^TDp-2p^TWp = 2p^T(D-W)p = 2p^TLp \end{aligned} \end{equation} \]</span></p><p>则：<span class="math inline">\(Cut(A,B)=\frac{p^TLp}{(l_1-l_2)^2}\)</span> ，当 <span class="math inline">\(l_1=1,l_2=-1\)</span> 时， <span class="math inline">\(\min Cut(A,B) = \min p^TLp \qquad s.t.\ p^Tp=n\)</span> ，n 为图的顶点个数。由上可知，该最小割问题即是一个瑞利熵问题，只需求取 <span class="math inline">\(L\)</span> 的特征值和特征向量。</p><p>　　对 <span class="math inline">\(L\)</span> 的特征值进行从小到大排列（即<strong>取最小 k 个特征向量</strong>），若要分成 k 类，则需要取前 k 个特征值（除 0 以外）对应的特征向量，并归一化，将每一个特征向量按列排列构成一个 <span class="math inline">\(n \times k\)</span> 的特征矩阵，对特征矩阵的行向量使用 k-means 或其它聚类算法，将 n 个行向量聚成 k 类，每一行都属于某一类，根据聚类结果为每个顶点分配相应的类标签，从而完成谱聚类。所以利用谱聚类求的解相当于是一个近似解，它将连续的 n 维问题离散化为 k 维问题，p 是一个 n 维的标签向量，标签值为 <span class="math inline">\(\{1,2,\cdots,k\}\)</span> ，而 <span class="math inline">\(L\)</span> 的特征向量中的元素并不是离散化的 <span class="math inline">\(\{1,2,\cdots,k\}\)</span> ，无法直接用 <span class="math inline">\(L\)</span> 的特征向量作为标签向量，所以需要将其离散化，对特征矩阵的行向量进行聚类，从而近似的生成标签向量；由于只取前 k 个特征向量，所以在对特征矩阵进行聚类时被聚类的 n 条数据只有 k 维，而本来 <span class="math inline">\(L\)</span> 的特征向量至少有 n 个，即被聚类的 n 条数据至少有 n 维，所以从某种程度上，谱聚类同时也对数据进行了降维处理。</p><p><strong>※注：</strong> <em>推荐使用 <strong>SVD</strong> 代替特征值和特征向量的求取</em>。至于谱聚类的更多性质，可参考：<a href="https://en.wikipedia.org/wiki/Spectral_clustering" target="_blank" rel="external"><strong>Spectral clustering</strong></a>。</p><p>　　因为有时候简单的全局最小割，可能并不是最优割，所以需要对割做一个归一化，即 <strong>Normalized Cuts</strong> ，简称 NCuts。</p><h2 id="图篇">图篇</h2><p>　　同样，Shaun 还从图的构造开始，NCuts 所需要构造的图就是最普通的无向带权图，<strong>图的顶点由图像中像素点构成，相邻的像素点之间互相连接构成图的边</strong>。边的权值计算公式为： <span class="math display">\[ w(i,j) = e^{\dfrac{-\|\mathbf{F}(i)-\mathbf{F}(j)\|_2^2}{\sigma_I}} * \begin{cases} e^{\dfrac{-\|\mathbf{X}(i)-\mathbf{X}(j)\|_2^2}{\sigma_X}} &amp; \text{if } \|\mathbf{X}(i)-\mathbf{X}(j)\|_2 &lt; r \\ 0 &amp; \text{otherwise}. \end{cases} \]</span> 　　其中 <span class="math inline">\(\mathbf{X}(·)\)</span> 是指该顶点的空间位置向量，即图像中像素点的坐标； <span class="math inline">\(\mathbf{F}(·)\)</span> 可指像素点的强度（灰度）值，颜色向量或纹理值；<span class="math inline">\(\|\mathbf{X}(i)-\mathbf{X}(j)\|_2\)</span> 表示向量的「2-范数」，即欧氏距离。当 <span class="math inline">\(\mathbf{F}(·)\)</span> 表示强度（灰度）值时，NCuts 分割的是灰度图；当 <span class="math inline">\(\mathbf{F}(·)\)</span> 表示颜色向量（一般在 HSV 颜色空间，有 <span class="math inline">\((h,s,v)\)</span> 三个颜色分量）时，NCuts 分割的是彩色图。对于这个权值的计算说人话就是：当两个像素点之间的距离大于一个人为指定的 <span class="math inline">\(r\)</span> 时（其实也就用这个 <span class="math inline">\(r\)</span> 判断到底是连接 4 邻域还是连接 8 邻域，一般不会连接 8 邻域之外的像素点），就不连接，此时权值设为 0 ；否则，则计算两像素点颜色向量的 RBF 核的值和两像素点坐标向量的 RBF 核的值，并取其乘积作为权值。</p><p>好了，Ncuts 的图的构成大致就是这样。接下来就是它的割法了。</p><h2 id="割篇">割篇</h2><p>　　NCuts 中定义割 <span class="math inline">\(Cut(A,B)=\sum \limits_{i \in A,j \in B} w(i,j)\)</span> ，定义 <span class="math inline">\(assoc(A,V)=\sum\limits_{i \in A,t \in V}w(i,t)\)</span> 为子图 A 内所有像素点连接的所有边权重之和，最终的 NCuts 目标函数如下： <span class="math display">\[ Ncut(A,B)= \frac{cut(A,B)}{assoc(A,V)}+\frac{cut(A,B)}{assoc(B,V)} \]</span> 即通过除以两个子图内所有像素点连接的所有边权值之和对割做了个归一化处理。</p><p>　　令 <span class="math inline">\(\mathbf{W}\)</span> 为图的邻接矩阵， <span class="math inline">\(\mathbf{D}\)</span> 为其对应的度矩阵，<span class="math inline">\(L=D-W\)</span> 为其对应的拉普拉斯矩阵，令 <span class="math inline">\(S_1 = assoc(A,V) = \sum\limits_{i \in A}D_{ii}\)</span>，<span class="math inline">\(S_2 = assoc(B,V) = \sum\limits_{i \in B}D_{ii}\)</span>，则 <span class="math inline">\(S = S_1+S_2=\sum\limits_{i \in A}D_{ii}+\sum\limits_{i \in B}D_{ii}=\sum D_{ii}= \sum \limits_{i=1}^n\sum \limits_{j=1}^n w(i,j)\)</span> ，则：<span class="math inline">\(NCut(A,B)=\frac{p^TLp}{(l_1-l_2)^2}*(\frac{1}{S_1}+\frac{1}{S_2})\)</span> ，其中向量 <span class="math inline">\(p\)</span> 为 <span class="math inline">\(N=|V|\)</span> 维的标签向量， <span class="math inline">\(p_i = \begin{cases} l_1 &amp; i \in A \\ l_2 &amp; i \in B\end{cases}\)</span> ，令 <span class="math inline">\(l_1 = \sqrt{\frac{S_2}{S_1S}},l_2=-\sqrt{\frac{S_1}{S_2S}}\)</span> ，则 <span class="math inline">\(NCut(A,B)=p^TLp\)</span> ，此时 <span class="math inline">\(p^TDp=\sum p_i^2D_{ii}=\sum\limits_{i \in A}l_1^2D_{ii}+\sum\limits_{i \in B}l_2^2D_{ii}=l_1^2S_1+l_2^2S_2=1\)</span> ，则可化为 <span class="math inline">\(NCut(A,B)=\frac{p^TLp}{p^TDp}\)</span> ，即 <span class="math inline">\(\min NCut(A,B) = \min p^TLp \qquad s.t.\ p^TDp=1\)</span> ，该式即为一个广义瑞利熵，只需要求出矩阵 <span class="math inline">\(D^{-\frac{1}{2}}LD^{-\frac{1}{2}}\)</span> 的特征值和特征向量，按照谱聚类最后的聚类方式将顶点（像素点）聚成 k 类，从而完成图像的分割。而 NCuts 有个特殊的变换，具体如下： <span class="math display">\[ \begin{equation} \begin{aligned} NCut(A,B) &amp;=\frac{p^TLp}{p^TDp}\xlongequal{p=D^{-\frac{1}{2}}x} \frac{x^T(D^{-\frac{1}{2}}LD^{-\frac{1}{2}})x}{x^Tx} \\ &amp;= \frac{x^T(D^{-\frac{1}{2}}(D-W)D^{-\frac{1}{2}})x}{x^Tx} \\ &amp;= \frac{x^T(D^{-\frac{1}{2}}DD^{-\frac{1}{2}})x}{x^Tx} - \frac{x^T(D^{-\frac{1}{2}}WD^{-\frac{1}{2}})x}{x^Tx} \\ &amp;= I - \frac{x^T(D^{-\frac{1}{2}}WD^{-\frac{1}{2}})x}{x^Tx} \end{aligned} \end{equation} \]</span> 使用该变换可得出：<span class="math inline">\(\min NCut(A,B) = \max x^T(D^{-\frac{1}{2}}WD^{-\frac{1}{2}})x \qquad s.t.\ x^Tx=1\)</span> ，这样可不求出拉普拉斯矩阵，直接求出 <span class="math inline">\(D^{-\frac{1}{2}}WD^{-\frac{1}{2}}\)</span> 的特征值和特征矩阵即可，而此时在谱聚类最后聚类的时候要将其特征值从大到小排列（即<strong>取最大 k 个特征向量</strong>），取前 k 个特征值对应的特征向量构造特征矩阵进行聚类。</p><h2 id="附录">附录</h2><p>　　<strong>Ratio Cuts</strong>（RCuts） 和 NCuts 的目标函数差不多，两者间的差异就是：RCuts 是除以子图内<strong>顶点的个数</strong>；NCuts 是除以子图内所有顶点的<strong>边权值之和</strong>；最后变换完之后 RCuts 是个普通瑞利熵，而 NCuts 是个广义瑞利熵。具体的 RCuts 割法等以后有机会用到再写吧，毕竟子图顶点个数多不代表所占权重就大，而且在割时一般是基于权重的，所以一般而言 NCuts 的结果要比 RCuts 的结果要好。</p><h2 id="总结">总结</h2><p>　　由上文中应该可以看出 NCuts 与 Graph Cuts 需要构造的图是不一样，所使用的能量方程从形式上看也是完全不一样的（虽然本质上都是求“最小割”），其构成的图主要差别在于 Graph Cuts 多了 S 和 T 两个顶点，而这两个顶点由交互式获取，NCuts 不需要交互式，因此也没有这两个顶点，Ncuts 构造的图就相当于只由 Graph Cuts 的普通顶点和边界项 n-links 构成图，因此 Ncuts 没有 Graph Cuts 所谓的区域项 t-links ，也不需要求区域项 t-links 的权值。而这两种方法边界项 n-links 的权值求法都是差不多的，都是用 （高斯）RBF 核函数进行相似性度量，即 <span class="math inline">\(w_{\{i,j\}} \propto exp\left(-\frac{(I_i-I_j)^2}{2\sigma^2}\right)\)</span> 。</p><h2 id="后记">后记</h2><p>　　后面查阅资料发现图割其实还有好几个方向（井底之蛙了o(╯□╰)o），等有机会把用图割做超像素分割的那篇论文看一下吧 😜 。</p><p>　　5 月份的时候自己抽空实现了一下该算法，发现效果很糟糕，分割效果很不理想，当然不排除 Shaun 代码有 BUG 的原因，或者是还有一些步骤或 trick 漏掉了 ╮(╯▽╰)╭。而且不管是用 svds 还是 eigs 其分割结果都是随机的，只能保证邻域内像素点大概在一起，但具体谁和谁在一起这就是随机的了，这导致每次运行程序都可能有不同的分割结果 _(´ཀ`」 ∠)_ ，后面发现分割结果随机应该是 k-means 的锅（与 svd 和 eig 无关），原因是因为 k-means 每次初始化 k 个种子点时都是随机的，这自然会导致每次分割结果不完全一致 o(╯□╰)o。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="http://www.cnblogs.com/JiePro/p/Clustering_1.html" target="_blank" rel="external">【聚类算法】谱聚类(Spectral Clustering)</a></p><p>[2] <a href="http://www.cnblogs.com/sparkwen/p/3155850.html" target="_blank" rel="external">谱聚类算法(Spectral Clustering)</a></p><p>[3] <a href="http://www.cnblogs.com/xingshansi/p/6702188.html" target="_blank" rel="external">拉普拉斯矩阵（Laplace Matrix）与瑞利熵（Rayleigh quotient）</a>（<a href="http://www.cnblogs.com/xingshansi/category/958994.html" class="uri" target="_blank" rel="external">http://www.cnblogs.com/xingshansi/category/958994.html</a>）</p><p>[4] <a href="https://haoyu.love/blog344.html" target="_blank" rel="external">Normalized cuts and image segmentation 简单实现</a></p><p>[5] <a href="http://www.cnblogs.com/pinard/p/6221564.html" target="_blank" rel="external">谱聚类（spectral clustering）原理总结</a> （<a href="http://www.cnblogs.com/pinard/category/894692.html" class="uri" target="_blank" rel="external">http://www.cnblogs.com/pinard/category/894692.html</a>）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　图割算法主要有两个发展方向，一个是 Shaun 上次写过的 &lt;a href=&quot;http://cniter.github.io/posts/c42ff8d4.html&quot;&gt;&lt;strong&gt;Graph Cuts&lt;/strong&gt;&lt;/a&gt; ，通过边界项和区域项（有的可能还会添加一个约束项，或者叫标签项）之和建立能量方程，并利用一定程度的交互式构建一个 S/T 图，最后采用最大流/最小割（Max-flow/Min-cut ）算法寻找 S/T 图的最小“割”，从而对图像进行分割；而另一个方向就是 &lt;strong&gt;NCuts&lt;/strong&gt;（Normalized Cuts），中文一般叫规范割、标准割等等，该方法主要出自：&lt;em&gt;Shi J, Malik J. Normalized cuts and image segmentation[J]. IEEE Transactions on pattern analysis and machine intelligence, 2000, 22(8): 888-905.&lt;/em&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
      <category term="DigitalImageProcessing" scheme="http://cniter.github.io/categories/Study/DigitalImageProcessing/"/>
    
    
      <category term="note" scheme="http://cniter.github.io/tags/note/"/>
    
      <category term="segmentation" scheme="http://cniter.github.io/tags/segmentation/"/>
    
      <category term="clustering" scheme="http://cniter.github.io/tags/clustering/"/>
    
  </entry>
  
  <entry>
    <title>图割算法之Graph Cuts浅见</title>
    <link href="http://cniter.github.io/posts/c42ff8d4.html"/>
    <id>http://cniter.github.io/posts/c42ff8d4.html</id>
    <published>2018-04-20T03:36:16.000Z</published>
    <updated>2018-05-31T14:59:04.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　以后可能需要用图割算法做一些事情，所以就简单阅读了一下图割算法中最基础的一篇论文，<em>Boykov Y Y, Jolly M P. Interactive graph cuts for optimal boundary &amp; region segmentation of objects in ND images. Computer Vision, 2001. ICCV 2001. Proceedings. Eighth IEEE International Conference on. IEEE, 2001, 1: 105-112.</em> 。</p><a id="more"></a><h2 id="图篇">图篇</h2><p>　　图割算法（Graph Cuts），顾名思义，是基于图的一种图像分割方法，这里的图既是指数据结构中的图结构也是指数学中的图论，毕竟数据结构中的图结构也来自于数学中图论。既然是图，必然离不开图的构建，论文中图的构建如下，可以简称为 S/T 图：</p><figure><img src="http://img.my.csdn.net/uploads/201301/23/1358872281_7151.jpg" alt="论文中图结构"><figcaption>论文中图结构</figcaption></figure><p>和普通的无向图 <span class="math inline">\(G=(V,E)\)</span> 一样，该图也是由顶点集合 <span class="math inline">\(V\)</span> 和边集合 <span class="math inline">\(E\)</span> 构成，不一样的是，该图有两种顶点和两种边：</p><ol type="1"><li>第一种顶点是普通顶点。由图像中各像素点组成，每个顶点对应于图像中每个像素点。每两个邻域顶点，对应于图像中每相邻两个像素点（对2维图像来说，是8邻域；对3维图像来说，是26邻域），的连接就是一条边，这种边叫做 n-links (neighborhood links)。</li><li>第二种顶点是两个终端顶点，代表目标（object）的 source terminal（简称 S）和代表背景（background）的 sink terminal（简称 T），每个终端顶点都与所有普通顶点相连，这种相连构成的边叫做 t-links (terminal links)。</li></ol><p>　　设图像 <span class="math inline">\(P\)</span> 中每个像素点为 <span class="math inline">\(p\)</span>，则 <span class="math inline">\(p \in P\)</span>，目标终端顶点 <span class="math inline">\(S\)</span>，背景终端顶点 <span class="math inline">\(T\)</span> ，则构建的图 <span class="math inline">\(G\)</span> 中顶点集合可表示为：<span class="math inline">\(V = P \cup \{S,T\}\)</span> ；每个 <span class="math inline">\(p\)</span> 都有两种 t-links 边，分别为 <span class="math inline">\(\{p,S\}\)</span> 和 <span class="math inline">\(\{p,T\}\)</span> ，每个 <span class="math inline">\(p\)</span> 与其邻域内像素 <span class="math inline">\(q\)</span> 构成的 n-links 边为 <span class="math inline">\(\{p,q\}\)</span> ，设 <span class="math inline">\(N\)</span> 代表 n-links 边集合，即邻域边集合，则 <span class="math inline">\(\{p,q\} \in N\)</span> ，则构建的图 <span class="math inline">\(G\)</span> 中边集合可表示为：<span class="math inline">\(E = N \bigcup\limits_{p \in P} \{\{p,S\},\{p,T\}\}\)</span> 。</p><p>因为这构建的是一个无向带权图，所以还需要设定边的权值，论文中边的权值设定如下：</p><table><thead><tr class="header"><th style="text-align:center">边</th><th style="text-align:center">权值（代价，能量）</th><th style="text-align:center">区域</th></tr></thead><tbody><tr class="odd"><td style="text-align:center"><span class="math inline">\(\{p,q\}\)</span></td><td style="text-align:center"><span class="math inline">\(B_{\{p,q\}}\)</span></td><td style="text-align:center"><span class="math inline">\(\{p,q\} \in N\)</span></td></tr><tr class="even"><td style="text-align:center"><span class="math inline">\(\{p,S\}\)</span></td><td style="text-align:center"><span class="math inline">\(\lambda \cdot R_p(&quot;bkg&quot;)\)</span></td><td style="text-align:center"><span class="math inline">\(p \in P, p \notin O \cup B\)</span></td></tr><tr class="odd"><td style="text-align:center"><span class="math inline">\(\{p,S\}\)</span></td><td style="text-align:center"><span class="math inline">\(K\)</span></td><td style="text-align:center"><span class="math inline">\(p \in O\)</span></td></tr><tr class="even"><td style="text-align:center"><span class="math inline">\(\{p,S\}\)</span></td><td style="text-align:center">0</td><td style="text-align:center"><span class="math inline">\(p \in B\)</span></td></tr><tr class="odd"><td style="text-align:center"><span class="math inline">\(\{p,T\}\)</span></td><td style="text-align:center"><span class="math inline">\(\lambda \cdot R_p(&quot;obj&quot;)\)</span></td><td style="text-align:center"><span class="math inline">\(p \in P, p \notin O \cup B\)</span></td></tr><tr class="even"><td style="text-align:center"><span class="math inline">\(\{p,T\}\)</span></td><td style="text-align:center">0</td><td style="text-align:center"><span class="math inline">\(p \in O\)</span></td></tr><tr class="odd"><td style="text-align:center"><span class="math inline">\(\{p,T\}\)</span></td><td style="text-align:center"><span class="math inline">\(K\)</span></td><td style="text-align:center"><span class="math inline">\(p \in B\)</span></td></tr></tbody></table><ul><li>其中集合 <span class="math inline">\(O\)</span> 代表确定为目标的像素点的集合，即在交互时手动标注为目标的像素点；</li><li>集合 <span class="math inline">\(B\)</span> 代表确定为背景的像素点的集合，即在交互时手动标注为背景的像素点；</li><li><span class="math inline">\(B_{\{p,q\}}\)</span> 可以表示 {p,q} 不连续的惩罚因子，其正比于一个指数函数，具体为：<span class="math inline">\(B_{\{p,q\}} \propto exp\left(-\frac{(I_p-I_q)^2}{2\sigma^2}\right) \cdot \frac{1}{dist(p,q)}\)</span> ，其中 <span class="math inline">\(I_p\)</span> 和 <span class="math inline">\(I_q\)</span> 代表像素 <span class="math inline">\(p\)</span> 和像素 <span class="math inline">\(q\)</span> 的像素值，<span class="math inline">\(dist(p,q)\)</span> 代表其两像素点之间的距离。从 <span class="math inline">\(B_{\{p,q\}}\)</span> 对应的函数中可以看出当两像素点之间的差异越大时，其权值越小；两像素点之间距离越大时，权值越小（这里对于二维图像来说，一般只考虑周围 8 邻域内像素点，因此可以简单认为相邻两像素点之间距离为 1）。</li><li><span class="math inline">\(R_p(&quot;bkg&quot;)\)</span> 和 <span class="math inline">\(R_p(&quot;obj&quot;)\)</span> 分别是指像素 p 分配给背景和前景目标的惩罚因子，该惩罚因子与像素 p 属于前景目标的概率 <span class="math inline">\(Pr(I|O)\)</span> 和背景的概率 <span class="math inline">\(Pr(I|B)\)</span> 有关，一般取概率的负对数值，具体如下：<span class="math inline">\(R_p(“obj”) = −lnPr(I_p|O)\)</span> 和 <span class="math inline">\(R_p(“bkg”) = −lnPr(I_p|B)\)</span> 。至于概率的计算方法可以用简单的直方图概率模型，因为 <span class="math inline">\(O\)</span> 和 <span class="math inline">\(B\)</span> 为手动标注的确定的前景目标和背景的像素点集合，因此可以分别统计其灰度直方图，再对直方图频数进行归一化得到分布概率直方图，将像素 p 与 背景分布概率直方图和前景目标概率分布直方图进行对比，即可得到其属于背景的概率和属于前景目标的概率（当然更好的一种计算前景和背景概率的方法是用高斯混合模型）。</li><li><span class="math inline">\(K\)</span> 表示整个无向带权图中最大的权值，具体计算方法如下：<span class="math inline">\(K=1+\max\limits_{p \in P} \sum \limits_{q:\{p,q\} \in N} B_{\{p,q\}}\)</span> ，即取图像中像素点邻域边权值之和的最大值再加 1 （对于二维图像而言，邻域边权值之和是指 8 邻域边权值之和，图像中每个像素点都有其邻域边权值之和，取所有像素点中的最大值），至于为什么要令 K 为整个无向带权图中权值最大值？请详见下文。</li><li>至于其中的参数 <span class="math inline">\(\lambda\)</span> 和 <span class="math inline">\(\sigma\)</span> 论文中没有明确指定，在初始计算时可以将其置为 1，随后再慢慢调整。</li></ul><p>至此，整个 Graph Cuts 算法中关于图的构建已经完全确定，接下来就是割（cut）的算法了。</p><h2 id="割篇">割篇</h2><p>　　割（cut）是构建的无向带权图中边集合 <span class="math inline">\(E\)</span> 的一个子集 <span class="math inline">\(C\)</span>，即割 <span class="math inline">\(C \subset E\)</span> ，该 cut 的 代价（cost）可表示为：<span class="math inline">\(|C|=\sum \limits_{e \in C} W_e\)</span>，即该割边集合的所有边权值之和。</p><blockquote><p>如果一个割，其包含的所有边的权值之和最小，那么这个割就称为最小割，也就是图割的结果。在图分割里，是要求两个终端顶点被分离开的，即最小割把图的顶点划分为两个不相交的子集 <span class="math inline">\(S\)</span> 和 <span class="math inline">\(T\)</span> ，其中 <span class="math inline">\(s∈S\)</span>，<span class="math inline">\(t∈T\)</span>，<span class="math inline">\(T=V/S\)</span>。事实上，这两个子集对应于图像的前景像素集和背景像素集，也就相当于完成了图像分割。</p></blockquote><p>　　割相关的算法有很多，eg：Max-flow/Min-cut、GrabCut、One cut、 Normalized cut、Ratio cut 等等，但是其最关键的地方在于能量方程（或称 代价函数，损失函数）的优化，能量优化的目的在于最小化能量函数，而最小化能量函数时取得割就是最小割，即图割的结果。论文中能量方程的定义如下： <span class="math display">\[ E(A)= \lambda \cdot R(A)+B(A) \]</span> 其中： <span class="math display">\[ R(A)= \sum_{p \in P} R_p(A_p) \\ B(A)= \sum_{\{p,q\} \in N} B_{\{p,q\}} \cdot \delta(A_p,A_q) \\ 其中　\delta(A_p,A_q) = \begin{cases} 1 &amp; \text{if } A_p \neq A_q \\ 0 &amp; \text{otherwise}. \end{cases} \]</span></p><ul><li>其中令 <span class="math inline">\(A=(A_1,\cdots,A_p,\cdots,A_{|P|})\)</span> 为二值向量，每个 <span class="math inline">\(A_p\)</span> 可赋值为 “obj”（可用 1 表示前景） 或 “bkg”（可用 0 表示背景）；</li><li><span class="math inline">\(R(A)\)</span> 表示区域项，即上文中的两种 t-links 边相连的图像像素点权值，代表像素点分配给 “obj” 或 “bkg” 的惩罚项，对应于 <span class="math inline">\(R_p(&quot;obj&quot;)\)</span> 和 <span class="math inline">\(R_p(&quot;bkg&quot;)\)</span> ，求和后即可得到 <span class="math inline">\(R(A)\)</span> 。当像素点 p 属于前景目标的概率 <span class="math inline">\(Pr(I|O)\)</span> 大于背景的概率 <span class="math inline">\(Pr(I|B)\)</span> 时，由上文 <span class="math inline">\(R_p(A_p) = −lnPr(I_p|A_p)\)</span> 可知，此时 <span class="math inline">\(R_p(&quot;obj&quot;)\)</span> 小于 <span class="math inline">\(R_p(&quot;bkg&quot;)\)</span> ，即当像素 p 更有可能属于目标时，将 p 归类为目标就会使能量 <span class="math inline">\(R(A)\)</span> 小，也因此要取概率的负对数值，由此，如果所有像素点都能正确划分为前景和背景，则总能量会达到最小。当像素点 p 已经人为手动标注为确定的前景目标时，这时其与顶点 <span class="math inline">\(S\)</span> 相连的边的权值为 K，为整个无向带权图中最大的权值，即能量也最大，此时就不可能被分割，<em>这就是为什么要令 K 为整个无向带权图中权值最大值</em>，而其与顶点 <span class="math inline">\(T\)</span> 相连的权值为 0 ，能量也为 0，此时一定会被分割。</li><li><span class="math inline">\(B(A)\)</span> 表示边界项，即上文中 n-links 边的权值，代表邻域像素点 <span class="math inline">\({p,q}\)</span> 不连续的惩罚，当其差异越大时， <span class="math inline">\(B(A)\)</span> 越趋近于 0，即当邻域像素点差异越大时，由上文 <span class="math inline">\(B_{\{p,q\}} \propto exp\left(-\frac{(I_p-I_q)^2}{2\sigma^2}\right) \cdot \frac{1}{dist(p,q)}\)</span> 可知其权值越小，能量 <span class="math inline">\(B(A)\)</span> 也越小，则越应该被分割。</li><li>参数 <span class="math inline">\(\lambda\)</span> 用来表示区域项和边界项的重要性，初始计算时同样可以将其置为 1。</li><li>至于 <span class="math inline">\(\delta(A_p,A_q)\)</span> 的个人理解为：当邻域像素点 <span class="math inline">\(p,q\)</span> 被分配的二值变量不同时，即一个是前景另一个是背景，这时在进行能量计算时需要考虑连接亮点的边 <span class="math inline">\(\{p,q\}\)</span> 的权值，否则可以不考虑其权值。</li></ul><p>最后，本文割的具体实施是采用基于「最大流/最小割」算法进行的，而「最大流/最小割」算法针对的是有向图，所以需要把本文 S/T 图的每条无向边都转化为一去一回的两条有向边。</p><h2 id="附录">附录</h2><p>　　该论文还有一个有意思的地方就是其证明了能量函数 E(A) 的值只与割 <span class="math inline">\(C\)</span> 有关，最小割与最小化能量函数对应。证明过程如下：</p><blockquote><p>由上文可知，对于图像中每个像素点，割 <span class="math inline">\(C\)</span> 切断且仅切断一条 t-links 边，即要么切断 <span class="math inline">\(\{p,S\}\)</span> 边，要么切断 <span class="math inline">\(\{p,T\}\)</span> 边，毕竟一个像素点不可能同时属于前景和背景，也不可能既不属于前景也不属于背景；不属于同一终端顶点相连的 n-links 边也会被割 <span class="math inline">\(C\)</span> 切断，因为如果不断开，则整个图还是相连的，而如果属于同一终端顶点相连的 n-links 边不应该被割 <span class="math inline">\(C\)</span> 切断，否则，该割就不是最小割。</p><p>对于任意割 <span class="math inline">\(C\)</span> ，可定义其对应的图像分割结果向量 <span class="math inline">\(A(C)\)</span> ，如下： <span class="math display">\[ A_p(C) = \begin{cases} &quot;obj&quot; &amp; \text{if } \{p,T\} \in C \\ &quot;bkg&quot; &amp; \text{if } \{p,S\} \in C \end{cases} \]</span> 因此当 C 确定之后，分割结果 A 也就确定了。</p><p>利用上文给出的边的权值计算方法结合定义的 A 可得出割的代价（cost）： <span class="math display">\[ \begin{align} |C| &amp;= \sum_{p \notin O \cup B} \lambda \cdot R_p(A_p(C)) + \sum_{p \in O} \lambda \cdot R_p(A_p(C)) + \sum_{p \in B} \lambda \cdot R_p(A_p(C)) + \sum_{\{p.q\} \in N} B_{\{p,q\}} \cdot \delta((A_p(C)),A_q(C))) \\ &amp;= \sum_{p \notin O \cup B} \lambda \cdot R_p(A_p(C)) +0 + 0 + \sum_{\{p.q\} \in N} B_{\{p,q\}} \cdot \delta((A_p(C)),A_q(C))) \end{align} \]</span> 这里是因为 <span class="math inline">\(O \cap B = \emptyset\)</span> ，而且如果确定像素点 p 属于前景或背景，则其割边的权值必为 0，相应的代价也为 0，eg：设 p 确定为前景，则必定断开 {p,T} 边，而 {p,T} 边的权值为 0。</p><p>又因为：<span class="math inline">\(E(A) = \lambda \cdot R(A) + B(A)\)</span> ，则： <span class="math display">\[ \begin{align} E(A(C)) &amp;= \lambda \cdot R(A(C)) + B(A(C)) \\ &amp;= \sum_{p \in P} \lambda \cdot R_p(A_p(C)) + \sum_{\{p.q\} \in N} B_{\{p,q\}} \cdot \delta((A_p(C)),A_q(C))) \\ &amp;= \sum_{p \notin O \cup B} \lambda \cdot R_p(A_p(C)) + \sum_{p \in O} \lambda \cdot R_p(&quot;obj&quot;) + \sum_{p \in B} \lambda \cdot R_p(&quot;bkg&quot;) + \sum_{\{p.q\} \in N} B_{\{p,q\}} \cdot \delta((A_p(C)),A_q(C))) \end{align} \]</span> 所以：<span class="math inline">\(|C| = E(A(C)) - \sum \limits_{p \in O} \lambda \cdot R_p(&quot;obj&quot;) - \sum \limits_{p \in B} \lambda \cdot R_p(&quot;bkg&quot;)\)</span></p><p>又因为对于标注确定的前景和背景，任意割 C 的 <span class="math inline">\(\sum \limits_{p \in O} \lambda \cdot R_p(&quot;obj&quot;)\)</span> 和 <span class="math inline">\(\sum \limits_{p \in B} \lambda \cdot R_p(&quot;bkg&quot;)\)</span> 都是完全确定不变的，可以令其为 const，则 <span class="math inline">\(E(A) = |C| + const\)</span> ，当 <span class="math inline">\(C\)</span> 取最小时，对应的 <span class="math inline">\(E(A)\)</span> 也最小，即当割最小时，能量函数也最小。</p></blockquote><h2 id="后记">后记</h2><p>　　虽说关于 Graph Cuts 网上已经有了无数篇博客对其进行描述，但其中或多或少感觉还是有些令人困惑的地方，于是写下本文将那些个人感觉有些困惑的地方重新梳理一下，再改变一下原论文的行文思路，个人感觉更好理解一点，不然一上来就是神马能量方程，简直一脸懵逼 (･ัω･ั) 。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://blog.csdn.net/lut609921895/article/details/56665368" target="_blank" rel="external">Interactive Graph Cuts for Optimal Boundary and Region Segmentation of Objects in N-D ImageS</a></p><p>[2] <a href="https://blog.csdn.net/u014613043/article/details/51228355" target="_blank" rel="external">Graph Cuts</a></p><p>[3] <a href="https://blog.csdn.net/zouxy09/article/details/8532111" target="_blank" rel="external">图像分割之（二）Graph Cut（图割）</a></p><p>[4] <a href="https://blog.csdn.net/qq_22201697/article/details/72743891" target="_blank" rel="external">图像分割算法——Graph Cuts</a></p><p>[5] <a href="https://zhuanlan.zhihu.com/p/29644464" target="_blank" rel="external">Interactive Graph Cuts for Optimal Boundary &amp; Region Segmentation of Objects in N-D Images 阅读笔记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　以后可能需要用图割算法做一些事情，所以就简单阅读了一下图割算法中最基础的一篇论文，&lt;em&gt;Boykov Y Y, Jolly M P. Interactive graph cuts for optimal boundary &amp;amp; region segmentation of objects in ND images. Computer Vision, 2001. ICCV 2001. Proceedings. Eighth IEEE International Conference on. IEEE, 2001, 1: 105-112.&lt;/em&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
      <category term="DigitalImageProcessing" scheme="http://cniter.github.io/categories/Study/DigitalImageProcessing/"/>
    
    
      <category term="note" scheme="http://cniter.github.io/tags/note/"/>
    
      <category term="segmentation" scheme="http://cniter.github.io/tags/segmentation/"/>
    
  </entry>
  
  <entry>
    <title>C++中static用法小结</title>
    <link href="http://cniter.github.io/posts/b93d943b.html"/>
    <id>http://cniter.github.io/posts/b93d943b.html</id>
    <published>2018-04-09T08:36:06.000Z</published>
    <updated>2018-10-24T14:52:50.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　static 是 C++ 中很常用的一个关键字，它的用法也很多，时常会将其弄混，索性做个小结，以免以后忘记了或者继续弄混 (｡･ω･｡)。</p><a id="more"></a><h2 id="预备篇">预备篇</h2><p>　　首先要了解程序中数据的存储形式，一般而言数据的存储形式有三种：</p><ul><li>栈区（stack）—— 由编译器自动分配释放，一般用来存放函数的参数值，局部变量的值等；</li><li>堆区（heap）—— 由程序员分配释放，对应于对象的 new 或 malloc 和 delete 或 free，若程序员忘记释放，则在程序完全退出之后由操作系统回收；</li><li>静态存储区（static）—— 在编译时由编译器分配，在程序完全退出时由操作系统回收，一般用来存放全局变量和 static 变量。</li></ul><p>　　一般<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>声明的变量默认（如果变量类型，eg: int, double, … 等，前不加 static 或其它关键字）都是 auto <a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a>的，其一般存放在栈区，生存周期就只在包围其的 <code>{ }</code> 内，在包围其的 <code>{ }</code> 外就无法使用该变量。而 static 存放在静态存储区，其生存周期是全局的，它要等整个程序完全退出时才会销毁，<strong><em>在程序运行过程中，每次调用 static 变量都保持上一次调用结束后的值</em></strong>。</p><h2 id="类中篇">类中篇</h2><h3 id="静态成员变量">静态成员变量</h3><p>　　类中的静态成员变量被该类的所有实例共享，也可以不通过类的实例使用，在使用时首先需要对其初始化，也必须对其进行初始化，因为类中的静态成员变量只是声明，而且，类中的静态成员变量和普通静态变量一样是在程序初始化的时候分配的，在程序完全退出时由操作系统回收。具体用法如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="C++"><figure class="highlight hljs c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_value;	<span class="comment">// 注意，这里不能初始化！因为其不属于类对象，只属于类作用域，独立于该类的任何实例</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 在cpp中或类定义体外必须对它进行定义和初始化，因为在程序编译时首先执行的就是对其初始化并分配内存：</span></div><div class="line"><span class="keyword">int</span> Test::s_value = <span class="number">0</span>;	<span class="comment">// 注意，这里没有static的修饰！</span></div></pre></td></tr></table></figure></div><p>总而言之就是：<strong>类中的静态成员变量可以简单理解为一个名为 <code>Test::s_value</code> 的全局变量，被所有该类的实例共用，但独立于该类的任何实例，只属于该类作用域，在类的定义中能且只能被声明，不能在类定义体中进行初始化，必须要在类定义体外被定义和初始化</strong>。</p><h3 id="静态成员函数">静态成员函数</h3><p>　　类中的静态成员函数和类中的静态成员变量有点类似，其在实现时不需要再加 static 修饰，同样能被该类的所有实例复用，同样只属于类作用域中的全局函数，同样不需要类的实例即可调用。类中的静态成员函数不能访问类的普通成员变量，只能访问类的静态成员变量（可以参考 <a href="http://www.cnblogs.com/rickyk/p/4238380.html" target="_blank" rel="external">C++静态成员函数访问非静态成员的几种方法</a> 中的小 trick 访问普通成员变量，但非特殊情况不建议这么做）。具体用法如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="C++"><figure class="highlight hljs c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 静态成员函数调用非静态成员变量方法</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticTest</span><span class="params">(Test *t)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        t-&gt;value += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="keyword">int</span> value;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 在cpp中可以不通过类的实例进行调用：</span></div><div class="line"><span class="keyword">void</span> Test::func(<span class="keyword">int</span>);</div></pre></td></tr></table></figure></div><p>总而言之就是：<strong>类中的静态成员函数可以简单理解为一个名为 <code>Test::func(int)</code> 的全局函数，能被该类的所有实例复用，但独立于该类的任何实例，只属于该类作用域，可以不通过类的实例进行调用，也可以像普通成员函数一样通过类的实例进行调用</strong>。</p><h2 id="特定范围篇">特定范围篇</h2><p>　　为了使全局变量或函数只在特定 cpp 文件中起作用，需要在 cpp 文件中相应变量或函数前添加static 修饰，如下表：</p><table><thead><tr class="header"><th style="text-align:center">类型</th><th style="text-align:center">.h 文件中</th><th style="text-align:center">.cpp 文件中</th></tr></thead><tbody><tr class="odd"><td style="text-align:center">全局变量</td><td style="text-align:center">不使用 static 修饰，使用 extern 修饰</td><td style="text-align:center">使用 static 修饰</td></tr><tr class="even"><td style="text-align:center">全局函数</td><td style="text-align:center">不使用 static 修饰</td><td style="text-align:center">使用 static 修饰</td></tr></tbody></table><ul><li>如果在头文件中声明 static 全局变量，则在包含该头文件的每个 .cpp 文件中都会生成一个独立的同名变量，而这种写法没有任何意义；如果在 .cpp 文件中不使用 static 声明全局变量，则该全局变量可能会被其它 .cpp 文件共享，也可能不会，造成该变量的不确定性；所以如果该全局变量要被所有 .cpp 文件共享，则需要在头文件中声明 extern 全局变量（eg：<code>extern int g_value; // 注意，不要初始化值！</code>），再在某个 .cpp 文件中单独进行定义和初始化（仅一次）（eg：<code>int g_value = 0; // 不要extern修饰！</code>），如此即可在每个 .cpp 文件中共享该全局变量；而若只想在单个 .cpp 文件中使用全局变量，则需要在该 .cpp 文件中全局范围类声明和定义 <code>static int g_value = 0;</code>，如此可保证该变量能且只能被该 .cpp 文件使用。</li><li>如果在 .cpp 文件中不使用 static 声明全局函数，则该全局函数可能会被其它 .cpp 文件共享，也可能不会，这样在别的 .cpp 文件调用同名函数时可能会出现问题；而在头文件中使用 static 声明全局函数同样没有任何意义；所以如果要被多个 .cpp 文件复用，就将其声明移到头文件中，且不需要 static 修饰，而若只想在特定 .cpp 文件中使用该全局函数，则需要在声明时添加 static 修饰。</li></ul><p>最后，若是在 .hpp 文件中，则需要去除全局对象，将全局函数封装为类的静态方法。</p><p>　　<strong><em>PS：</em></strong>若在函数中使用 static 修饰变量，则该函数无法做到线程安全，在程序运行过程中，每次调用该函数，函数内的 static 变量都将保持上一次调用结束后的值，<strong><em>所以在函数中慎用 static 变量，除非需要这个特性</em></strong>。</p><h2 id="后记">后记</h2><p>　　写这篇文章的初衷在于时常需要 static 时老是忘记或弄混它的用法，不得不去网上查找，虽说网上的相关资料也有很多，但在找的时候还是有点麻烦，毕竟有很多不是自己需要的，而且自己总结一下对其理解又更深一些，下次要用时也能马上找到自己所需。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://blog.csdn.net/mznewfacer/article/details/6898005" target="_blank" rel="external">c/c++ static 用法总结（三版本合一）</a></p><p>[2] <a href="http://developer.51cto.com/art/201104/254141.htm" target="_blank" rel="external">C++中static的用法总结</a></p><p>[3] <a href="https://blog.csdn.net/men_wen/article/details/64443040" target="_blank" rel="external">C++ 类中的static成员的初始化和特点</a></p><p>[4] <a href="http://www.cnblogs.com/rickyk/p/4238380.html" target="_blank" rel="external">C++静态成员函数访问非静态成员的几种方法</a></p><section class="footnotes"><hr><ol><li id="fn1"><p>这里的一般是指局部变量，若为全局变量则默认为 extern ，局部变量没有默认初值，其初值不确定，一般需要人为明确的赋初值，而全局变量默认初值为 0 ，一个比较好的编程习惯是声明一个变量就对其进行初始化（赋初值），尽量少用全局变量，全局变量显示声明 extern。<a href="#fnref1" class="footnote-back">↩</a></p></li><li id="fn2"><p><strong><em>※注：</em></strong>这里的 auto 与 C++11 中的意义不同，这里的 auto 指的是变量的存储形式，而不是 C++11 那种可以当做任意的变量类型，eg: int, double, std::vector&lt;std::vector&lt;double&gt;&gt;, …… ，与其对应的还有 extern 和 register 关键字，其中 register 关键字基本不用 。<a href="#fnref2" class="footnote-back">↩</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　static 是 C++ 中很常用的一个关键字，它的用法也很多，时常会将其弄混，索性做个小结，以免以后忘记了或者继续弄混 (｡･ω･｡)。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="c/cpp" scheme="http://cniter.github.io/tags/c-cpp/"/>
    
  </entry>
  
  <entry>
    <title>斐波那契数列的三种写法</title>
    <link href="http://cniter.github.io/posts/8fb9f004.html"/>
    <id>http://cniter.github.io/posts/8fb9f004.html</id>
    <published>2018-03-23T03:09:58.000Z</published>
    <updated>2018-07-14T12:13:41.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>　　本文预示着 Shaun 开始着手准备找工作的事了，初步计划是先把『剑指Offer』上的题先做一遍，对照着 <a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="external">牛客网</a> 上的题进行测试，尽量争取先把书上的题都能 AC 。一般定义的斐波那契数列数列为：0,1,1,2,3,5,8……（对应 <span class="math inline">\(F(0)=0, F(1)=1, F(2)=1, \cdots \cdots\)</span>），用数学公式表示即为：<span class="math inline">\(F(n)=F(n-1)+F(n-2)\)</span>。以下代码均用 C++ 实现，且均通过牛客的测试。</p><a id="more"></a><h2 id="循环写法">循环写法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="C++"><figure class="highlight hljs c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci_loop</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> &amp;n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> fn = <span class="number">0</span>, f1 = <span class="number">0</span>, f2 = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">	&#123;</div><div class="line">		fn = f1 + f2;</div><div class="line">		f2 = f1;</div><div class="line">		f1 = fn;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> fn;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><h2 id="递归写法">递归写法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="C++"><figure class="highlight hljs c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci_recursive</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> &amp;n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> fibonacci_recursive(n - <span class="number">1</span>) + fibonacci_recursive(n - <span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><p>　　<strong><em>※注：</em></strong>这里 Shaun 在牛客上进行测试的时候，如果把 <code>|| n == 2</code> 去掉的话，就没法通过，可见多递归一次花费的时间并不是线性增长的。</p><h2 id="尾递归写法">尾递归写法</h2><p>　　说来惭愧，这个概念还是在一个小学弟那里得知的，后面才逐渐了解并学会使用。</p><p>　　尾递归，简而言之就是最后会且仅会调用函数本身，递归调用函数之后没有其它的语句需要执行。就像上面的递归，它在递归调用之后还会执行加法运算，而尾递归在执行递归调用之后就没有其它的运算了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-lang="C++"><figure class="highlight hljs c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci_tailRecursive</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> f1 = <span class="number">1</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span> fn = <span class="number">0</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> fn;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> fibonacci_tailRecursive(n - <span class="number">1</span>, fn, fn + f1);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></div><h2 id="总结">总结</h2><p>　　循环和尾递归花费的时间和空间都差不多，都要比普通的递归要小，普通的递归优势在于便于理解，代码好写，在不强调性能的前提下，用递归写法的代码可读性可能要好些。</p><h2 id="参考资料">参考资料</h2><p>[1] <a href="http://www.cnblogs.com/Anker/archive/2013/03/04/2943498.html" target="_blank" rel="external">递归与尾递归总结</a>（<a href="http://www.cnblogs.com/Anker/category/436371.html" class="uri" target="_blank" rel="external">http://www.cnblogs.com/Anker/category/436371.html</a>）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;　　本文预示着 Shaun 开始着手准备找工作的事了，初步计划是先把『剑指Offer』上的题先做一遍，对照着 &lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;牛客网&lt;/a&gt; 上的题进行测试，尽量争取先把书上的题都能 AC 。一般定义的斐波那契数列数列为：0,1,1,2,3,5,8……（对应 &lt;span class=&quot;math inline&quot;&gt;\(F(0)=0, F(1)=1, F(2)=1, \cdots \cdots\)&lt;/span&gt;），用数学公式表示即为：&lt;span class=&quot;math inline&quot;&gt;\(F(n)=F(n-1)+F(n-2)\)&lt;/span&gt;。以下代码均用 C++ 实现，且均通过牛客的测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="c/cpp" scheme="http://cniter.github.io/tags/c-cpp/"/>
    
  </entry>
  
</feed>
