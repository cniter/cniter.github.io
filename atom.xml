<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaun Yuan&#39;blog</title>
  <subtitle>世界上有两种程序员：一种是创造者，一种是使用者！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cniter.github.io/"/>
  <updated>2017-09-16T08:11:25.286Z</updated>
  <id>http://cniter.github.io/</id>
  
  <author>
    <name>Shaun Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决OpenCV-2.4.11调用摄像头显示拍摄视频出错问题</title>
    <link href="http://cniter.github.io/2017/09/16/%E8%A7%A3%E5%86%B3OpenCV-2.4.11%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%98%BE%E7%A4%BA%E6%8B%8D%E6%91%84%E8%A7%86%E9%A2%91%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>http://cniter.github.io/2017/09/16/解决OpenCV-2.4.11调用摄像头显示拍摄视频出错问题/</id>
    <published>2017-09-16T07:56:16.000Z</published>
    <updated>2017-09-16T08:11:25.286Z</updated>
    
    <content type="html"><![CDATA[<font color="#FA8072">本文所用的OpenCV版本为opencv-2.4.11，编程语言为C++。</font>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本文其实是以前在刚学OpenCV时遇到的一个问题，当时我的环境还是：Win7，VS2010，opencv-2.4.11。当初就记录了下来，现在再来重新梳理一下。</p>
<a id="more"></a>
<h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><p><strong>问题描述：</strong>使用OpenCV-2.4.11调用摄像头显示拍摄视频时报<font color="#FA8072">runtime error</font>，控制台窗口出现<font color="#FA8072">OpenCV Error: Assertion failed (size.width&gt;0 &amp;&amp; size.height&gt;0) in cv::imshow, file ……..\opencv\modules\highgui\src\window.cpp, line 261</font>。 </p>
<p><strong>解决办法：</strong>在显示图片时先判断是否有图像数据，如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!image.empty()) </div><div class="line">&#123;</div><div class="line">    imshow(<span class="string">"window"</span>, image);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (image.data) </div><div class="line">&#123;</div><div class="line">    imshow(<span class="string">"window"</span>, image);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>原因可能是：</strong>用imshow()显示图像时，其image必须有数据，如果它为空则程序会报错，而一般打开摄像头会有一定时间的延迟，这时程序已经启动，而摄像头由于启动延迟，不一定能及时获取图像，造成要显示的image为空，因此报错。个人粗浅理解，板砖轻拍⊙﹏⊙b。</p>
<p>而网上有人也认为：</p>
<blockquote>
<ol>
<li>我也是遇到这个问题，不过看到一个帖子写得不错（英文的），里面给出了一个可能的理由，就是我们用opencv打开视频的时候，会自动先监测摄像头有没有读到帧，如果没有，就会报错，然后再执行你的程序，加一个if判断就是跳过系统自己的判断，直接执行我们的程序。来自：<a href="https://zhidao.baidu.com/question/1831122325089024420.html" target="_blank" rel="external">https://zhidao.baidu.com/question/1831122325089024420.html</a></li>
<li>有人说的原因是在VideoCapture刚开始获取摄像头视频流的过程不返回信号，所以判断Mat是否为空，并不断循环去获取Mat。来自：<a href="http://www.cnblogs.com/tiny656/p/3538115.html" target="_blank" rel="external">http://www.cnblogs.com/tiny656/p/3538115.html</a></li>
</ol>
</blockquote>
<p>附最终完整示例程序：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 调用摄像头</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">videoCaptureTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//cv::VideoCapture cap(0);  // 打开默认摄像头，参数0代表默认摄像头的ID</span></div><div class="line">    cv::VideoCapture cap;</div><div class="line">    cap.open(<span class="number">0</span>);</div><div class="line">    <span class="comment">// 设置摄像头</span></div><div class="line">    cap.<span class="built_in">set</span>(CV_CAP_PROP_FRAME_WIDTH,<span class="number">640</span>);</div><div class="line">    cap.<span class="built_in">set</span>(CV_CAP_PROP_FRAME_HEIGHT,<span class="number">480</span>);</div><div class="line">    <span class="comment">// 确认是否成功打开摄像头</span></div><div class="line">    <span class="keyword">if</span> (!cap.isOpened())</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"打开摄像头失败，退出！\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    cv::namedWindow(<span class="string">"Capture"</span>, CV_WINDOW_AUTOSIZE|CV_WINDOW_FREERATIO);</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        cv::Mat frame;</div><div class="line">        cap &gt;&gt; frame;   <span class="comment">// 获取帧</span></div><div class="line"></div><div class="line">        <span class="comment">// 对摄像头获取的帧进行各种处理</span></div><div class="line">        <span class="keyword">if</span> (!frame.empty()) <span class="comment">// 最好加上该判断，并在该判断中对帧进行处理</span></div><div class="line">        &#123;</div><div class="line">            cv::imshow(<span class="string">"Capture"</span>, frame);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(cv::waitKey(<span class="number">30</span>) &gt;= <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 每30ms取一帧</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    videoCaptureTest();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　其实也可以通过在获取帧时，反复获取帧，直到取到的帧有数据为止，这样就不需要判断语句了，直接显示即可，具体代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">    cap &gt;&gt; frame;</div><div class="line">&#125;<span class="keyword">while</span>(frame.empty());</div><div class="line"></div><div class="line">cv::imshow(<span class="string">"Capture"</span>, frame);</div></pre></td></tr></table></figure>
<p>参考自：<a href="https://stackoverflow.com/a/9285151" target="_blank" rel="external">https://stackoverflow.com/a/9285151</a> 。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本文还是当初在国内某平台写博客时写的，但现在再回头看，又稍微有了点新的思路，温故确实能知新(*&#94;__&#94;*) 嘻嘻……。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.sina.com.cn/s/blog_a3e7ccd6010105yn.html" target="_blank" rel="external">OpenCV2.3使用摄像头和视频</a>（<a href="http://blog.sina.com.cn/s/articlelist_2749877462_3_1.html" target="_blank" rel="external">http://blog.sina.com.cn/s/articlelist_2749877462_3_1.html</a> ）</p>
<p>[2] <a href="http://zhidao.baidu.com/link?url=pIM9Hr0-Yalk-uj8cm5ml0y91X92jJmPAXMKQ-1h7FXSPsrwTiD6_9Ngfq72hmxbVDjNE0aYTOmXCCVEryZvhNBJGW6FbsqjO6dbjVLEZt3" target="_blank" rel="external">OpenCV Error: Assertion failed (size.width&gt;0 &amp;&amp; size.height&gt;0) in cv::imshow, fi 这个问题怎么办？</a></p>
<p>[3] <a href="http://blog.csdn.net/czl389/article/details/51031100" target="_blank" rel="external">OpenCV打开摄像头出现运行错误OpenCV Error：Assertion failed (size.width&gt;0&amp;&amp;size.height&gt;0)in cv::imshow，…… </a>（<a href="http://blog.csdn.net/czl389/article/category/6381887" target="_blank" rel="external">http://blog.csdn.net/czl389/article/category/6381887</a> ）</p>
<p>[4] <a href="http://www.cnblogs.com/tiny656/p/3538115.html" target="_blank" rel="external">[OpenCV]获取摄像头视频</a>（<a href="http://www.cnblogs.com/tiny656/category/550972.html" target="_blank" rel="external">http://www.cnblogs.com/tiny656/category/550972.html</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;#FA8072&quot;&gt;本文所用的OpenCV版本为opencv-2.4.11，编程语言为C++。&lt;/font&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本文其实是以前在刚学OpenCV时遇到的一个问题，当时我的环境还是：Win7，VS2010，opencv-2.4.11。当初就记录了下来，现在再来重新梳理一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Problems" scheme="http://cniter.github.io/categories/Problems/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加各种小部件</title>
    <link href="http://cniter.github.io/2017/09/15/Hexo%E6%B7%BB%E5%8A%A0%E5%90%84%E7%A7%8D%E5%B0%8F%E9%83%A8%E4%BB%B6/"/>
    <id>http://cniter.github.io/2017/09/15/Hexo添加各种小部件/</id>
    <published>2017-09-15T12:23:05.000Z</published>
    <updated>2017-09-15T13:16:28.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本人目前还在使用对Hexo的主题<strong>SPFK</strong>自行魔改的那个主题（所谓的魔改也就是对照着<strong>black-blue</strong>主题修改了部分CSS，然后又添加了一个站内搜索功能(&gt;&#94;ω&#94;&lt;)），主题SPFK主体的东西其实都没改变。现在正逐渐将其完善中，遂有此文。</p>
<a id="more"></a>
<h2 id="添加QQ邮箱联系"><a href="#添加QQ邮箱联系" class="headerlink" title="添加QQ邮箱联系"></a>添加QQ邮箱联系</h2><p>　　进入<a href="http://openmail.qq.com/" target="_blank" rel="external">QQ邮箱开放平台</a>，点击“<strong>获取邮我按钮</strong>”，登录QQ之后继续点击该按钮，因为本人不需要其样式，只需要其链接即可，所以就默认样式，直接点击“<strong>获取代码</strong>”即可，本人默认的“<strong>HTML代码</strong>”为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=qNvAyd3G0d3JxujOx9DFycHEhsvHxQ"</span> <span class="attr">style</span>=<span class="string">"text-decoration:none;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_01.png"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>提取其中的href，即<code>http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=qNvAyd3G0d3JxujOx9DFycHEhsvHxQ</code>，将该链接添加到<strong>主题配置文件</strong>中，具体如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">subnav:</span></div><div class="line"><span class="attr">  mail:</span> <span class="string">"http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=qNvAyd3G0d3JxujOx9DFycHEhsvHxQ"</span></div></pre></td></tr></table></figure>
<p>重新部署站点即可发现对应的邮箱图标，点击该图标可直接给本人发邮件。</p>
<h2 id="添加QQ交谈链接"><a href="#添加QQ交谈链接" class="headerlink" title="添加QQ交谈链接"></a>添加QQ交谈链接</h2><p>　　进入<a href="http://shang.qq.com/v3/widget.html" target="_blank" rel="external">QQ推广</a>，点击上方的“<strong>推广工具</strong>”，若没登录QQ则先登录QQ，组件样式同样默认即可，这里需要注意的是，需要点击左边的“<strong>设置</strong>”，下滚页面，找到“<strong>安全级别设置</strong>”，如下</p>
<blockquote>
<h><strong>安全级别设置</strong></h>

<p>   <input name="qq_security" type="radio">  完全公开（推荐商家，客服等用户使用，代码中显示QQ号码，易于推广）</p>
<p>   <input name="qq_security" type="radio">  安全加密（推荐博主，论坛用户等使用，代码中不显示QQ号码）</p>
</blockquote>
<p>选中“<strong>安全加密</strong>”，不然该选项默认的为完全公开，这样QQ号码就直接会显示在代码中，不利于隐私保护，选中之后，点击“<strong>保存</strong>”。保存之后，再次点击“<strong>推广工具</strong>”，即可发现下方的复制代码区域的HTML代码已看不到明码显示的QQ号，（若还是能看到QQ号，没有任何变化，可关闭该界面，重启浏览器重新进入该界面），本人的“<strong>复制这段代码并将其粘贴到您的网页上</strong>”下方区域的默认的代码为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://sighttp.qq.com/authd?IDKEY=b1afd83745b30922bc98e020847b86a5148d2114e62e8422"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span>  <span class="attr">src</span>=<span class="string">"http://wpa.qq.com/imgd?IDKEY=b1afd83745b30922bc98e020847b86a5148d2114e62e8422&amp;pic=52"</span> <span class="attr">alt</span>=<span class="string">"点击这里给我发消息"</span> <span class="attr">title</span>=<span class="string">"点击这里给我发消息"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>提取其中的href，即<code>http://sighttp.qq.com/authd?IDKEY=b1afd83745b30922bc98e020847b86a5148d2114e62e8422</code>，将该链接添加到<strong>主题配置文件</strong>中，具体如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">subnav:</span></div><div class="line"><span class="attr">  QQ:</span> <span class="string">"http://sighttp.qq.com/authd?IDKEY=4faf682653b3b7f5f47b9cb6d2bb8b81de8fa7a8fb8cee12"</span></div></pre></td></tr></table></figure>
<p>重新部署站点即可发现对应的QQ图标，点击该图标可直接给本人发临时QQ消息。</p>
<hr>
<p>待续。。。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　目前就添加这些小组件，以后应该会陆续添加一些其它的小东西↖(&#94;ω&#94;)↗。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://jingyan.baidu.com/article/dca1fa6fb5b637f1a44052b4.html" target="_blank" rel="external">如何在自己网站上或者博客上放置QQ邮箱联系反馈</a>（<a href="http://jingyan.baidu.com/tag?tagName=%E9%82%AE%E7%AE%B1" target="_blank" rel="external">http://jingyan.baidu.com/tag?tagName=%E9%82%AE%E7%AE%B1</a> ）</p>
<p>[2] <a href="http://www.29mo.com/wltg/363.html" target="_blank" rel="external">如何在自己的博客添加QQ组件</a>（<a href="http://www.29mo.com/category/wltg" target="_blank" rel="external">http://www.29mo.com/category/wltg</a> ）</p>
<p>[3] <a href="http://www.feizl.com/html/29610.htm" target="_blank" rel="external">一步一步教你给自己博客添加QQ在线</a>（<a href="http://www.feizl.com/feizhuliu/QQbaodian/" target="_blank" rel="external">http://www.feizl.com/feizhuliu/QQbaodian/</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本人目前还在使用对Hexo的主题&lt;strong&gt;SPFK&lt;/strong&gt;自行魔改的那个主题（所谓的魔改也就是对照着&lt;strong&gt;black-blue&lt;/strong&gt;主题修改了部分CSS，然后又添加了一个站内搜索功能(&amp;gt;&amp;#94;ω&amp;#94;&amp;lt;)），主题SPFK主体的东西其实都没改变。现在正逐渐将其完善中，遂有此文。&lt;/p&gt;
    
    </summary>
    
      <category term="建站小记" scheme="http://cniter.github.io/categories/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV中显著性检测算法的使用</title>
    <link href="http://cniter.github.io/2017/09/12/OpenCV%E4%B8%AD%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://cniter.github.io/2017/09/12/OpenCV中显著性检测算法的使用/</id>
    <published>2017-09-12T10:36:26.000Z</published>
    <updated>2017-09-13T11:24:29.871Z</updated>
    
    <content type="html"><![CDATA[<font color="#FA8072">本文所用的OpenCV版本为opencv-3.2.0，编程语言为C++。</font>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　OpenCV中实现了两种显著性检测算法，分别为Spectral Residual算法,出自<strong>Xiaodi Hou and Liqing Zhang. Saliency detection: A spectral residual approach. In <em>Computer Vision and Pattern Recognition, 2007. CVPR’07. IEEE Conference on</em>, pages 1–8. IEEE, 2007.</strong> 和 Fine Grained Saliency算法,出自<strong>Sebastian Montabone and Alvaro Soto. Human detection using a mobile platform and novel features derived from a visual saliency mechanism. In <em>Image and Vision Computing, Vol. 28 Issue 3</em>, pages 391–402. Elsevier, 2010.</strong>。这两种算法同样是在扩展包opencv_contrib-3.2.0中，也是由于opencv<a href="https://github.com/opencv/opencv_contrib/blob/master/modules/saliency/samples/computeSaliency.cpp" target="_blank" rel="external">官方示例程序</a>对初学者不友好（主要是本人境界不够o(╯□╰)o），所以本人对照其<a href="http://docs.opencv.org/3.2.0/d8/d65/group__saliency.html" target="_blank" rel="external">官方文档</a>重新整理了一下。</p>
<a id="more"></a>
<h2 id="代码篇"><a href="#代码篇" class="headerlink" title="代码篇"></a>代码篇</h2><p>　　使用OpenCV中的显著性检测算法需要包含头文件<code>#include &lt;opencv2/saliency.hpp&gt;</code>，具体示例程序如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/saliency.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//******************************************************</span></div><div class="line"><span class="comment">// [opencv_contrib/modules/saliency/src/saliency.cpp](https://github.com/opencv/opencv_contrib/blob/b7dcf141507edbe544e75820c76769a7769223ac/modules/saliency/src/saliency.cpp)</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//Ptr&lt;Saliency&gt; Saliency::create(const String&amp; saliencyType)</span></div><div class="line"><span class="comment">//&#123;</span></div><div class="line"><span class="comment">//	if (saliencyType == "SPECTRAL_RESIDUAL")</span></div><div class="line"><span class="comment">//		return makePtr&lt;StaticSaliencySpectralResidual&gt;();  //computeSaliency返回的是32FC1</span></div><div class="line"><span class="comment">//	else if (saliencyType == "FINE_GRAINED")</span></div><div class="line"><span class="comment">//		return makePtr&lt;StaticSaliencyFineGrained&gt;();	 //computeSaliency返回的是8UC1</span></div><div class="line"><span class="comment">//	else if (saliencyType == "BING")</span></div><div class="line"><span class="comment">//		return makePtr&lt;ObjectnessBING&gt;();</span></div><div class="line"><span class="comment">//	else if (saliencyType == "BinWangApr2014")</span></div><div class="line"><span class="comment">//		return makePtr&lt;MotionSaliencyBinWangApr2014&gt;();</span></div><div class="line"><span class="comment">//	return Ptr&lt;Saliency&gt;();</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// [opencv_contrib/modules/saliency/src/staticSaliency.cpp](https://github.com/opencv/opencv_contrib/blob/41b0a71ac826b1489d3e5c208ac7a95e58556caf/modules/saliency/src/staticSaliency.cpp)</span></div><div class="line"><span class="comment">//computeBinaryMap()要求输入的saliencyMap为浮点数（eg:32FC1）</span></div><div class="line"><span class="comment">//*****************************************************</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spectralResidualTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);	<span class="comment">// 载入最真实的原始图像</span></div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">// [OpenCV实现显著性检测中的谱残差法（Spectral Residual Method）涉及到了傅立叶正反变换](http://blog.csdn.net/kena_m/article/details/49406687)</span></div><div class="line">	<span class="keyword">if</span> (src_img.empty())</div><div class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (src_img.channels() == <span class="number">3</span>)</div><div class="line">		cv::cvtColor(src_img, src_img, CV_BGR2GRAY);</div><div class="line">	cv::Mat planes[] = &#123; cv::Mat_&lt;<span class="keyword">float</span>&gt;(src_img), cv::Mat::zeros(src_img.size(), CV_32F) &#125;;</div><div class="line">	cv::Mat complex_img; <span class="comment">//复数矩阵</span></div><div class="line">	merge(planes, <span class="number">2</span>, complex_img); <span class="comment">//把单通道矩阵组合成复数形式的双通道矩阵</span></div><div class="line">	dft(complex_img, complex_img);  <span class="comment">// 使用离散傅立叶变换</span></div><div class="line"></div><div class="line">	<span class="comment">//对复数矩阵进行处理，方法为谱残差</span></div><div class="line">	cv::Mat magnitude, phase_angle, mag_mean;</div><div class="line">	cv::Mat real_part, imaginary_part;</div><div class="line">	split(complex_img, planes); <span class="comment">//分离复数到实部和虚部</span></div><div class="line">	real_part = planes[<span class="number">0</span>]; <span class="comment">//实部</span></div><div class="line">	imaginary_part = planes[<span class="number">1</span>]; <span class="comment">//虚部</span></div><div class="line">	cv::magnitude(real_part, imaginary_part, magnitude); <span class="comment">//计算幅值</span></div><div class="line">	phase(real_part, imaginary_part, phase_angle); <span class="comment">//计算相角</span></div><div class="line"></div><div class="line">	<span class="keyword">float</span> *pre, *pim, *pm, *pp;</div><div class="line">	<span class="comment">//对幅值进行对数化</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magnitude.rows; i++)</div><div class="line">	&#123;</div><div class="line">		pm = magnitude.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; magnitude.cols; j++)</div><div class="line">		&#123;</div><div class="line">			*pm = <span class="built_in">log</span>(*pm);</div><div class="line">			pm++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	blur(magnitude, mag_mean, cv::Size(<span class="number">5</span>, <span class="number">5</span>)); <span class="comment">//对数谱的均值滤波</span></div><div class="line">	magnitude = magnitude - mag_mean; <span class="comment">//求取对数频谱残差</span></div><div class="line">	<span class="comment">//把对数谱残差的幅值和相角划归到复数形式</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magnitude.rows; i++)</div><div class="line">	&#123;</div><div class="line">		pre = real_part.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		pim = imaginary_part.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		pm = magnitude.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		pp = phase_angle.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; magnitude.cols; j++)</div><div class="line">		&#123;</div><div class="line">			*pm = <span class="built_in">exp</span>(*pm);</div><div class="line">			*pre = *pm * <span class="built_in">cos</span>(*pp);</div><div class="line">			*pim = *pm * <span class="built_in">sin</span>(*pp);</div><div class="line">			pre++;</div><div class="line">			pim++;</div><div class="line">			pm++;</div><div class="line">			pp++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	cv::Mat planes1[] = &#123; cv::Mat_&lt;<span class="keyword">float</span>&gt;(real_part), cv::Mat_&lt;<span class="keyword">float</span>&gt;(imaginary_part) &#125;;</div><div class="line"></div><div class="line">	merge(planes1, <span class="number">2</span>, complex_img); <span class="comment">//重新整合实部和虚部组成双通道形式的复数矩阵</span></div><div class="line">	idft(complex_img, complex_img, cv::DFT_SCALE); <span class="comment">// 傅立叶反变换</span></div><div class="line">	split(complex_img, planes); <span class="comment">//分离复数到实部和虚部</span></div><div class="line">	real_part = planes[<span class="number">0</span>];</div><div class="line">	imaginary_part = planes[<span class="number">1</span>];</div><div class="line">	cv::magnitude(real_part, imaginary_part, magnitude); <span class="comment">//计算幅值和相角</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magnitude.rows; i++)</div><div class="line">	&#123;</div><div class="line">		pm = magnitude.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; magnitude.cols; j++)</div><div class="line">		&#123;</div><div class="line">			*pm = (*pm) * (*pm);</div><div class="line">			pm++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	GaussianBlur(magnitude, magnitude, cv::Size(<span class="number">7</span>, <span class="number">7</span>), <span class="number">2.5</span>, <span class="number">2.5</span>);</div><div class="line">	cv::Mat invDFT, invDFTcvt;</div><div class="line">	normalize(magnitude, invDFT, <span class="number">0</span>, <span class="number">255</span>, cv::NORM_MINMAX); <span class="comment">//归一化到[0,255]供显示</span></div><div class="line">	invDFT.convertTo(invDFTcvt, CV_8U); <span class="comment">//转化成CV_8U型</span></div><div class="line">	cv::namedWindow(<span class="string">"SpectualResidual"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"SpectualResidual"</span>, invDFTcvt);</div><div class="line"></div><div class="line">	cv::Mat thresholded;</div><div class="line">	cv::threshold(invDFTcvt, thresholded, <span class="number">0</span>, <span class="number">255</span>, CV_THRESH_OTSU);</div><div class="line">	cv::namedWindow(<span class="string">"Thresholded Image"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"Thresholded Image"</span>, thresholded);</div><div class="line"></div><div class="line">	cv::Mat eroded;</div><div class="line">	<span class="comment">// 纵向腐蚀</span></div><div class="line">	cv::erode(thresholded, eroded, cv::Mat(<span class="number">5</span>, <span class="number">1</span>, CV_8UC1, cv::Scalar(<span class="number">1</span>)), cv::Point(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">3</span>);	<span class="comment">// cv::Point(-1,-1)为默认参数，代表原点（描点）为矩阵中心</span></div><div class="line">	cv::namedWindow(<span class="string">"eroded Image"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"eroded Image"</span>, eroded);</div><div class="line"></div><div class="line">	<span class="comment">//cv::Mat thresholded;</span></div><div class="line">	cv::threshold(eroded, thresholded, <span class="number">60</span>, <span class="number">255</span>, CV_THRESH_BINARY);</div><div class="line">	cv::namedWindow(<span class="string">"Thresholded eroded Image"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"Thresholded eroded Image"</span>, thresholded);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">saliencyTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);</div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (src_img.empty())</div><div class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (src_img.channels() == <span class="number">3</span>)</div><div class="line">		cv::cvtColor(src_img, src_img, CV_BGR2GRAY);</div><div class="line"></div><div class="line">	cv::Ptr&lt;cv::saliency::Saliency&gt; saliency_algorithm = cv::saliency::Saliency::create(<span class="string">"SPECTRAL_RESIDUAL"</span>);	<span class="comment">// FINE_GRAINED为Fine Grained Saliency算法</span></div><div class="line">	cv::Mat saliency_map;</div><div class="line">	<span class="keyword">if</span> (saliency_algorithm-&gt;computeSaliency(src_img, saliency_map))</div><div class="line">	&#123;</div><div class="line">		cv::namedWindow(<span class="string">"SR saliency map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">		cv::imshow(<span class="string">"SR saliency map"</span>, saliency_map);</div><div class="line"></div><div class="line">		cv::Mat saliency_map_show(saliency_map.size(), CV_8UC1);</div><div class="line">		normalize(saliency_map, saliency_map_show, <span class="number">0</span>, <span class="number">255</span>, CV_MINMAX); <span class="comment">//归一化到[0,255]供显示</span></div><div class="line">		saliency_map_show.convertTo(saliency_map_show, CV_8U); <span class="comment">//转化成CV_8U型</span></div><div class="line">		cv::namedWindow(<span class="string">"saliency_map_show"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">		cv::imshow(<span class="string">"saliency_map_show"</span>, saliency_map_show);</div><div class="line"></div><div class="line">		cv::Mat binary_map;</div><div class="line">		cv::saliency::StaticSaliencySpectralResidual spec;</div><div class="line">		<span class="keyword">if</span> (spec.computeBinaryMap(saliency_map, binary_map))</div><div class="line">		&#123;</div><div class="line">			cv::namedWindow(<span class="string">"binary map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">			cv::imshow(<span class="string">"binary map"</span>, binary_map);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Fine Grained Saliency算法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGSTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);</div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (src_img.empty())</div><div class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (src_img.channels() == <span class="number">3</span>)</div><div class="line">		cv::cvtColor(src_img, src_img, CV_BGR2GRAY);</div><div class="line"></div><div class="line">	cv::Ptr&lt;cv::saliency::StaticSaliencyFineGrained&gt; fgs = cv::saliency::StaticSaliencyFineGrained::create();</div><div class="line">	cv::Mat fgs_saliency_map;</div><div class="line">	fgs-&gt;computeSaliency(src_img, fgs_saliency_map);</div><div class="line">	cv::namedWindow(<span class="string">"FGS saliency map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"FGS saliency map"</span>, fgs_saliency_map);</div><div class="line">	<span class="comment">//cv::imwrite("../data/T_S.png", fgs_saliency_map);</span></div><div class="line"></div><div class="line">	cv::Mat binary_map;</div><div class="line">	cv::threshold(fgs_saliency_map, binary_map, <span class="number">0</span>, <span class="number">255</span>, CV_THRESH_OTSU);</div><div class="line">	cv::namedWindow(<span class="string">"binary map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"binary map"</span>, binary_map);</div><div class="line">	<span class="comment">//cv::imwrite("../data/T_S_B.png", binary_map);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Spectral Residual算法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SRTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);</div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (src_img.empty())</div><div class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (src_img.channels() == <span class="number">3</span>)</div><div class="line">		cv::cvtColor(src_img, src_img, CV_BGR2GRAY);</div><div class="line"></div><div class="line">	cv::Ptr&lt;cv::saliency::StaticSaliencySpectralResidual&gt; sr = cv::saliency::StaticSaliencySpectralResidual::create();</div><div class="line">	cv::Mat sr_saliency_map;</div><div class="line">	sr-&gt;computeSaliency(src_img, sr_saliency_map);</div><div class="line">	cv::namedWindow(<span class="string">"SR saliency map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"SR saliency map"</span>, sr_saliency_map);</div><div class="line"></div><div class="line">	cv::Mat binary_map;</div><div class="line">	sr-&gt;computeBinaryMap(sr_saliency_map, binary_map);</div><div class="line">	cv::namedWindow(<span class="string">"binary map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"binary map"</span>, binary_map);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">//spectralResidualTest();</span></div><div class="line">	<span class="comment">//saliencyTest();</span></div><div class="line">	<span class="comment">//FGSTest();</span></div><div class="line">	SRTest();</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (cv::waitKey(<span class="number">0</span>) != <span class="number">27</span>) &#123; &#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　这里面有个小东西需要注意，就是<code>computeBinaryMap()</code>函数，看其文档描述其中使用<em>K-means</em>算法和<em>Otsu</em>算法对显著性图进行二值化处理，其输入的显著性图数据类型应该为浮点数，OpenCV中Spectral Residual算法computeSaliency()返回的结果为浮点数，而Fine Grained Saliency算法computeSaliency()返回的结果却是整型数据，所以这一点需要注意Fine Grained Saliency算法返回的结果不能直接使用computeBinaryMap()函数，一般对其结果直接使用OTSU算法进行阈值分割即可。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本文使用的这两种算法在本人的电脑上运行时间都较长，基本不可能用来处理视频流，而且在本人的这次实验中效果也不太理想，毕竟这是用来处理静态图像的两种显著性方法。不过OpenCV中也有用来处理视频流的显著性检测算法，其为BING算法,出自<strong>Ming-Ming Cheng, Ziming Zhang, Wen-Yan Lin, and Philip Torr. Bing: Binarized normed gradients for objectness estimation at 300fps. In <em>IEEE CVPR</em>, 2014.</strong>，实际上这是一种快速提取目标候选框的算法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;#FA8072&quot;&gt;本文所用的OpenCV版本为opencv-3.2.0，编程语言为C++。&lt;/font&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　OpenCV中实现了两种显著性检测算法，分别为Spectral Residual算法,出自&lt;strong&gt;Xiaodi Hou and Liqing Zhang. Saliency detection: A spectral residual approach. In &lt;em&gt;Computer Vision and Pattern Recognition, 2007. CVPR’07. IEEE Conference on&lt;/em&gt;, pages 1–8. IEEE, 2007.&lt;/strong&gt; 和 Fine Grained Saliency算法,出自&lt;strong&gt;Sebastian Montabone and Alvaro Soto. Human detection using a mobile platform and novel features derived from a visual saliency mechanism. In &lt;em&gt;Image and Vision Computing, Vol. 28 Issue 3&lt;/em&gt;, pages 391–402. Elsevier, 2010.&lt;/strong&gt;。这两种算法同样是在扩展包opencv_contrib-3.2.0中，也是由于opencv&lt;a href=&quot;https://github.com/opencv/opencv_contrib/blob/master/modules/saliency/samples/computeSaliency.cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方示例程序&lt;/a&gt;对初学者不友好（主要是本人境界不够o(╯□╰)o），所以本人对照其&lt;a href=&quot;http://docs.opencv.org/3.2.0/d8/d65/group__saliency.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;重新整理了一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV中Selective Search算法的使用</title>
    <link href="http://cniter.github.io/2017/09/10/OpenCV%E4%B8%ADSelective-Search%E7%AE%97%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://cniter.github.io/2017/09/10/OpenCV中Selective-Search算法的使用/</id>
    <published>2017-09-10T12:31:03.000Z</published>
    <updated>2017-09-13T11:30:12.568Z</updated>
    
    <content type="html"><![CDATA[<font color="#FA8072">本文所用的OpenCV版本为opencv-3.2.0，编程语言为C++。</font>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　OpenCV-3.2中的Selective Search算法是在其扩展包中，所以要想使用该算法需自行编译opencv_contrib-3.2.0。由于扩展包中的示例程序有点简陋，对初学者也不友好（本人编程水平有限，粗浅评价，勿怪(*&#94;__&#94; *) 嘻嘻……），所以本人参考其<a href="http://docs.opencv.org/3.2.0/d5/df0/group__ximgproc__segmentation.html" target="_blank" rel="external">官方文档</a>及其<a href="https://github.com/opencv/opencv_contrib/blob/master/modules/ximgproc/samples/selectivesearchsegmentation_demo.cpp" target="_blank" rel="external">官方示例程序</a>写下此文。</p>
<a id="more"></a>
<h2 id="Selective-Search算法"><a href="#Selective-Search算法" class="headerlink" title="Selective Search算法"></a>Selective Search算法</h2><p>　　该算法是选取region proposal（一般翻译成候选区域 / 区域建议）领域中的<em>state-of-the-art</em>。其算法具体思想出自<strong>Jasper RR Uijlings, Koen EA van de Sande, Theo Gevers, and Arnold WM Smeulders. Selective search for object recognition. <em>International journal of computer vision</em>, 104(2):154–171, 2013.</strong>，若英文水平不够，还想了解其中文思想请参考文末参考资料。</p>
<h2 id="代码篇"><a href="#代码篇" class="headerlink" title="代码篇"></a>代码篇</h2><p>　　使用Selective Search算法需包含<code>#include &lt;opencv2/ximgproc.hpp&gt;</code>，完整示例程序如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/ximgproc.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SSTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// [Image segmentation](http://docs.opencv.org/3.2.0/d5/df0/group__ximgproc__segmentation.html#ga5e3e721c5f16e34d3ad52b9eeb6d2860) </span></div><div class="line"></div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);	<span class="comment">// 载入原始图像</span></div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WINDOW_KEEPRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line">	<span class="comment">//// 转换为灰度图</span></div><div class="line">	<span class="comment">//cv::Mat gray_img;</span></div><div class="line">	<span class="comment">//cvtColor(src_img, gray_img, cv::COLOR_BGR2GRAY);</span></div><div class="line"></div><div class="line">	<span class="comment">// 图割算法</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::GraphSegmentation&gt; gs = cv::ximgproc::segmentation::createGraphSegmentation();</div><div class="line">	cv::Mat graph_segmented;</div><div class="line">	gs-&gt;processImage(src_img, graph_segmented);</div><div class="line">	normalize(graph_segmented, graph_segmented, <span class="number">0</span>, <span class="number">255</span>, CV_MINMAX); <span class="comment">// 归一化到[0,255]供显示</span></div><div class="line">	graph_segmented.convertTo(graph_segmented, CV_8U); <span class="comment">// 数据类型转化成CV_8U型</span></div><div class="line">	<span class="comment">// cvtColor(graph_segmented, graph_segmented, CV_GRAY2BGR);</span></div><div class="line">	cv::namedWindow(<span class="string">"graph_segmented"</span>, CV_WINDOW_KEEPRATIO);</div><div class="line">	imshow(<span class="string">"graph_segmented"</span>, graph_segmented);</div><div class="line"></div><div class="line">	<span class="comment">// 为selective search算法添加图割算法处理结果</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentation&gt; ss = cv::ximgproc::segmentation::createSelectiveSearchSegmentation();</div><div class="line">	ss-&gt;addGraphSegmentation(gs);</div><div class="line"></div><div class="line">	ss-&gt;addImage(src_img);	<span class="comment">// 添加待处理的图片</span></div><div class="line"></div><div class="line">	<span class="comment">// 自定义策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss_color = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyColor();	<span class="comment">// 颜色相似度策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss_texture = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyTexture();	<span class="comment">// 纹理相似度策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss_size = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategySize();	<span class="comment">// 尺寸相似度策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss_fill = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyFill();	<span class="comment">// 填充相似度策略</span></div><div class="line">	<span class="comment">// 添加策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyMultiple(sss_color, sss_texture, sss_size, sss_fill);	<span class="comment">// 合并以上4种策略</span></div><div class="line">	ss-&gt;addStrategy(sss);</div><div class="line"></div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Rect&gt; regions;</div><div class="line">	ss-&gt;process(regions);	<span class="comment">// 处理结果</span></div><div class="line"></div><div class="line">	<span class="comment">// 显示结果</span></div><div class="line">	cv::Mat show_img = src_img.clone();</div><div class="line">	<span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Rect&gt;::iterator it_r = regions.begin(); it_r != regions.end(); ++it_r)</div><div class="line">	&#123;</div><div class="line">		cv::rectangle(show_img, *it_r, cv::Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>);</div><div class="line">	&#125;</div><div class="line">	cv::namedWindow(<span class="string">"show_img"</span>, CV_WINDOW_KEEPRATIO);</div><div class="line">	imshow(<span class="string">"show_img"</span>, show_img);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">// -------忽略上述步骤，直接采用方便算法提取候选区域------------------------</span></div><div class="line">	<span class="comment">/***************************************************************************</span></div><div class="line"><span class="comment">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentation&gt; ss = cv::ximgproc::segmentation::createSelectiveSearchSegmentation();</span></div><div class="line"><span class="comment">	ss-&gt;setBaseImage(src_img);	// 采用switch* functions提取候选区域</span></div><div class="line"><span class="comment">	ss-&gt;switchToSelectiveSearchFast();	// 快速提取区域</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">	std::vector&lt;cv::Rect&gt; rects;</span></div><div class="line"><span class="comment">	ss-&gt;process(rects);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">	int nb_rects = 10;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">	char c = (char)cv::waitKey();</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">	while (c != 'q')</span></div><div class="line"><span class="comment">	&#123;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		cv::Mat wimg = src_img.clone();</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		int i = 0;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		for (std::vector&lt;cv::Rect&gt;::iterator it = rects.begin(); it != rects.end(); ++it)</span></div><div class="line"><span class="comment">		&#123;</span></div><div class="line"><span class="comment">			if (i++ &lt; nb_rects)</span></div><div class="line"><span class="comment">			&#123;</span></div><div class="line"><span class="comment">				cv::rectangle(wimg, *it, cv::Scalar(0, 0, 255), 3);</span></div><div class="line"><span class="comment">			&#125;</span></div><div class="line"><span class="comment">		&#125;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		cv::namedWindow("Output", CV_WINDOW_KEEPRATIO);</span></div><div class="line"><span class="comment">		imshow("Output", wimg);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		c = (char)cv::waitKey();</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		if (c == 'd')</span></div><div class="line"><span class="comment">		&#123;</span></div><div class="line"><span class="comment">			nb_rects += 10;</span></div><div class="line"><span class="comment">		&#125;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		if (c == 'a' &amp;&amp; nb_rects &gt; 10)</span></div><div class="line"><span class="comment">		&#123;</span></div><div class="line"><span class="comment">			nb_rects -= 10;</span></div><div class="line"><span class="comment">		&#125;</span></div><div class="line"><span class="comment">	&#125;</span></div><div class="line"><span class="comment">	********************************************************/</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	SSTest();</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (cv::waitKey(<span class="number">0</span>) != <span class="number">27</span>) &#123;&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　使用该算法，要想达到理想效果，一般需要调整图割算法的参数或注释中方法<code>switchToSelectiveSearchFast()</code>的参数。本人的这次实验为了达到理想的选取的效果，其调整参数花了不少时间，而且该算法运行时间在本人电脑上略显长。GitHub上也有大神自己用opencv实现了该算法，参考<a href="https://github.com/watanika/selective-search-cpp" target="_blank" rel="external">watanika/selective-search-cpp</a>，该算法的参数感觉比OpenCV自带的Selective Search算法要好调一些，但优化效果没有opencv好，其运行时间在本人电脑上更长。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://jermmy.xyz/2017/05/04/2017-5-4-paper-notes-selective-search/" target="_blank" rel="external">论文笔记：Selective Search for Object Recognition</a>（<a href="http://jermmy.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/）" target="_blank" rel="external">http://jermmy.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/）</a></p>
<p>[2] <a href="http://blog.csdn.net/langb2014/article/details/52575507" target="_blank" rel="external">Selective Search for Object Recognition(阅读)</a>（<a href="http://blog.csdn.net/langb2014/article/category/5772811）" target="_blank" rel="external">http://blog.csdn.net/langb2014/article/category/5772811）</a></p>
<p>[3] <a href="http://blog.csdn.net/csyhhb/article/details/50425114" target="_blank" rel="external">论文笔记 《Selective Search for Object Recognition》</a>（<a href="http://blog.csdn.net/csyhhb/article/category/6048588）" target="_blank" rel="external">http://blog.csdn.net/csyhhb/article/category/6048588）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;#FA8072&quot;&gt;本文所用的OpenCV版本为opencv-3.2.0，编程语言为C++。&lt;/font&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　OpenCV-3.2中的Selective Search算法是在其扩展包中，所以要想使用该算法需自行编译opencv_contrib-3.2.0。由于扩展包中的示例程序有点简陋，对初学者也不友好（本人编程水平有限，粗浅评价，勿怪(*&amp;#94;__&amp;#94; *) 嘻嘻……），所以本人参考其&lt;a href=&quot;http://docs.opencv.org/3.2.0/d5/df0/group__ximgproc__segmentation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;及其&lt;a href=&quot;https://github.com/opencv/opencv_contrib/blob/master/modules/ximgproc/samples/selectivesearchsegmentation_demo.cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方示例程序&lt;/a&gt;写下此文。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Win10以树形结构显示文件目录结构</title>
    <link href="http://cniter.github.io/2017/09/05/Win10%E4%BB%A5%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>http://cniter.github.io/2017/09/05/Win10以树形结构显示文件目录结构/</id>
    <published>2017-09-05T09:08:34.000Z</published>
    <updated>2017-09-05T09:39:21.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　<del>本文其实可以算是标题党，Windows本身并不能以树形结构显示文件目录结构，一般需要借助第三方工具</del>（后面去网上搜索了一下，发现Windows居然也有一个tree命令o(╯□╰)o），Windows虽然能用命令行显示树形结构文件目录，但不像Linux那样可以输入一些参数控制其输出。Win10有个特殊的功能，就是可以使用Ubuntu的bash，只需要开启这个有趣的功能，就可以将Win10当Ubuntu使用，从而像Linux那样只输入相关命令即可显示树形结构文件目录。</p>
<font color="#FA8072">*注：值得注意的是Win10中的bash目前不支持中文输入，只能切换到英文输入才能正常输入。</font>

<a id="more"></a>
<h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>首先需要在Win10下开启bash功能。具体开启方法为：</p>
<ol>
<li>打开 <strong>Win图标</strong>  ==》 <strong>设置</strong> ==》 <strong>更新和安全</strong> ==》 <strong>针对开发人员</strong>（左侧），选中<strong>开发人员模式</strong>，</li>
<li>打开 <strong>Win图标</strong>  ==》 <strong>设置</strong> ==》 <strong>应用</strong> ==》 <strong>应用和功能</strong>（左侧） ==》 <strong>程序和功能</strong>（最下面的相关设置中） ==》 <strong>启用或关闭Windows功能</strong>（左侧），选中<strong>适用于Linux的Windows子系统(Beta)</strong>后点击确定。</li>
<li>重启计算机。打开bash，打开bash的方法很多，这里列出三种：1、直接在微软小娜中输入关键字”<strong>bash</strong>“搜索Bash on Ubuntu on Windows；2、<code>Win键+R</code>，输入bash，点击确定即可打开bash；3、<code>Win键+R</code>，输入cmd，在cmd中输入bash，回车即可打开bash。打开bash后将会提示你是否下载安装Ubuntu on Windows，输入y继续，稍等片刻即可完成下载安装。</li>
</ol>
<h2 id="设置篇"><a href="#设置篇" class="headerlink" title="设置篇"></a>设置篇</h2><p>　　安装完成后系统将会提示你设置用户名和密码。（如果这一步设置成功可以直接跳过设置篇直接看使用篇）。不知道怎的，本人这一步没有完成，每次系统都是直接以root用户登录，而且没有密码，为了安全考虑，也幸好登录时是root用户，可以自由对系统修改。所以本人需要对root密码进行修改，并创建新的用户。具体过程需执行以下命令：</p>
<p>root用户下，修改用户密码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd 用户名 (修改密码)</div></pre></td></tr></table></figure>
<p>　　由于本人需要修改root密码，所以该用户名即为root，执行之后需要输入新密码（在*nix哲学中，密码是不会显示在输入屏幕中的，所以如果在输入密码时发现屏幕没有任何变化是没关系的，只管输入即可↖(&#94;ω&#94;)↗），两次输入完成后会显示密码更新成功。</p>
<p>接下来需要创建新的普通用户，在root用户下执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adduser xxx <span class="comment"># 这样的命令会在home目录下添加一个帐号</span></div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd xxx <span class="comment">#仅仅是添加用户，不会在home目录添加帐号</span></div></pre></td></tr></table></figure>
<p>　　推荐使用前者，这样可以很明确已经成功创建新用户，而且如果用户需要存放一些文件也更安全和方便。</p>
<p>　　在*nix中，绝对不推荐直接使用root用户对系统执行各种命令，毕竟其权限太大，一旦误操作将造成无法挽回的后果。有些命令普通用户可能没有权限执行，这时需要提高其权限，普通用户临时获取root权限的方法为：在需要执行的命令前添加<code>sudo</code>，像上文中如果普通用户需要创建新用户xxx则需要执行<code>sudo adduser xxx</code>，执行以上命令后同样需要输入新用户的密码。</p>
<h2 id="使用篇"><a href="#使用篇" class="headerlink" title="使用篇"></a>使用篇</h2><p>　　先切换至普通用户，执行<code>su xxx</code>切换用户，即可发现shell提示符由<code>#</code>变为<code>$</code>，前面的用户名由<code>root</code>变为<code>xxx</code>；执行<code>cd ~</code>切换至用户目录。由于Ubuntu系统中本身没有tree这个命令，需要执行以下命令安装tree命令工具：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install tree</div></pre></td></tr></table></figure>
<p>　　直接输入<code>tree</code>命令，系统将会自动以树形结构列出当前目录中所有文件及文件夹；执行<code>tree -L N</code> 命令，以树形结构查看当前N级的目录和文件，eg：以树形结构查看当前目录二级文件结构，则执行<code>tree -L 2</code>。若想将输出的2级文件结构保存至上一层文件的tree.txt文件中，可执行<code>tree -L 2 &gt; ../tree.txt</code>，进入上一层目录<code>cd ..</code>，打开tree.txt即可发现该目录的文件结构。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　遇事还是需要多查证一下啊，想当然果然是会出问题的，文章开头差点就犯错误了~(≧▽≦)/~。本文其实是在写<a href="https://cniter.github.io/2017/08/28/Win10%EF%BC%8BVS2013%EF%BC%8BCMake-gui%E7%BC%96%E8%AF%91%E5%92%8C%E9%85%8D%E7%BD%AEOpenCV-3-2-0/">Win10＋VS2013＋CMake-gui编译和配置OpenCV-3.2.0</a>时，为了方便显示输出文件结构而查找的相关资料。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<a href="http://jingyan.baidu.com/article/acf728fd19c7eff8e510a3eb.html" target="_blank" rel="external">linux tree命令以树形结构显示文件目录结构</a>（<a href="http://jingyan.baidu.com/tag?tagName=linux" target="_blank" rel="external">http://jingyan.baidu.com/tag?tagName=linux</a> ）</p>
<p>[2] <a href="http://jingyan.baidu.com/article/b24f6c822acbbb86bee5da75.html" target="_blank" rel="external">win tree命令 tree导出目录 tree显示树形结构</a>（<a href="http://jingyan.baidu.com/tag?tagName=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">http://jingyan.baidu.com/tag?tagName=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F</a> ）</p>
<p>[3] <a href="http://jingyan.baidu.com/article/39810a23957df3b636fda6cb.html" target="_blank" rel="external">win10下linux系统的安装（开启）和使用</a></p>
<p>[4] <a href="http://www.linuxidc.com/Linux/2012-06/62985.htm" target="_blank" rel="external">Ubuntu建立和删除用户</a></p>
<p>[5] <a href="http://www.jb51.net/article/46429.htm" target="_blank" rel="external">linux修改root密码和linux忘记root密码后找回密码的方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　&lt;del&gt;本文其实可以算是标题党，Windows本身并不能以树形结构显示文件目录结构，一般需要借助第三方工具&lt;/del&gt;（后面去网上搜索了一下，发现Windows居然也有一个tree命令o(╯□╰)o），Windows虽然能用命令行显示树形结构文件目录，但不像Linux那样可以输入一些参数控制其输出。Win10有个特殊的功能，就是可以使用Ubuntu的bash，只需要开启这个有趣的功能，就可以将Win10当Ubuntu使用，从而像Linux那样只输入相关命令即可显示树形结构文件目录。&lt;/p&gt;
&lt;font color=&quot;#FA8072&quot;&gt;*注：值得注意的是Win10中的bash目前不支持中文输入，只能切换到英文输入才能正常输入。&lt;/font&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="unix-like" scheme="http://cniter.github.io/tags/unix-like/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加站内本地搜索</title>
    <link href="http://cniter.github.io/2017/09/01/Hexo%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/"/>
    <id>http://cniter.github.io/2017/09/01/Hexo添加站内本地搜索/</id>
    <published>2017-09-01T08:23:39.000Z</published>
    <updated>2017-09-01T09:38:45.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　虽然本人博客目前数量不多，质量也不高，但抱着搞事的心态，先弄它一个站内本地搜索再说。</p>
<a id="more"></a>
<h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>　　要想使用本地搜索功能，首先需要安装相应的搜索插件<code>hexo-generator-searchdb</code>，网上可能大多数用的是hexo-generator-search这个插件，也有都装的，但本人就只安装这一个了，好像<code>hexo-generator-searchdb</code>更完善一点，由于本人前端接触的极少，所以就没有一一对比了，网上也没查到具体对比情况，有兴趣的童靴可以试试(╯▽╰)。至于具体安装如下，在站点根目录执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
<p>　　安装完之后重新生成页面，将会发现<strong>public文件夹</strong>下多出一个<code>search.xml</code>文件。然后在配置文件<code>_config.yml</code>中添加：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 站点本地搜索</span></div><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></div><div class="line"><span class="attr">  field:</span> <span class="string">all</span></div></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><strong>path</strong> - 指定生成的索引数据的文件名。默认为 search.xml 。</li>
<li><strong>field</strong> - 指定索引数据的生成范围。可选值包括：<ul>
<li><strong>post</strong> - 只生成博客文章（post）的索引（默认）；</li>
<li><strong>page</strong> - 只生成其他页面（page）的索引；</li>
<li><strong>all</strong> - 生成所有文章和页面的索引。</li>
</ul>
</li>
</ul>
<p>　　至于是在<strong>主题配置文件</strong>，还是在<strong>站点配置文件</strong>中添加，个人觉得都没关系，附：本人是在主题配置文件中添加的。</p>
<p>接下来就需要修改原主题的代码了。</p>
<h2 id="改码篇"><a href="#改码篇" class="headerlink" title="改码篇"></a>改码篇</h2><p>　　由于本人博客主题是基于<strong>SPFK</strong>对照着<strong>black-blue</strong>进行修改的，而且因为<strong>black-blue</strong>是有搜索的（本人不知道<strong>black-blue</strong>主题的作者是如何完成的，借助了什么技术），所以本人就看<strong>black-blue</strong>的搜索功能是修改了<strong>SPFK</strong>哪个地方，再将相应的代码添加至<strong>SPFK</strong>中（其中相应的代码来自<a href="http://moxfive.xyz/2016/05/31/hexo-local-search/" target="_blank" rel="external">让 Hexo 博客支持本地站内搜索</a>），从而逐渐完成本次搜索功能。</p>
<p>首先找到spfk主题下的<code>left-col.ejs</code>文件，对其修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.search_box)&#123; %&gt;</div><div class="line">            &lt;!-- &lt;form&gt;</div><div class="line">                &lt;input type=&quot;text&quot; class=&quot;st-default-search-input search&quot; id=&quot;search&quot; placeholder=&quot; Search...&quot;&gt;</div><div class="line">            &lt;/form&gt; --&gt;</div><div class="line"></div><div class="line">            &lt;form id=&quot;search-form&quot;&gt; &lt;!-- 搜索框相关 --&gt;</div><div class="line">                &lt;input type=&quot;text&quot; id=&quot;local-search-input&quot; name=&quot;q&quot; results=&quot;0&quot; placeholder=&quot;Search...&quot; class=&quot;search form-control&quot; autocomplete=&quot;off&quot; autocorrect=&quot;off&quot;/&gt;</div><div class="line">                &lt;i class=&quot;fa fa-times&quot; onclick=&quot;resetSearch()&quot;&gt;&lt;/i&gt; &lt;!-- 清空/重置搜索框 --&gt;</div><div class="line">            &lt;/form&gt;</div><div class="line">            &lt;div id=&quot;local-search-result&quot;&gt;&lt;/div&gt; &lt;!-- 搜索结果区 --&gt;</div><div class="line">            &lt;p class=&apos;no-result&apos;&gt;No results found &lt;/p&gt; &lt;!-- 无匹配时显示，注意请在 CSS 中设置默认隐藏 --&gt;</div><div class="line">        &lt;%&#125;%&gt;</div></pre></td></tr></table></figure>
<p>其次找到spfk主题下的<code>after-footer.ejs</code>文件，将其修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.search_box)&#123; %&gt;</div><div class="line">    &lt;!-- &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">      window.onload = function()&#123;</div><div class="line">        document.getElementById(&quot;search&quot;).onclick = function()&#123;</div><div class="line">            console.log(&quot;search&quot;)</div><div class="line">            search();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      function search()&#123;</div><div class="line">        (function(w,d,t,u,n,s,e)&#123;w[&apos;SwiftypeObject&apos;]=n;w[n]=w[n]||function()&#123;</div><div class="line">        (w[n].q=w[n].q||[]).push(arguments);&#125;;s=d.createElement(t);</div><div class="line">        e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);</div><div class="line">        &#125;)(window,document,&apos;script&apos;,&apos;//s.swiftypecdn.com/install/v2/st.js&apos;,&apos;_st&apos;);</div><div class="line"></div><div class="line">        _st(&apos;install&apos;,&apos;A1Pz-LKMXbrzcFg2FWi6&apos;,&apos;2.0.0&apos;);</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt; --&gt;</div><div class="line"></div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">      // 激活搜索框时才搜索</div><div class="line">        var inputArea = document.querySelector(&quot;#local-search-input&quot;);</div><div class="line">        var getSearchFile = function()&#123;</div><div class="line">          // 调用搜索函数</div><div class="line">          var search_path = &quot;&lt;%- config.search.path %&gt;&quot;;</div><div class="line">          if (search_path.length == 0) &#123;</div><div class="line">             search_path = &quot;search.xml&quot;;</div><div class="line">          &#125;</div><div class="line">          var path = &quot;&lt;%- config.root %&gt;&quot; + search_path;</div><div class="line">          searchFunc(path, &apos;local-search-input&apos;, &apos;local-search-result&apos;);</div><div class="line">        &#125;</div><div class="line">        inputArea.onfocus = function()&#123; getSearchFile() &#125;</div><div class="line">  </div><div class="line">        // 搜索重置</div><div class="line">        var $resetButton = $(&quot;#search-form .fa-times&quot;);</div><div class="line">        var $resultArea = $(&quot;#local-search-result&quot;);</div><div class="line">        inputArea.oninput = function()&#123; $resetButton.show(); &#125;</div><div class="line">        resetSearch = function()&#123;</div><div class="line">          $resultArea.html(&quot;&quot;);</div><div class="line">          document.querySelector(&quot;#search-form&quot;).reset();</div><div class="line">          $resetButton.hide();</div><div class="line">          $(&quot;.no-result&quot;).hide();</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        // 屏蔽回车</div><div class="line">        inputArea.onkeydown = function()&#123; if(event.keyCode==13) return false&#125;</div><div class="line">  </div><div class="line">        // 无搜索结果</div><div class="line">        $resultArea.bind(&quot;DOMNodeRemoved DOMNodeInserted&quot;, function(e) &#123;</div><div class="line">          if (!$(e.target).text()) &#123;</div><div class="line">            $(&quot;.no-result&quot;).show(200); </div><div class="line">          &#125; else &#123;</div><div class="line">            $(&quot;.no-result&quot;).hide();</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">  </div><div class="line">        // 搜索函数</div><div class="line">        var searchFunc = function(path, search_id, content_id) &#123;</div><div class="line">          &apos;use strict&apos;;</div><div class="line">          $.ajax(&#123;</div><div class="line">            url: path,</div><div class="line">            dataType: &quot;xml&quot;,</div><div class="line">            success: function( xmlResponse ) &#123;</div><div class="line">                // get the contents from search data</div><div class="line">                var datas = $( &quot;entry&quot;, xmlResponse ).map(function() &#123;</div><div class="line">                    return &#123;</div><div class="line">                        title: $( &quot;title&quot;, this ).text(),</div><div class="line">                        content: $(&quot;content&quot;,this).text(),</div><div class="line">                        url: $( &quot;url&quot; , this).text()</div><div class="line">                    &#125;;</div><div class="line">                &#125;).get();</div><div class="line">                var $input = document.getElementById(search_id);</div><div class="line">                var $resultContent = document.getElementById(content_id);</div><div class="line">                $input.addEventListener(&apos;input&apos;, function()&#123;</div><div class="line">                    var str=&apos;&lt;ul class=\&quot;search-result-list\&quot;&gt;&apos;;                </div><div class="line">                    var keywords = this.value.trim().toLowerCase().split(/[\s\-]+/);</div><div class="line">                    $resultContent.innerHTML = &quot;&quot;;</div><div class="line">                    if (this.value.trim().length &lt;= 0) &#123;</div><div class="line">                        return;</div><div class="line">                    &#125;</div><div class="line">                    // perform local searching</div><div class="line">                    datas.forEach(function(data) &#123;</div><div class="line">                        var isMatch = true;</div><div class="line">                        var content_index = [];</div><div class="line">                        var data_title = data.title.trim().toLowerCase();</div><div class="line">                        var data_content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g,&quot;&quot;).toLowerCase();</div><div class="line">                        var data_url = data.url;</div><div class="line">                        var index_title = -1;</div><div class="line">                        var index_content = -1;</div><div class="line">                        var first_occur = -1;</div><div class="line">                        // only match artiles with not empty titles and contents</div><div class="line">                        if(data_title != &apos;&apos; &amp;&amp; data_content != &apos;&apos;) &#123;</div><div class="line">                            keywords.forEach(function(keyword, i) &#123;</div><div class="line">                                index_title = data_title.indexOf(keyword);</div><div class="line">                                index_content = data_content.indexOf(keyword);</div><div class="line">                                if( index_title &lt; 0 &amp;&amp; index_content &lt; 0 )&#123;</div><div class="line">                                    isMatch = false;</div><div class="line">                                &#125; else &#123;</div><div class="line">                                    if (index_content &lt; 0) &#123;</div><div class="line">                                        index_content = 0;</div><div class="line">                                    &#125;</div><div class="line">                                    if (i == 0) &#123;</div><div class="line">                                        first_occur = index_content;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line">                        &#125;</div><div class="line">                        // show search results</div><div class="line">                        if (isMatch) &#123;</div><div class="line">                            str += &quot;&lt;li&gt;&lt;a href=&apos;/&quot;+ data_url +&quot;&apos; class=&apos;search-result-title&apos; target=&apos;_blank&apos;&gt;&quot;+ &quot;&gt; &quot; + data_title +&quot;&lt;/a&gt;&quot;;</div><div class="line">                            var content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g,&quot;&quot;);</div><div class="line">                            if (first_occur &gt;= 0) &#123;</div><div class="line">                                // cut out characters</div><div class="line">                                var start = first_occur - 6;</div><div class="line">                                var end = first_occur + 6;</div><div class="line">                                if(start &lt; 0)&#123;</div><div class="line">                                    start = 0;</div><div class="line">                                &#125;</div><div class="line">                                if(start == 0)&#123;</div><div class="line">                                    end = 10;</div><div class="line">                                &#125;</div><div class="line">                                if(end &gt; content.length)&#123;</div><div class="line">                                    end = content.length;</div><div class="line">                                &#125;</div><div class="line">                                var match_content = content.substr(start, end); </div><div class="line">                                // highlight all keywords</div><div class="line">                                keywords.forEach(function(keyword)&#123;</div><div class="line">                                    var regS = new RegExp(keyword, &quot;gi&quot;);</div><div class="line">                                    match_content = match_content.replace(regS, &quot;&lt;em class=\&quot;search-keyword\&quot;&gt;&quot;+keyword+&quot;&lt;/em&gt;&quot;);</div><div class="line">                                &#125;)</div><div class="line">                                str += &quot;&lt;p class=\&quot;search-result\&quot;&gt;&quot; + match_content +&quot;...&lt;/p&gt;&quot;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                    $resultContent.innerHTML = str;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;%&#125;%&gt;</div></pre></td></tr></table></figure>
<p>最后找到spfk主题下的<code>main.styl</code>文件，在其末尾添加：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*搜索框*/</span></div><div class="line"><span class="selector-class">.search</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">68%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">18px</span>;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">font-family</span>: inherit;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid transparent;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0.65</span>;</div><div class="line">  <span class="attribute">background</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.search</span>:hover &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*搜索重置按钮*/</span></div><div class="line"><span class="selector-id">#search-form</span> <span class="selector-class">.fa-times</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">0.7em</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.15</span>);</div><div class="line">  <span class="attribute">cursor</span>: pointer;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#4094c7</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#search-form</span> <span class="selector-class">.fa-times</span>:active &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#d3d3d3</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#search-form</span> <span class="selector-class">.fa-times</span>:hover &#123;</div><div class="line">  zoom: <span class="number">1.1</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">0.6em</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.25</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*搜索结果区*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> &#123;</div><div class="line">  <span class="comment">//margin: auto -12% auto -6%;</span></div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</div><div class="line">  <span class="attribute">text-align</span>: left;</div><div class="line">  <span class="attribute">word-break</span>: break-all;</div><div class="line"></div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">6px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.46</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">ul</span><span class="selector-class">.search-result-list</span> <span class="selector-tag">li</span>:hover &#123;</div><div class="line">  <span class="attribute">font-weight</span>: normal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*单条搜索结果*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0.5em</span> auto;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-class">.search-result-list</span> <span class="selector-tag">li</span>:hover &#123;</div><div class="line">  <span class="attribute">background</span>: rgba(<span class="number">47</span>,<span class="number">46</span>,<span class="number">46</span>,<span class="number">0.8</span>);</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*匹配的标题*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">a</span><span class="selector-class">.search-result-title</span> &#123;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#4094c7</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*搜索预览段落*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">p</span><span class="selector-class">.search-result</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0.4em</span> auto;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.2em</span>;</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">3.6em</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</div><div class="line">  <span class="attribute">text-align</span>: justify;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ffffffb3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*匹配的关键词*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">em</span><span class="selector-class">.search-keyword</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f58e90</span>;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#f58e90</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*无匹配搜索结果时显示*/</span></div><div class="line"><span class="selector-tag">p</span><span class="selector-class">.no-result</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">2em</span> <span class="number">0</span> <span class="number">2em</span> <span class="number">6%</span>;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0.5em</span>;</div><div class="line">  <span class="attribute">text-align</span>: left;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</div><div class="line">  <span class="attribute">font-family</span>: font-serif serif;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　这里请注意，当对<code>main.styl</code>文件做以上修改时，可能会发现有两个<code>.search</code>样式，而且相差不大，这时，不要对其原有的<code>.search</code>进行修改，更不要去注释掉它，只做上述修改就不用管了，不然可能会发生一些奇怪的事o(&gt;﹏&lt;)o。本人当时做以上修改时，将其原有的<code>.search</code>样式注释掉之后，整个页面的css布局全部都乱了(╯﹏╰)，不知道为什么(⊙_⊙?)，这两个同名样式看起来明明差不多的，最后只能维持现状了，等以后有机会再看看吧，业余前端伤不起啊!╮(╯_╰)╭。</p>
<p>　　至此整个站内本地搜索功能基本完成，勉强可以使用站内搜索功能了。</p>
<h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><p>　　*注：以下问题目前都没解决╮(╯▽╰)╭。</p>
<font color="#FA8072">1、搜索函数返回的url地址有问题。</font>

<p>　　问题描述：当点击搜索结果时，新弹出的标签页地址栏中url地址会有部分乱码情况；当鼠标移到搜索的结果列表上时，浏览器左下角显示的url地址虽然没有乱码情况，但其中有一个重复的<code>/</code>符号。所幸这两个问题并没有造成浏览器解析错误，浏览器还是可以正常显示页面的。</p>
<font color="#FA8072">2、搜索结果区布局有问题。</font>

<p>　　问题描述：当显示搜索结果时，搜索结果区会上下扩张，从而将其上下本来存在的一些布局挤开，造成布局混乱。这其实不算是一个spfk主题或者新添加的搜索功能的问题，而是新添加的一个东西又没有相应的和原本布局结合的布局文件，那就极大可能会有布局混乱的问题，至于这个要和原本布局契合的搜索结果区布局文件就只有等本人以后有机会有时间再完善去喽╮(╯▽╰)╭。</p>
<font color="#FA8072">3、搜索框激活问题。</font>

<p>　　问题描述：搜索框激活延迟很大，有时过很久或者需要切换站内页面它才能激活，给人的感觉就是好像没有搜索功能似的。添加搜索框激活功能据作者<a href="http://moxfive.xyz/" target="_blank" rel="external">MOxFIVE</a>所说是为了不让索引文件影响页面加载速度，MOxFIVE同时也在文末指出了一些不足之处，如果索引文件太大，可能还是会造成一些问题，但本人的博客数量又不多，所以估计还是本人的代码混合问题，而且MOxFIVE的博客搜索功能好像没这个问题（至少本人目前没发现）。这个问题同样只有等以后再说了(*&#94;__&#94;*) 嘻嘻……。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本文添加的本地搜索还很粗糙，还有很多地方需要以后去完善。但这好歹是一个好的开始，搜索功能至少勉强能够正常使用，总比以前是个空壳要好，以后有机会再慢慢去去完善吧↖(&#94;ω&#94;)↗。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://www.hahack.com/codes/local-search-engine-for-hexo/" target="_blank" rel="external">jQuery-based Local Search Engine for Hexo</a>（<a href="http://www.hahack.com/categories/codes/" target="_blank" rel="external">http://www.hahack.com/categories/codes/</a> ）</p>
<p>[2] <a href="http://moxfive.xyz/2016/05/31/hexo-local-search/" target="_blank" rel="external">让 Hexo 博客支持本地站内搜索</a>（<a href="http://moxfive.xyz/tags/Hexo/" target="_blank" rel="external">http://moxfive.xyz/tags/Hexo/</a> ）</p>
<p>[3] <a href="https://www.ezlippi.com/blog/2017/02/hexo-search.html" target="_blank" rel="external">Hexo博客添加站内搜索</a>（<a href="https://www.ezlippi.com/categories/hexo/" target="_blank" rel="external">https://www.ezlippi.com/categories/hexo/</a> ）</p>
<p>[4] <a href="https://www.oyohyee.com/post/Note/LocalSearch.html" target="_blank" rel="external">Hexo本地搜索及部分SEO优化</a> （<a href="https://www.oyohyee.com/categories/Note/" target="_blank" rel="external">https://www.oyohyee.com/categories/Note/</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　虽然本人博客目前数量不多，质量也不高，但抱着搞事的心态，先弄它一个站内本地搜索再说。&lt;/p&gt;
    
    </summary>
    
      <category term="建站小记" scheme="http://cniter.github.io/categories/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>用OpenCV显示OpenGL图形</title>
    <link href="http://cniter.github.io/2017/08/31/%E7%94%A8OpenCV%E6%98%BE%E7%A4%BAOpenGL%E5%9B%BE%E5%BD%A2/"/>
    <id>http://cniter.github.io/2017/08/31/用OpenCV显示OpenGL图形/</id>
    <published>2017-08-31T01:40:31.000Z</published>
    <updated>2017-08-31T01:56:17.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本文就是一个小实验，试验OpenCV到底能不能支持OpenGL图形显示。</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>　　如果在OpenCV用CMake编译时勾选<strong>WITH_OPENGL</strong>且编译一切顺利的话，编译和配置的具体步骤和情况可以看本人写的一篇文档：<a href="https://cniter.github.io/2017/08/28/Win10%EF%BC%8BVS2013%EF%BC%8BCMake-gui%E7%BC%96%E8%AF%91%E5%92%8C%E9%85%8D%E7%BD%AEOpenCV-3-2-0/">Win10＋VS2013＋CMake-gui编译和配置OpenCV-3.2.0</a> ，那么就可以用OpenCV窗口显示OpenGL图形。</p>
<p>　　在VS下使用Windows原有的OpenGL函数需要包含以下头文件和库文件：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/gl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glu.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"OpenGL32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"glu32.lib"</span>)</span></div></pre></td></tr></table></figure>
<p>　　在OpenCV中显示OpenGL图形需要<code>cv::namedWindow(openGLWindowName, cv::WINDOW_OPENGL)</code>，在namedWindow函数中添加cv::WINDOW_OPENGL参数说明该窗口支持OpenGL图形。</p>
<p>附示例程序：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/gl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glu.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"OpenGL32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"glu32.lib"</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> vertex_list[][<span class="number">3</span>] =</div><div class="line">&#123;</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 将要使用的顶点的序号保存到一个数组里面 </span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> GLint index_list[][<span class="number">2</span>] =</div><div class="line">&#123;</div><div class="line">	&#123; <span class="number">0</span>, <span class="number">1</span> &#125;,</div><div class="line">	&#123; <span class="number">2</span>, <span class="number">3</span> &#125;,</div><div class="line">	&#123; <span class="number">4</span>, <span class="number">5</span> &#125;,</div><div class="line">	&#123; <span class="number">6</span>, <span class="number">7</span> &#125;,</div><div class="line">	&#123; <span class="number">0</span>, <span class="number">2</span> &#125;,</div><div class="line">	&#123; <span class="number">1</span>, <span class="number">3</span> &#125;,</div><div class="line">	&#123; <span class="number">4</span>, <span class="number">6</span> &#125;,</div><div class="line">	&#123; <span class="number">5</span>, <span class="number">7</span> &#125;,</div><div class="line">	&#123; <span class="number">0</span>, <span class="number">4</span> &#125;,</div><div class="line">	&#123; <span class="number">1</span>, <span class="number">5</span> &#125;,</div><div class="line">	&#123; <span class="number">7</span>, <span class="number">3</span> &#125;,</div><div class="line">	&#123; <span class="number">2</span>, <span class="number">6</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">float</span> rotate = <span class="number">0</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line"></div><div class="line">GLint windowWidth = <span class="number">800</span>;</div><div class="line">GLint windowHeight = <span class="number">800</span>;</div><div class="line"></div><div class="line">GLfloat xRotAngle = <span class="number">-75.0f</span>;</div><div class="line">GLfloat yRotAngle = <span class="number">0.0f</span>;</div><div class="line">GLfloat zRotAngle = <span class="number">-135.0f</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> MIN_X = <span class="number">-200</span>;</div><div class="line"><span class="keyword">float</span> MAX_X = <span class="number">200</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> MIN_Y = <span class="number">-200</span>;</div><div class="line"><span class="keyword">float</span> MAX_Y = <span class="number">200</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> MIN_Z = <span class="number">-200</span>;</div><div class="line"><span class="keyword">float</span> MAX_Z = <span class="number">200</span>;</div><div class="line"></div><div class="line">GLfloat coordinatesize = <span class="number">200.0f</span>;</div><div class="line">GLfloat ratio = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> z1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2, <span class="keyword">float</span> z2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	glBegin(GL_LINES);</div><div class="line">	glVertex3f(x1, y1, z1);</div><div class="line">	glVertex3f(x2, y2, z2);</div><div class="line">	glEnd();</div><div class="line">	glFlush();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 绘制立方体</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCube</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> i, j;</div><div class="line">	glBegin(GL_LINES);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) <span class="comment">// 12 条线段</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) <span class="comment">// 每条线段 2个顶点</span></div><div class="line">		&#123;</div><div class="line">			glVertex3fv(vertex_list[index_list[i][j]]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	glEnd();</div><div class="line">	glFlush();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshapeOperate</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	glMatrixMode(GL_PROJECTION);</div><div class="line">	glLoadIdentity();</div><div class="line">	<span class="keyword">if</span> (ratio &lt; <span class="number">1</span>)</div><div class="line">		glOrtho(-coordinatesize, coordinatesize, -coordinatesize / ratio, coordinatesize / ratio, -coordinatesize, coordinatesize);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		glOrtho(-coordinatesize*ratio, coordinatesize*ratio, -coordinatesize, coordinatesize, -coordinatesize, coordinatesize);</div><div class="line"></div><div class="line">	glMatrixMode(GL_MODELVIEW);</div><div class="line">	glLoadIdentity();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshape</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> ((w == <span class="number">0</span>) || (h == <span class="number">0</span>))</div><div class="line">		<span class="keyword">return</span>;</div><div class="line"></div><div class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line"></div><div class="line">	ratio = (GLfloat)w / (GLfloat)h;</div><div class="line"></div><div class="line">	reshapeOperate();</div><div class="line">&#125;</div><div class="line"></div><div class="line">GLfloat AngleX = <span class="number">45.0f</span>;</div><div class="line">GLfloat AngleY = <span class="number">315.0f</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshape1</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	GLfloat aspect = (GLfloat)w / (GLfloat)h;</div><div class="line">	GLfloat nRange = <span class="number">100.0f</span>;</div><div class="line"></div><div class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line"></div><div class="line">	glMatrixMode(GL_PROJECTION); <span class="comment">//将当前矩阵指定为投影模式  </span></div><div class="line">	glLoadIdentity();</div><div class="line"></div><div class="line">	<span class="comment">//设置三维投影区  </span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (w &lt;= h)</div><div class="line">	&#123;</div><div class="line">		glOrtho(-nRange, nRange, -nRange * aspect, nRange * aspect, -nRange, nRange);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		glOrtho(-nRange, nRange, -nRange / aspect, nRange / aspect, -nRange, nRange);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(<span class="keyword">void</span>*)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// Draw something using OpenGL here  </span></div><div class="line">	<span class="comment">//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	 //清除所有的像素</span></div><div class="line"></div><div class="line">	<span class="comment">//glMatrixMode(GL_MODELVIEW);</span></div><div class="line">	<span class="comment">//glLoadIdentity();</span></div><div class="line">	<span class="comment">//glPushMatrix();</span></div><div class="line"></div><div class="line">	<span class="comment">////glTranslatef(-0.2, 0, 0); // 平移</span></div><div class="line">	<span class="comment">////glScalef(2, 1, 1);    // 缩放</span></div><div class="line"></div><div class="line">	<span class="comment">//glRotatef(xRotAngle, 1.0f, 0.0f, 0.0f);</span></div><div class="line">	<span class="comment">//glRotatef(yRotAngle, 0.0f, 1.0f, 0.0f);</span></div><div class="line">	<span class="comment">//glRotatef(zRotAngle, 0.0f, 0.0f, 1.0f);</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(1, 0, 0);</span></div><div class="line">	<span class="comment">//drawLine(0, 0, 0, MAX_X, 0, 0); //x轴</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(0, 1, 0);</span></div><div class="line">	<span class="comment">//drawLine(0, 0, 0, 0, MAX_Y, 0); //y轴</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(0, 0, 1);</span></div><div class="line">	<span class="comment">//drawLine(0, 0, 0, 0, 0, MAX_Z); //z轴</span></div><div class="line"></div><div class="line">	<span class="comment">//times++;</span></div><div class="line">	<span class="comment">//if (times &gt; 1)</span></div><div class="line">	<span class="comment">//&#123;</span></div><div class="line">	<span class="comment">//	times = 0;</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line"></div><div class="line">	<span class="comment">//if (times % 1 == 0)</span></div><div class="line">	<span class="comment">//&#123;</span></div><div class="line">	<span class="comment">//	rotate += 0.3;</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line"></div><div class="line">	<span class="comment">//glRotatef(rotate, 0, 1, 0);</span></div><div class="line">	<span class="comment">//glRotatef(rotate, 1, 0, 0);</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(0, 1, 1);</span></div><div class="line"></div><div class="line">	<span class="comment">//DrawCube();</span></div><div class="line"></div><div class="line">	<span class="comment">//glPopMatrix();</span></div><div class="line"></div><div class="line">	reshape1(windowWidth, windowHeight);</div><div class="line">	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</div><div class="line">	glMatrixMode(GL_MODELVIEW);</div><div class="line">	glLoadIdentity();</div><div class="line">	AngleX++;</div><div class="line">	AngleY++;</div><div class="line">	glPushMatrix();</div><div class="line">	&#123;</div><div class="line">		glRotatef(AngleX, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</div><div class="line">		glRotatef(AngleY, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//前表面  </span></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为黄色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//后表面  </span></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为青色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为绿色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为黑色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为蓝色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//上表面  </span></div><div class="line">		glColor3d(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为青色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3d(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3d(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为品红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3d(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为蓝色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//下表面  </span></div><div class="line">		glColor3ub(<span class="number">0u</span>, <span class="number">255u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为绿色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub(<span class="number">255u</span>, <span class="number">255u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为黄色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub(<span class="number">255u</span>, <span class="number">0u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub(<span class="number">0u</span>, <span class="number">0u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为黑色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//左表面  </span></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为青色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为绿色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为黄色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//右表面  </span></div><div class="line">		glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为品红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为蓝色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为黑色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line">		glEnd();</div><div class="line">	&#125;</div><div class="line">	glPopMatrix();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">opencvWithOpenGLTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> openGLWindowName = <span class="string">"OpenGL Test"</span>;</div><div class="line">	cv::namedWindow(openGLWindowName, cv::WINDOW_OPENGL);</div><div class="line">	cv::resizeWindow(openGLWindowName, windowWidth, windowHeight);</div><div class="line">	cv::setOpenGlContext(openGLWindowName);</div><div class="line">	cv::setOpenGlDrawCallback(openGLWindowName, onDraw, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (cv::waitKey(<span class="number">30</span>) != <span class="number">27</span>)</div><div class="line">	&#123;</div><div class="line">		cv::updateWindow(openGLWindowName);	<span class="comment">// when needed  </span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	opencvWithOpenGLTest();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行成功后可看到一个旋转的彩色立方体。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>　　从实验结果来看，OpenCV确实能支持OpenGL图形的显示，但其不足之处也很明显：没有提供鼠标和键盘的交互操作（可能是本人还没发现，毕竟只是尝试一下看它能不能显示），仅仅只是提供一个显示窗口。如果真想用OpenGL做一些好玩的东西，还是用glut和glew吧，不过glut已经停止更新许久，glew在调试时可能会出现一些莫名其妙的错误，所以网上有人用freeglut代替glut，glee代替glew，具体的东西本人也没试过，本人目前还没做过OpenGL相关的事，这次用OpenCV显示OpenGL图形纯粹是为了好玩(*&#94;__&#94; *) 嘻嘻……。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本篇文档也是上次编译配置完OpenCV-3.2后做的一次小实验，但当时并没有记录，所以还有一些参考资料也已经不知道了:-(。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/yang_xian521/article/details/8531058" target="_blank" rel="external">OpenCV学习笔记（六十一）——建立支持OpenGL的OpenCV工程“Master OpenCV”chp.3</a>（<a href="http://blog.csdn.net/yang_xian521/article/category/910716" target="_blank" rel="external">http://blog.csdn.net/yang_xian521/article/category/910716</a> ）     </p>
<p>[2] <a href="http://blog.csdn.net/bcbobo21cn/article/details/51058836" target="_blank" rel="external">几个opengl立方体绘制案例</a>（<a href="http://blog.csdn.net/bcbobo21cn/article/category/3104565" target="_blank" rel="external">http://blog.csdn.net/bcbobo21cn/article/category/3104565</a> ）              </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本文就是一个小实验，试验OpenCV到底能不能支持OpenGL图形显示。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
      <category term="opengl" scheme="http://cniter.github.io/tags/opengl/"/>
    
  </entry>
  
  <entry>
    <title>Win10＋VS2013＋CMake-gui编译和配置OpenCV-3.2.0</title>
    <link href="http://cniter.github.io/2017/08/28/Win10%EF%BC%8BVS2013%EF%BC%8BCMake-gui%E7%BC%96%E8%AF%91%E5%92%8C%E9%85%8D%E7%BD%AEOpenCV-3-2-0/"/>
    <id>http://cniter.github.io/2017/08/28/Win10＋VS2013＋CMake-gui编译和配置OpenCV-3-2-0/</id>
    <published>2017-08-28T07:38:39.000Z</published>
    <updated>2017-08-30T09:28:56.696Z</updated>
    
    <content type="html"><![CDATA[<p>本人系统环境：Win10_x64 英文企业版；VS2013-update5 英文旗舰版；CMake-3.6.3-win64-x64 免安装版；Qt-opensource-windows-x86-msvc2013-5.6.2。</p>
<p>　　*注：本人写的这篇文档主要用来编译x86版的动态debug库，想编译其它类型的库请自行参考其它资料，做相关改变。（其实如果想编译x64版的可以在用VS2013编译时将上方的Win32平台选择x64平台；想编译release版的可以在用VS2013编译时将上方的Debug模式选择Release模式；想编译静态库的可以在用CMake生成时取消勾选<strong>BUILD_SHARED_LIBS</strong>选项即可。:-P）</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　因为OpenCV-3.2官方的release版只有支持VS2015的库，而且不包括扩展包（opencv_contrib）中的库，而由于某些历史原因，本人目前使用的编译器还是VS2013，又想用用扩展包中一些有趣的算法，在加上上个月opencv-3.3还没有正式release，所以上个月本人就利用VS2013对opencv-3.2进行编译。具体编译过程如下：</p>
<a id="more"></a>
<h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>　　先在GitHub上下载对应的opencv源码包：<a href="https://github.com/opencv/opencv/archive/3.2.0.zip" target="_blank" rel="external">opencv-3.2.0</a>和<a href="https://github.com/opencv/opencv_contrib/archive/3.2.0.zip" target="_blank" rel="external">opencv_contrib-3.2.0</a>（<a href="https://github.com/opencv" target="_blank" rel="external">https://github.com/opencv</a> ），扩展包版本一定要和opencv版本相同。本人为了添加Qt后端显示支持（为了好看和方便:-P），所以还下载安装了支持VS2013的<a href="http://download.qt.io/archive/qt/5.6/5.6.2/qt-opensource-windows-x86-msvc2013-5.6.2.exe" target="_blank" rel="external">Qt-5.6.2</a>（<a href="http://download.qt.io/archive/qt/" target="_blank" rel="external">http://download.qt.io/archive/qt/</a> ）。再<a href="https://cmake.org/files/v3.6/cmake-3.6.3-win64-x64.zip" target="_blank" rel="external">下载CMake-3.6.3-win64-x64 免安装版</a>（<a href="https://cmake.org/files/" target="_blank" rel="external">https://cmake.org/files/</a> ）。至于微软的东西，推荐直接去<a href="https://msdn.itellyou.cn/" target="_blank" rel="external">MSDN 我告诉你</a>去下载。</p>
<p>　　由于网上有的资料（具体是哪篇文章本人忘记了o(╯□╰)o）说编译时的文件结构可能会影响编译是否成功，再加上为了方便编译管理，本人的编译时的文件结构为：</p>
<blockquote>
<p>opencv-3.2.0_build<br>├──  build<br>└──  sources<br>​     　　├── opencv-3.2.0<br>​     　　└── opencv_contrib-3.2.0</p>
<p>4 directories, 0 files</p>
</blockquote>
<p>其中opencv-3.2.0用来装opencv-3.2.0.zip解压后的源码；opencv_contrib-3.2.0用来装opencv_contrib-3.2.0.zip解压后的源码；build用来装CMake编译完成后的文件。</p>
<h2 id="编译篇"><a href="#编译篇" class="headerlink" title="编译篇"></a>编译篇</h2><p>　　打开/cmake-3.6.3-win64-x64/bin/cmake-gui.exe，在<strong>Where is the source code</strong>文本框中选择/opencv-3.2.0_build/sources/opencv-3.2.0；在<strong>Where to build the binaris</strong>文本框中选择/opencv-3.2.0_build/build，点击<strong>Configure</strong>，在弹出的编译器选择框中选择<strong>Visual Studio 12 2013</strong>，一直<strong>Configure</strong>直到红色的条变白。</p>
<p>　　网上有人在这一步可能会出现<code>ffmpeg not downloaded</code>和<code>“ippicv_windows_20151201.zip”not downloaded</code>这两个问题，本人没出现这两个问题，所以没有机会验证<a href="http://livezingy.com/compile-opencv-and-opencv_contrib/" target="_blank" rel="external">cmake-gui和vs2013编译opencv和opencv_contrib源码</a>中的解决办法是否正确。</p>
<p>　　接下来就是添加扩展包，在白色条中找到<strong>OPENCV_EXTRA_MODULES_PATH</strong>文本框，在其中选择opencv_contrib源码中modeles所在路径：/opencv-3.2.0_build/sources/opencv_contrib-3.2.0/modules。</p>
<p>　　至于想要支持OpenGL和Qt就需要勾选<strong>WITH_OPENGL</strong>和<strong>WITH_QT</strong>并<strong>Configure</strong>后选择好Qt的安装目录，如果配置好Qt的环境变量Cmake将会自动选择好Qt所在路径。</p>
<p>　　随后再次反复<strong>Configure</strong>直到界面不再出现红色背景，之后单击<strong>Generate</strong>。不出意外的话，你会看到<strong>Configure done</strong>和<strong>Generate done</strong>。</p>
<p>　　本人在这一步出现了<a href="http://livezingy.com/build_shared_libs/" target="_blank" rel="external">VS2013_CMake_opencv3.1动态库与静态库的配置与编译</a>中的问题，原因是同时勾选了同时勾选了<strong>BUILD_opencv_world</strong>和<strong>BUILD_opencv_contirb_world</strong>，本人的解决办法是将它们全部取消勾选，再次<strong>Configure</strong>和<strong>Generate</strong>。</p>
<p>　　如果上面一切顺利的话就可以进行下一步了：使用VS2013编译OpenCV。打开/opencv-3.2.0_build/build目录，将会看到一大堆文件和文件夹，双击/opencv-3.2.0_build/build目录下的<strong>OpenCV.sln</strong>，用VS2013打开。找到<strong>CMakeTargets</strong>中的<strong>INSTALL</strong>，然后右键选择“Project Only”–&gt;“Build Only INSTALL”。</p>
<p>漫长的等待。。。。。。(╯﹏╰)b</p>
<p>　　本人在这一步出现了一个问题，具体问题和解决方法详见问题篇。</p>
<p>　　一切顺利的话，应该会比本人下面的库多两个，本人最后生成的Debug库为：</p>
<blockquote>
<p>opencv_aruco320d.lib</p>
<p>opencv_bgsegm320d.lib</p>
<p>opencv_bioinspired320d.lib</p>
<p>opencv_calib3d320d.lib</p>
<p>opencv_ccalib320d.lib</p>
<p>opencv_core320d.lib</p>
<p>opencv_datasets320d.lib</p>
<p>opencv_dnn320d.lib</p>
<p>opencv_dpm320d.lib</p>
<p>opencv_face320d.lib</p>
<p>opencv_features2d320d.lib</p>
<p>opencv_flann320d.lib</p>
<p>opencv_fuzzy320d.lib</p>
<p>opencv_highgui320d.lib</p>
<p>opencv_imgcodecs320d.lib</p>
<p>opencv_imgproc320d.lib</p>
<p>opencv_line_descriptor320d.lib</p>
<p>opencv_ml320d.lib</p>
<p>opencv_objdetect320d.lib</p>
<p>opencv_optflow320d.lib</p>
<p>opencv_phase_unwrapping320d.lib</p>
<p>opencv_photo320d.lib</p>
<p>opencv_plot320d.lib</p>
<p>opencv_reg320d.lib</p>
<p>opencv_rgbd320d.lib</p>
<p>opencv_saliency320d.lib</p>
<p>opencv_shape320d.lib</p>
<p>opencv_stereo320d.lib</p>
<p>opencv_stitching320d.lib</p>
<p>opencv_structured_light320d.lib</p>
<p>opencv_superres320d.lib</p>
<p>opencv_surface_matching320d.lib</p>
<p>opencv_text320d.lib</p>
<p>opencv_tracking320d.lib</p>
<p>opencv_video320d.lib</p>
<p>opencv_videoio320d.lib</p>
<p>opencv_videostab320d.lib</p>
<p>opencv_xfeatures2d320d.lib</p>
<p>opencv_ximgproc320d.lib</p>
<p>opencv_xobjdetect320d.lib</p>
<p>opencv_xphoto320d.lib</p>
<p>共41个。</p>
</blockquote>
<h2 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h2><p>　　因为本人只编译了x86版动态debug库，所以以下环境配置都只针对x86版动态debug库。（其实要配置x64的库就只需将x86换成x64即可；要配置release模式的库就只需在添加附加依赖项中的库文件选择release模式的库（即数字后没有d的lib）；若要配置静态库就需要选择静态库文件夹以及在附加依赖项中添加相应的静态库文件。:-P）</p>
<p>　　首先把/opencv-3.2.0_build/build/install中的文件都提取出来，这和OpenCV官方release的opencv文件结构差不多，具体两层结构如下</p>
<blockquote>
<p>.<br>├── bin<br>│　&ensp;└── opencv_waldboost_detectord.exe<br>├── etc<br>│　&ensp;├── haarcascades<br>│　&ensp;└── lbpcascades<br>├── include<br>│　&ensp;├── opencv<br>│　&ensp;└── opencv2<br>├── LICENSE<br>├── OpenCVConfig.cmake<br>├── OpenCVConfig-version.cmake<br>└── x86<br>​     　　└── vc12</p>
<p>9 directories, 4 files</p>
</blockquote>
<p>x86文件夹就是VS2013生成的对应VS版本32位的各种库，include文件夹就是opencv的各项模块。本人将其中提取出的文件全部放入了C:\Program Files\OpenCV\3.2.0\build文件夹中。</p>
<p>　　首先配置环境变量，系统（或用户）环境变量如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量名</th>
<th>变量值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Path</td>
<td>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\bin</td>
</tr>
<tr>
<td style="text-align:center">OPENCV</td>
<td>C:\Program Files\OpenCV\3.2.0\build</td>
</tr>
</tbody>
</table>
<p>不然可能会报错：<font color="#FA8072">程序“XXXXXX”已退出，返回值为 -1073741701 (0xc000007b)</font>。其中下面那行可以选择不要添加。</p>
<p>　　然后在VS中配置环境。新建工程，然后在“<strong>属性管理器</strong>”中对应项目下<strong>Debug | Win32</strong>文件夹右键“<strong>添加新项目属性表</strong>”。（方便一次配置，多次使用，以后再使用只要在相应项目下右键“<strong>添加现有属性表</strong>”即可），本人新项目属性表取名为：opencv-3.2.0_msvc2013_x86d.props。</p>
<p>接下来就是真正的VS环境配置了：</p>
<p>　　双击打开刚才新建的属性表，选中“<strong>VC++目录</strong>”，<font color="#FA8072">注意在进行以下配置时建议都勾选左下角的“<strong>从父级或项目默认设置继承</strong>”</font></p>
<p>“<strong>可执行文件目录</strong>”中添加：</p>
<blockquote>
<p>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\bin</p>
</blockquote>
<p>“<strong>包含目录</strong>”中添加：</p>
<blockquote>
<p>C:\Program Files\OpenCV\3.2.0\build\include</p>
<p>C:\Program Files\OpenCV\3.2.0\build\include\opencv</p>
<p>C:\Program Files\OpenCV\3.2.0\build\include\opencv2</p>
</blockquote>
<p>“<strong>库目录</strong>”中添加：</p>
<blockquote>
<p>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\lib</p>
</blockquote>
<p>选中“<strong>链接器</strong>”  –&gt; “<strong>常规</strong>”，“<strong>附加库目录</strong>”中添加：</p>
<blockquote>
<p>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\lib</p>
</blockquote>
<p>“<strong>链接器</strong>” –&gt; “<strong>输入</strong>”，“<strong>附加依赖项</strong>”中添加<code>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\lib</code>中数字后带d的库文件，即编译篇中本人最后生成的41个库文件。</p>
<p>　　<font color="#FA8072">配置完之后不要忘了右键该属性表进行保存处理</font>，以便下个项目直接使用，不需要再重复进行配置。</p>
<p>最后附示例程序：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;  </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat lena = cv::imread(<span class="string">"lena.jpg"</span>); <span class="comment">//载入图像到Mat，jpg文件和该cpp在同一文件夹</span></div><div class="line">	cv::namedWindow(<span class="string">"lena"</span>); <span class="comment">//创建一个名为 "lean"的窗口   </span></div><div class="line">	cv::imshow(<span class="string">"lena"</span>, lena);    <span class="comment">//显示名为 "lena"的窗口</span></div><div class="line">	cv::waitKey(<span class="number">5000</span>);  <span class="comment">// 只对窗口机制起作用（显示5000ms，随后返回-1，即窗口关闭），若在此期间有按键按下，则马上返回按键的ASCII码。</span></div><div class="line">	<span class="comment">//system("pause");</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里必须在imshow后加入waitkey，因为WaitKey不止是Wait Key 而已，它其实还涉及到消息响应，有这个函数cv内部的WndProc函数才能起作用，才会更新窗口。</p>
<p>　　最后程序运行成功并显示lena图，则说明编译和配置没问题。</p>
<h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><font color="#FA8072">1、用VS2013编译OpenCV在漫长的等待阶段出现的问题。</font>

<p>　　<strong>问题描述：</strong>CVV模块报错，TS模块编译不出来，好在这两个模块都不是很重要，可以忽略，本人强迫症也没到这种程度O(∩_∩)O~。</p>
<p>　　<strong>解决办法：</strong> 在CVV模块报错后可在CMake（不知道具体是<strong>INSTALL</strong>下的<strong>CMake Rules</strong>中的<strong>INSTALL_force.rule</strong>，还是<strong>ALL_BUILD</strong>下的<strong>CMakeLists.txt</strong>，忘记了o(╯□╰)o）中添加<code>-DBUILD_opencv_cvv=OFF</code>忽略CVV模块，从而正常编译其它模块。参考<a href="https://github.com/opencv/opencv_contrib/issues/577" target="_blank" rel="external">errors on build opencv with cvv module and qt5 #577</a>。如果实在不行的话就在CMake生成的时候取消勾选出错模块，若是用CMake重新生成的话不要忘了先把/opencv-3.2.0_build/build目录下的文件全部删除干净。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　这是以前写的两篇文档，现在再来整理成一篇。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>　　既然能看到这里，说明是想在VS下使用OpenCV，这里推荐一款VS下OpenCV开发调试神器：<a href="https://marketplace.visualstudio.com/items?itemName=WolfKienzle.ImageWatch" target="_blank" rel="external">Image Watch</a>，效果谁用谁知道。Image Watch是VS的一个插件，不过它只支持VS2012及以上版本。使用方法为先设置断点（F9），随后在调试（F5）模式下，鼠标指针悬停在<code>cv::Mat</code>类型变量上，即可出现<img src="http://img.blog.csdn.net/20161115134305655" alt="插件调试标签">，点击查看图标即可显示相应图像。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://livezingy.com/compile-opencv-and-opencv_contrib/" target="_blank" rel="external">cmake-gui和vs2013编译opencv和opencv_contrib源码</a>（<a href="http://livezingy.com/category/opencv/" target="_blank" rel="external">http://livezingy.com/category/opencv/</a> ）</p>
<p>[2] <a href="http://livezingy.com/build_shared_libs/" target="_blank" rel="external">VS2013_CMake_opencv3.1动态库与静态库的配置与编译</a>（<a href="http://livezingy.com/category/opencv/" target="_blank" rel="external">http://livezingy.com/category/opencv/</a> ）</p>
<p>[3] <a href="https://wenku.baidu.com/view/ef3081e3a5e9856a561260d1.html" target="_blank" rel="external">使用VS2015编译以及静态编译opencv3记录</a></p>
<p>[4]  <a href="https://github.com/opencv/opencv_contrib/issues/577" target="_blank" rel="external">errors on build opencv with cvv module and qt5 #577</a></p>
<p>[5] <a href="http://blog.csdn.net/fengbingchun/article/details/46756373" target="_blank" rel="external">VS2013中Image Watch插件的使用(OpenCV)</a>（<a href="http://blog.csdn.net/fengbingchun/article/category/721609" target="_blank" rel="external">http://blog.csdn.net/fengbingchun/article/category/721609</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人系统环境：Win10_x64 英文企业版；VS2013-update5 英文旗舰版；CMake-3.6.3-win64-x64 免安装版；Qt-opensource-windows-x86-msvc2013-5.6.2。&lt;/p&gt;
&lt;p&gt;　　*注：本人写的这篇文档主要用来编译x86版的动态debug库，想编译其它类型的库请自行参考其它资料，做相关改变。（其实如果想编译x64版的可以在用VS2013编译时将上方的Win32平台选择x64平台；想编译release版的可以在用VS2013编译时将上方的Debug模式选择Release模式；想编译静态库的可以在用CMake生成时取消勾选&lt;strong&gt;BUILD_SHARED_LIBS&lt;/strong&gt;选项即可。:-P）&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　因为OpenCV-3.2官方的release版只有支持VS2015的库，而且不包括扩展包（opencv_contrib）中的库，而由于某些历史原因，本人目前使用的编译器还是VS2013，又想用用扩展包中一些有趣的算法，在加上上个月opencv-3.3还没有正式release，所以上个月本人就利用VS2013对opencv-3.2进行编译。具体编译过程如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>解决写上篇文档“GitHub+Hexo搭建个人博客”遇到的问题</title>
    <link href="http://cniter.github.io/2017/08/26/%E8%A7%A3%E5%86%B3%E5%86%99%E4%B8%8A%E7%AF%87%E6%96%87%E6%A1%A3%E2%80%9CGitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E2%80%9D%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://cniter.github.io/2017/08/26/解决写上篇文档“GitHub-Hexo搭建个人博客”遇到的问题/</id>
    <published>2017-08-26T12:20:51.000Z</published>
    <updated>2017-09-13T12:52:00.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="超链接网址问题"><a href="#超链接网址问题" class="headerlink" title="超链接网址问题"></a>超链接网址问题</h2><p>　　<strong>问题描述：</strong>使用正常的markdown超链接格式<code>[]()</code>没问题，然而当直接将一个网址链接放入该文档时，它会将该链接后面的文字也当成是该链接的一部分，直接点击链接时，会将后面的文字也放入浏览器地址栏，从而出现网页404错误：<em>404: Page could not be found</em>。</p>
<p>　　<strong>解决办法：</strong>在网址链接后输入一个空格以隔开网址链接和后面的文字。</p>
<a id="more"></a>
<h2 id="超链接样式问题"><a href="#超链接样式问题" class="headerlink" title="超链接样式问题"></a>超链接样式问题</h2><p>　　<strong>问题描述：</strong>本人使用的hexo主题是基于spfk主题稍微修改过的，spfk主题能自动修改超链接原有的样式，挺好看的:D，但是当本人在markdown中数字编号列表，即有序列表中添加超链接时，其样式并没有修改，还是普通的超链接样式。</p>
<p>　　<strong>解决办法：</strong>没有解决。最后只是跳过了这个问题，就用中文的序号表示列表。</p>
<h2 id="文本段落问题"><a href="#文本段落问题" class="headerlink" title="文本段落问题"></a>文本段落问题</h2><p>　　<strong>问题描述：</strong>为了使文本有段落感，一般都会在段落首字前空两格，但是在markdown中空两格，用hexo发布后并没有空两格，这使得文档没有段落感，阅读体验有点差。</p>
<p>　　<strong>解决办法：</strong>将中文输入法由半角切换至全角，在段落首字前输入两个空格即可。</p>
<h2 id="显示英文尖括号问题"><a href="#显示英文尖括号问题" class="headerlink" title="显示英文尖括号问题"></a>显示英文尖括号问题</h2><p>　　<strong>问题描述：</strong>由于上篇文档需要在文档中显示<code>&lt;youname&gt;</code>，但由于Hexo可能将其当做一个xml标签处理了，所以发布之后的文档没有显示该文字。</p>
<p>　　<strong>解决办法：</strong>首先本人尝试了转义字符<code>\</code>，谁曾想它只出现了一个转义字符，该文字还是没显示，本人差点又要跳过这个问题，将其用另一种表示法了。后来本人想到这最后不是会转为html吗，本人就直接用html中尖括号的表示法不就行啦:p，于是参考<a href="http://liuxufei.com/weblog/jishu/71.html" target="_blank" rel="external">HTML语言中括号(尖括号)的字符编码</a>，用<code>&amp;lt;</code>代替<code>&lt;</code>，用<code>&amp;gt;</code>代替<code>&gt;</code>，最后该文字终于出来了。</p>
<h2 id="给文字添加颜色问题"><a href="#给文字添加颜色问题" class="headerlink" title="给文字添加颜色问题"></a>给文字添加颜色问题</h2><p>　　<strong>问题描述：</strong>本人想给注意事项上的需要注意的问题添加醒目的颜色，但markdown本身不支持给文字添加颜色。</p>
<p>　　<strong>解决办法：</strong>由于Hexo最后会将markdown文档转换为html文档发布，所以直接将html标签写进markdown文档，最后自然会出现html样式，本人这里参考<a href="http://blog.csdn.net/testcs_dn/article/details/45719357/" target="_blank" rel="external">CSDN-markdown编辑器语法——字体、字号与颜色</a>，给想要变色的文字添加<code>&lt;font color=#FA8072&gt;&lt;/font&gt;</code>标签。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://liuxufei.com/weblog/jishu/71.html" target="_blank" rel="external">HTML语言中括号(尖括号)的字符编码</a>（<a href="http://liuxufei.com/weblog/jishu" target="_blank" rel="external">http://liuxufei.com/weblog/jishu</a> ）</p>
<p>[2]  <a href="http://blog.csdn.net/testcs_dn/article/details/45719357/" target="_blank" rel="external">CSDN-markdown编辑器语法——字体、字号与颜色</a>（<a href="http://blog.csdn.net/testcs_dn" target="_blank" rel="external">http://blog.csdn.net/testcs_dn</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;超链接网址问题&quot;&gt;&lt;a href=&quot;#超链接网址问题&quot; class=&quot;headerlink&quot; title=&quot;超链接网址问题&quot;&gt;&lt;/a&gt;超链接网址问题&lt;/h2&gt;&lt;p&gt;　　&lt;strong&gt;问题描述：&lt;/strong&gt;使用正常的markdown超链接格式&lt;code&gt;[]()&lt;/code&gt;没问题，然而当直接将一个网址链接放入该文档时，它会将该链接后面的文字也当成是该链接的一部分，直接点击链接时，会将后面的文字也放入浏览器地址栏，从而出现网页404错误：&lt;em&gt;404: Page could not be found&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;解决办法：&lt;/strong&gt;在网址链接后输入一个空格以隔开网址链接和后面的文字。&lt;/p&gt;
    
    </summary>
    
      <category term="Problems" scheme="http://cniter.github.io/categories/Problems/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
      <category term="markdown" scheme="http://cniter.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <link href="http://cniter.github.io/2017/08/26/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://cniter.github.io/2017/08/26/Hexo-GitHub搭建个人博客/</id>
    <published>2017-08-26T08:51:13.000Z</published>
    <updated>2017-09-14T13:21:58.362Z</updated>
    
    <content type="html"><![CDATA[<p>本人系统环境：Win10_x64。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本来是想在国内某网站上继续写的，毕竟完全不需要自己管理，只需要负责写好文档就可以了，但某一天，该网站由于响应国家的号召，要实名验证，本来实名验证也没什么，就输入手机号，并填写验证码即可，但该网站实名验证的方式给人的感觉特别不爽，于是就决定自己搭建博客，这样虽然有点麻烦，但由于完全是自己管理，自己完全拥有该文档的所有权，也不用担心哪天别的网站突然出现的各种破问题，相比这种完全自由支配、无比爽快的感觉，管理这种麻烦就是小事了。</p>
<a id="more"></a>
<h2 id="GitHub-Hexo个人博客搭建"><a href="#GitHub-Hexo个人博客搭建" class="headerlink" title="GitHub+Hexo个人博客搭建"></a>GitHub+Hexo个人博客搭建</h2><h3 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h3><p><strong>在GitHub上搭建博客的要求：</strong></p>
<p>　　1、要有GitHub账号。（没有怎么办，没有就去<a href="https://github.com/join?source=header-home" target="_blank" rel="external">注册</a>啊）</p>
<p><strong>使用Hexo框架的要求：</strong></p>
<p>　　1、需要安装node.js。（电脑上没有安装怎么办，没有安装就去<a href="http://nodejs.cn/download/" target="_blank" rel="external">下载</a>（<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a> ）安装啊）</p>
<p>　　2、需要安装git。（没有安装就去<a href="https://git-scm.com/downloads" target="_blank" rel="external">下载</a>安装，附<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git学习教程</a>）</p>
<h3 id="GitHub篇"><a href="#GitHub篇" class="headerlink" title="GitHub篇"></a>GitHub篇</h3><p>　　满足上文的要求之后，就可以开始搭建了，首先在GitHub中新建一个仓库（<strong>New repository</strong>），在<strong>Repository name</strong>下填写<strong>&lt;yourname&gt;.github.io</strong>，其它可默认，点击Create repository。</p>
<p>　　新建仓库完成后，点击<strong>Create new file</strong>新建一个<strong>README.md</strong>文件，随便写点什么，比如“It&#39;s my blog website”。</p>
<p>　　点击上方横条选项中的<strong>Settings</strong>，查看<strong>GitHub Pages</strong>里的设置，上方应该有绿色框，框中“<strong>Your site is published at <a href="https://&lt;yourname&gt;.github.io" target="_blank" rel="external">https://&lt;yourname&gt;.github.io</a></strong>”，该网址即为博客主页，<strong>Source</strong>应该是<strong>master branch</strong>，自此GitHub上的设置可以算是完成了，但为了方便和防止误删，一般把Hexo文件也放入GitHub中，为方便管理，可以新建另一分支专门放Hexo文件。</p>
<p>　　在仓库code界面中点击<strong>Branch：master</strong>，在出现的框中输入hexo新建hexo分支，在<strong>branches</strong>中<strong>Change default branch</strong>设置hexo为默认分支。</p>
<h3 id="Hexo篇"><a href="#Hexo篇" class="headerlink" title="Hexo篇"></a>Hexo篇</h3><p>　　将刚才新建的仓库克隆到本地：<code>git clone https://github.com/&lt;yourname&gt;/&lt;yourname&gt;.github.io.git</code>当前在hexo分支。</p>
<p>在&lt;yourname&gt;.github.io文件夹下执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">hexo init blog</div><div class="line"><span class="built_in">cd</span> blog</div><div class="line">npm install</div><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>　　按这样一连串执行，如果没出问题的话就会在&lt;yourname&gt;.github.io文件夹里生成一个blog文件夹，该文件夹有一大堆Hexo有关的文件。</p>
<h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><p>　　Hexo的配置文件为blog文件夹中的<strong>_config.yml</strong>文件。</p>
<p>　　修改配置文件不要使用windows自带的记事本，本人使用的VS Code，或者Notepad++和Sublime Text 2等编辑器都可以，以防文件编码改变，具体修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span>  <span class="string">&lt;你的blog名&gt;</span></div><div class="line"><span class="attr">author:</span> <span class="string">&lt;作者名称&gt;</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN&lt;网站所用语言，中国大陆选择zh-CN即可&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> <span class="attr">http://&lt;yourname&gt;.github.io</span></div><div class="line"></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/&lt;yourname&gt;/&lt;yourname&gt;.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<p>其它的默认即可，具体参数信息详见<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo官方文档</a>。</p>
<h4 id="配置git用户信息"><a href="#配置git用户信息" class="headerlink" title="配置git用户信息"></a>配置git用户信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"&lt;yourname&gt;"</span></div><div class="line">git config --global user.email <span class="string">"&lt;yourname&gt;@xxxxxx.com"</span></div></pre></td></tr></table></figure>
<p>　　如果是个人电脑的话推荐加上–global全局参数，因为这样更加方便，如果不加的话，还要在\&lt;yourname&gt;.github.io\blog\.deploy_git\.git中config里加入git用户信息，不然可能提交会出问题，稍显麻烦。</p>
<h4 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h4><p>在blog文件夹下执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo g         <span class="comment">#generate 生成静态文件</span></div><div class="line">hexo d         <span class="comment">#deploy 部署网站.部署网站前,需要预先生成静态文件</span></div><div class="line">hexo s         <span class="comment">#server 启动服务器</span></div></pre></td></tr></table></figure>
<p>或者执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g -d</div></pre></td></tr></table></figure>
<p>快速部署个人blog。</p>
<p>　　在浏览器中输入<code>http://localhost:4000/</code>，将会出现Hexo的Hello World界面，更多Hexo命令详见<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">Hexo官方文档</a>。</p>
<p>最后将Hexo文件提交到GitHub远程仓库，具体提交命令为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit</div><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<p>　　在浏览器中输入<code>https://&lt;yourname&gt;.github.io</code>同样会出现Hexo的Hello World界面，自此整个个人blog的框架已经完全搭好了。</p>
<h3 id="其它篇"><a href="#其它篇" class="headerlink" title="其它篇"></a>其它篇</h3><h4 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h4><p>　　主题可以去官网上的主题界面去找，目前比较受欢迎主题有<strong>next</strong>和<strong>yilia</strong>，去别人GitHub上的主题仓库上去下载或clone均可，<del>本人目前用的主题为<strong><a href="https://github.com/maochunguang/black-blue" target="_blank" rel="external">black-blue</a></strong>，这个主题本人在用的时候还有些问题，或许会换，或许会自己魔改。</del>最后由于术业有专攻，实在不知道该改哪里，所以决定换black-blue的原版主题<strong><a href="https://github.com/luuman/hexo-theme-spfk" target="_blank" rel="external">SPFK</a></strong> ，对照着black-blue对spfk进行修改。具体换主题的方法为：</p>
<p>　　先将下载好的主题整个放在\blog\themes文件夹中，再修改blog文件夹中的配置文件<strong>_config.yml</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># theme: landscape</span></div><div class="line"><span class="attr">theme:</span> <span class="string">black-blue</span></div></pre></td></tr></table></figure>
<p>　　black-blue为打包主题文件并放入\blog\themes文件夹中的文件夹名，并不是原主题名，只是本人恰好将其重命名为主题名。</p>
<h4 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h4><p>发布文章需要在blog文件夹中执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"test"</span></div></pre></td></tr></table></figure>
<p>　　将会在\blog\source_posts\文件夹中生成test.md文件，随后编辑test.md文件即可，本人使用的Markdown编辑器为<a href="https://www.typora.io/" target="_blank" rel="external">Typora</a>。</p>
<p>至于给文章打标签和分类什么的，请参考<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Hexo官方文档</a>。</p>
<p>写完文章之后推送到GitHub中，需要执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m <span class="string">"add test.md"</span></div><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<p>Hexo文件配置同样需要同步一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo clean</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<h4 id="插件添加"><a href="#插件添加" class="headerlink" title="插件添加"></a>插件添加</h4><p>以RSS订阅插件为例。首先安装<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## rss插件</span></div><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>安装成功后，修改blog文件夹中的配置文件<strong>_config.yml</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="attr">plugin:</span></div><div class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span> <span class="comment">#RSS订阅</span></div></pre></td></tr></table></figure>
<p>最后，修改当前主题文件夹中的配置文件_config.yml，添加RSS订阅链接即可：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">subnav:</span></div><div class="line"><span class="attr">  rss:</span> <span class="string">"/atom.xml"</span></div></pre></td></tr></table></figure>
<p>修改完成后，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>将会在页面中看到RSS图标。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><font color="#FA8072">1、<em><u><strong>提交至远程仓库时可能会出现错误</strong></u></em>。</font>

<p>　　原因可能是因为没有将SSH Key添加到GitHub中。</p>
<p>　　查看当前用户主目录下的.ssh文件夹中（windows是C:\Users\&lt;username&gt;\.ssh）是否有<code>id_rsa</code>（私钥）和<code>id_rsa.pub</code>（公钥）这两个文件，若没有，则执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure>
<p>　　在GitHub中添加SSH Key的具体方法为：点击GitHub用户头像下的<strong>Settings</strong>，选中<strong>SSH and GPG keys</strong>，点击<strong>New SSH key</strong>，将<code>id_rsa.pub</code>中的内容复制粘贴到<strong>Key文本框</strong>中。</p>
<font color="#FA8072">2、<u><strong><em>Hexo生成和部署命令都执行失败</em></strong></u>。</font>

<p>　　原因可能是修改配置文件_config.yml出错。</p>
<p>　　将修改的配置文件_config.yml复原试试。</p>
<font color="#FA8072">3、<u><strong><em>Hexo部署之后网页没变化</em></strong></u>。</font>

<p>可能需要执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<p>　　清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行该命令。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　以后就在这上面写blog了，顺便把以前写的一些文档也放上来。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/u012150360/article/details/72793482" target="_blank" rel="external">利用github+hexo搭建自己的博客</a>（<a href="http://blog.csdn.net/u012150360/article/category/6765461" target="_blank" rel="external">http://blog.csdn.net/u012150360/article/category/6765461</a> ）</p>
<p>[2] <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方文档</a>（<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a> ）</p>
<p>[3] <a href="http://www.jianshu.com/p/469e985288b3?from=jiantop.com" target="_blank" rel="external">GITHUB+HEXO博客轻松更换主题外观</a>（<a href="http://www.jianshu.com/nb/10649566" target="_blank" rel="external">http://www.jianshu.com/nb/10649566</a> ）</p>
<p>[4] <a href="http://hanhailong.com/2015/10/08/Hexo%E2%80%94%E6%AD%A3%E7%A1%AE%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/" target="_blank" rel="external">Hexo—正确添加RSS订阅</a>（<a href="http://hanhailong.com/tags/Hexo%E4%B8%BB%E9%A2%98/" target="_blank" rel="external">http://hanhailong.com/tags/Hexo%E4%B8%BB%E9%A2%98/</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人系统环境：Win10_x64。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本来是想在国内某网站上继续写的，毕竟完全不需要自己管理，只需要负责写好文档就可以了，但某一天，该网站由于响应国家的号召，要实名验证，本来实名验证也没什么，就输入手机号，并填写验证码即可，但该网站实名验证的方式给人的感觉特别不爽，于是就决定自己搭建博客，这样虽然有点麻烦，但由于完全是自己管理，自己完全拥有该文档的所有权，也不用担心哪天别的网站突然出现的各种破问题，相比这种完全自由支配、无比爽快的感觉，管理这种麻烦就是小事了。&lt;/p&gt;
    
    </summary>
    
      <category term="建站小记" scheme="http://cniter.github.io/categories/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://cniter.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cniter.github.io/2017/08/26/hello-world/"/>
    <id>http://cniter.github.io/2017/08/26/hello-world/</id>
    <published>2017-08-26T08:16:16.000Z</published>
    <updated>2017-08-26T08:35:19.866Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
