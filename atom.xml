<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaun Yuan&#39;s Blog</title>
  <subtitle>世界上有两种程序员：一种是创造者，一种是使用者！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cniter.github.io/"/>
  <updated>2017-12-17T13:11:49.457Z</updated>
  <id>http://cniter.github.io/</id>
  
  <author>
    <name>Shaun Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本人常用小工具安利</title>
    <link href="http://cniter.github.io/posts/aef52be2.html"/>
    <id>http://cniter.github.io/posts/aef52be2.html</id>
    <published>2017-12-17T12:18:50.000Z</published>
    <updated>2017-12-17T13:11:49.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　由于本人目前使用最多的是Windows系统，所以以下推荐的软件基本都是Windows下的软件，全凭本人主观感觉推荐，也算是个人备份吧。</p><p>　　首先推荐的自然是装机软件<a href="https://www.ezbsystems.com/ultraiso/download.htm" target="_blank" rel="external"><strong>ULTRAISO</strong></a>，下个绿色版就好，只有1M多一点。下载Windows镜像的地方推荐为：<a href="https://msdn.itellyou.cn/" target="_blank" rel="external"><strong>MSDN，I Tell You</strong></a>。接下来就是正式的软件推荐篇了：</p><a id="more"></a><h2 id="大众篇"><a href="#大众篇" class="headerlink" title="大众篇"></a>大众篇</h2><p>　　首先推荐浏览器：首选的自然是<a href="https://www.google.com/chrome/browser/thankyou.html?standalone=1&amp;statcb=1&amp;installdataindex=defaultbrowser" target="_blank" rel="external"><strong>Chrome</strong></a>和<a href="http://www.firefox.com.cn/download/#more" target="_blank" rel="external"><strong>Firefox</strong></a>，还有一个比较偏门的是<a href="https://www.torproject.org/projects/torbrowser.html.en" target="_blank" rel="external"><strong>Tor Browser</strong></a>（如果在一些特殊时段，各种番（fang）茄（qiang）工具都失效的情况下，这个可以临时用用）。推荐完浏览器，自然也要玩浏览器，</p><p>这里极为推荐的是脚本管理插件：<a href="http://tampermonkey.net/" target="_blank" rel="external"><strong>Tampermonkey</strong></a>（支持多种浏览器），有Tampermonkey和没Tampermonkey是两种浏览体验，会用Tampermonkey和没用Tampermonkey的是两个世界的人（ᖗ乛◡乛ᖘ），除了Tampermonkey，使用<a href="https://userstyles.org/" target="_blank" rel="external">Stylish</a>插件也还可以，Tampermonkey是通过Javascript改变浏览器，而Stylish是通过CSS改变浏览器，这两者本人选择Tampermonkey，所以顺便推荐几个常用的脚本：1、<a href="https://greasyfork.org/zh-CN/scripts/14716-%E6%8A%A4%E7%9C%BC%E8%84%9A%E6%9C%AC" target="_blank" rel="external">护眼脚本</a>；2、<a href="https://greasyfork.org/zh-CN/scripts/10433-super-preloaderplus-one/code" target="_blank" rel="external">Super_preloaderPlus_one</a>；3、<a href="https://greasyfork.org/zh-CN/scripts/17800-%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6" target="_blank" rel="external">解除百度云大文件下载限制</a>（这个配合IDM食用效果最佳）；4、<a href="https://greasyfork.org/zh-CN/scripts/26992-%E8%B4%B4%E5%90%A7%E5%85%A8%E8%83%BD%E5%8A%A9%E6%89%8B" target="_blank" rel="external">贴吧全能助手</a>；5、<a href="https://greasyfork.org/zh-CN/scripts/36384-%E7%A0%B4%E8%A7%A3vip%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88" target="_blank" rel="external">破解VIP会员视频集合</a>；6、<a href="https://greasyfork.org/zh-CN/scripts/27116-cat-mouse-translation" target="_blank" rel="external">Cat Mouse Translation</a>；7、<a href="https://greasyfork.org/zh-CN/scripts/25718-%E8%A7%A3%E9%99%A4b%E7%AB%99%E5%8C%BA%E5%9F%9F%E9%99%90%E5%88%B6" target="_blank" rel="external">解除B站区域限制</a>；8、<a href="https://greasyfork.org/zh-CN/scripts/30879-bye-flash-hello-html5-%E5%86%8D%E8%A7%81flash-%E4%BD%A0%E5%A5%BDhtml5" target="_blank" rel="external">bye-flash-hello-html5 | 再见flash 你好html5</a>；９、<a href="https://greasyfork.org/zh-CN/scripts/28497-remove-web-limits" target="_blank" rel="external">网页限制解除(改)</a>。再顺便说一下这两个浏览器中一些比较好用的插件和好看的主题吧。</p><p>Firefox最新版的插件本人目前还没发现几个好用的，但是<a href="https://adblockplus.org/" target="_blank" rel="external">Adblock Plus</a>绝对是必须要装的，Firefox的主题本人目前在用为<a href="https://addons.mozilla.org/zh-CN/firefox/addon/blue-space-2/" target="_blank" rel="external">Blue space 2</a> ；</p><p>而Chrome中好用的插件就有很多了，首先自然也是Adblock Plus，有一个<a href="http://autopagerize.net/" target="_blank" rel="external">AutoPagerize</a>插件可以替代Super_preloaderPlus_one脚本，还有一个<a href="https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad?hl=zh-CN" target="_blank" rel="external">划词翻译</a>可以替换Cat Mouse Translation脚本，由于Chrome没有撤销关闭的标签按钮，只能通过快捷键Crtl+Shift+T操作，对于本人这种习惯用Firefox恢复按钮的人来说这很不人性化，所以只能使用<a href="https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj?hl=zh-CN" target="_blank" rel="external">SimpleUndoClose</a>插件来代替了，当然番茄之所以推荐使用Chrome有很大一部分原因在于Chrome中有一代理神器<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN" target="_blank" rel="external">Proxy SwitchyOmega</a>，好像也正在开发Firefox版的Proxy SwitchyOmega，已经在Firefox测试版上使用了，Chrome的主题本人目前在用的为<a href="https://chrome.google.com/webstore/detail/blue-space-sunset-chrome/nndfdjfoclbidmgpmbelcieibgjjfdog" target="_blank" rel="external">Blue Space Sunset Chrome Theme</a> ，浏览器相关的东西就推荐到这里了，接下来推荐下载工具吧。</p><p>附浏览器使用小技巧，有时点击链接不会新建标签页，只是在原标签页刷新，这不符合国人的使用习惯，这时可按住Crtl键再点击链接，这时会强制使用新标签页打开链接。</p><p>　　下载工具首推的自然是<a href="https://www.internetdownloadmanager.com/download.html" target="_blank" rel="external"><strong>IDM</strong></a>，全称是：Internet Download Manager；种子和磁力链接的下载工具推荐<a href="http://www.utorrent.com/intl/zh/" target="_blank" rel="external"><strong>μtorrent</strong></a>或者<a href="http://www.bittorrent.com/bittorrent-free" target="_blank" rel="external"><strong>BitTorrent</strong></a>，好像还有一个<a href="https://www.qbittorrent.org/download.php" target="_blank" rel="external"><strong>qBittorrent</strong></a> ；至于迅雷，勉强推荐个极速版吧，最后一版为ThunderSpeed1.0.35.366。</p><p>　　解压缩工具首推的是<a href="https://www.bandisoft.com/bandizip/cn/" target="_blank" rel="external"><strong>Bandizip</strong></a>（ta家的图片浏览器<a href="https://www.bandisoft.com/honeyview/" target="_blank" rel="external"><strong>Honeyview</strong></a>也还不错），其次 <a href="http://www.7-zip.org/" target="_blank" rel="external"><strong>7-Zip</strong></a>，最后是<a href="https://www.win-rar.com/download.html" target="_blank" rel="external"><strong>WinRAR</strong></a>（主要是最近版本的广告太恼火，好像5.2版本没广告），BTW：IDM下载百度云的大文件可能会造成部分文件损坏，这时可能需要WinRAR的修复工具去修复受损的压缩文件（具体操作为用WinRAR打开损坏的压缩文件，选中菜单栏的“<strong>工具</strong>”==》“<strong>修复压缩文件</strong>”），才能解压出正常文件。※附：</p><blockquote><p>其实WinRAR官方也有无广告版的，只是下载链接被隐藏，这位大佬：<a href="http://blog.sina.com.cn/cuibin903" target="_blank" rel="external"><strong>武文隹山</strong></a>发现了，具体可参考：</p><ol><li><p><a href="http://blog.sina.com.cn/s/blog_4155bb1d0102x5dh.html" target="_blank" rel="external">WinRAR官方不带弹窗广告的简体中文版</a>，其隐藏的链接为：</p><blockquote><p>WinRAR5.4官方无广告简体中文版64位 <a href="http://www.win-rar.com/fileadmin/winrar-versions/sc20160819/wrr/winrar-x64-540sc.exe" target="_blank" rel="external">下载链接</a>：</p><p><a href="http://www.win-rar.com/fileadmin/winrar-versions/sc20160819/wrr/winrar-x64-540sc.exe" target="_blank" rel="external">http://www.win-rar.com/fileadmin/winrar-versions/sc20160819/wrr/winrar-x64-540sc.exe</a></p><p>WinRAR5.4官方无广告简体中文版32位 <a href="http://www.win-rar.com/fileadmin/winrar-versions/sc20160819/wrr/winrar-x32-540sc.exe" target="_blank" rel="external">下载链接</a>：</p><p><a href="http://www.win-rar.com/fileadmin/winrar-versions/sc20160819/wrr/winrar-x32-540sc.exe" target="_blank" rel="external">http://www.win-rar.com/fileadmin/winrar-versions/sc20160819/wrr/winrar-x32-540sc.exe</a></p></blockquote></li><li><p><a href="http://blog.sina.com.cn/s/blog_4155bb1d0102xxmr.html" target="_blank" rel="external">WinRAR5.5官方不带弹窗广告的简体中文版</a>，具体链接为：</p><blockquote><p>WinRAR v5.50 简体中文官方版（试用版，注册后没有广告弹窗！）</p><p>32位：<a href="http://www.win-rar.com/fileadmin/winrar-versions/sc20170830/wrr/wrar550sc.exe" target="_blank" rel="external">http://www.win-rar.com/fileadmin/winrar-versions/sc20170830/wrr/wrar550sc.exe</a></p><p>64位：<a href="http://www.win-rar.com/fileadmin/winrar-versions/sc20170830/wrr/winrar-x64-550sc.exe" target="_blank" rel="external">http://www.win-rar.com/fileadmin/winrar-versions/sc20170830/wrr/winrar-x64-550sc.exe</a></p></blockquote><p>列位看官应该从下载链接中发现了其中的规律（๑乛◡乛๑）。</p></li></ol></blockquote><p>　　拼音输入法，本人使用的是<a href="https://pinyin.sogou.com/zhihui/" target="_blank" rel="external"><strong>搜狗拼音智慧版</strong></a>，搜狗拼音的皮肤本人选择<a href="https://pinyin.sogou.com/skins/detail/view/info/418138" target="_blank" rel="external">雨后莲色</a>，不过有人说Win10自带的微软拼音也还行。</p><p>　　至于清理垃圾的可以用<a href="https://www.iobit.com/en/advancedsystemcarefree.php" target="_blank" rel="external"><strong>Advanced SystemCare</strong></a>（ASC），也可以用<a href="https://www.piriform.com/ccleaner/download" target="_blank" rel="external"><strong>CCleaner</strong></a> ，至于Win10不需要装杀毒软件，国内的的什么360全家桶、百度全家桶、腾讯全家桶（诶，好像就差阿里全家桶了，什么时候阿里再来一个，就装个BAT全家桶（๑乛◡乛๑））可以丢了（(╯°□°）╯︵ ┻━┻）。</p><p>　　QQ还是用<a href="https://tim.qq.com/" target="_blank" rel="external"><strong>TIM</strong></a>版吧。</p><p>　　播放器推荐的是<a href="https://potplayer.daum.net/" target="_blank" rel="external"><strong>Potplayer</strong></a>。不过有一款解码工具叫<a href="https://tieba.baidu.com/f?kw=%E7%BB%88%E6%9E%81%E8%A7%A3%E7%A0%81&amp;ie=utf-8" target="_blank" rel="external"><strong>终极解码</strong></a>，可以充当播放器（很多人确实把它当播放器用，比如本人（๑乛◡乛๑））。</p><p>　　音乐软件本人用网易云音乐（等升到10级就把它卸了，只听本地音乐）。</p><p>　　PDF阅读器还是推荐<a href="https://acrobat.adobe.com/cn/zh-Hans/free-trial-download.html" target="_blank" rel="external"><strong>Adobe Acrobat_DC</strong></a>，毕竟能和Office联合使用，有时Word转PDF需要加密就靠它了。</p><p>　　截图工具推荐<a href="http://www.faststone.org/download.htm" target="_blank" rel="external"><strong>FastStone Capture</strong></a>（<em>FSCapture</em>）。</p><h2 id="小众篇"><a href="#小众篇" class="headerlink" title="小众篇"></a>小众篇</h2><p>　　远程控制工具当然推荐<a href="https://www.teamviewer.com/zhCN/" target="_blank" rel="external"><strong>TeamViewer</strong></a>。</p><p><strong><em>再推荐一些程序员的工具吧。</em></strong></p><p>　　首先当然是编辑器（可别和编译器搞混了），本人就不加入Vim和Emacs的党争了，就直接推荐<a href="https://code.visualstudio.com/" target="_blank" rel="external"><strong>VS Code</strong></a>吧（巨硬出品，必属精品（&#94;_^））。</p><p>　　Windows下的命令行没一个好用的，要真矮子里面挑高个的话，只能推荐<a href="https://git-scm.com/downloads" target="_blank" rel="external"><strong>Git Bash</strong></a>了，其实以前有个Babun也挺好用的，可惜早已停止更新。</p><p>　　Markdown编辑器推荐的是<a href="https://typora.io/#download" target="_blank" rel="external"><strong>Typora</strong></a>，不过现在还是Beta版，也还能使用，期待正式版，希望到时即使收费的话也能继续推出一个免费版。（推出正式版看看效果怎么样吧，如果真的很不错就去支持一下，如果改进不大的话我还是老老实实继续用beta版吧）。</p><p>　　搜索工具强推<a href="https://www.voidtools.com/downloads/" target="_blank" rel="external"><strong>Everything</strong></a>。</p><p>　　在VS下写C++自然少不了<a href="https://www.wholetomato.com/" target="_blank" rel="external"><strong>Visual Assist X</strong></a>这款插件，用OpenCV的自然少不了<a href="https://marketplace.visualstudio.com/items?itemName=WolfKienzle.ImageWatch" target="_blank" rel="external"><strong>ImageWatch</strong></a>（ <a href="https://marketplace.visualstudio.com/items?itemName=VisualCPPTeam.ImageWatch2017" target="_blank" rel="external">VS2017版ImageWatch</a> ）这款神器。</p><p>　　编程的字体本人目前在用是<a href="http://www.vimer.cn/wp-content/uploads/2009/11/arimonnew.ttf" target="_blank" rel="external"><strong>Arial monospaced for SAP(优化版)</strong></a>（<a href="http://www.vimer.cn/archives/396.html/comment-page-1" target="_blank" rel="external">http://www.vimer.cn/archives/396.html/comment-page-1</a> ），背景颜色使用护眼色：R:204，B:207，G:232。</p><p>　　代理工具：本人使用的是<a href="https://github.com/XX-net/XX-Net" target="_blank" rel="external"><strong>XX-Net</strong></a>和<a href="https://getlantern.org/zh_CN/" target="_blank" rel="external"><strong>Lantern</strong></a>，非特殊情况还是很好用的。</p><h2 id="偏门篇"><a href="#偏门篇" class="headerlink" title="偏门篇"></a>偏门篇</h2><p>　　鼠标手势软件<a href="http://www.yingdev.com/projects/wgestures" target="_blank" rel="external"><strong>WGestures</strong></a>，可以利用鼠标手势做一些前进后退，复制粘贴搜索等简单操作。</p><p>　　<a href="http://www.yingdev.com/projects/tickeys" target="_blank" rel="external"><strong>Tickeys</strong></a>，让打字发出音效。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果以后碰到更多有意思的小东西再和大家分享吧↖(&#94;ω^)↗。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　由于本人目前使用最多的是Windows系统，所以以下推荐的软件基本都是Windows下的软件，全凭本人主观感觉推荐，也算是个人备份吧。&lt;/p&gt;&lt;p&gt;　　首先推荐的自然是装机软件&lt;a href=&quot;https://www.ezbsystems.com/ultraiso/download.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;ULTRAISO&lt;/strong&gt;&lt;/a&gt;，下个绿色版就好，只有1M多一点。下载Windows镜像的地方推荐为：&lt;a href=&quot;https://msdn.itellyou.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;MSDN，I Tell You&lt;/strong&gt;&lt;/a&gt;。接下来就是正式的软件推荐篇了：&lt;/p&gt;
    
    </summary>
    
      <category term="Share" scheme="http://cniter.github.io/categories/Share/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>解决无法打开某个网页问题</title>
    <link href="http://cniter.github.io/posts/376168c6.html"/>
    <id>http://cniter.github.io/posts/376168c6.html</id>
    <published>2017-12-07T08:06:53.000Z</published>
    <updated>2017-12-09T12:57:13.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本人最近在某台Win10的电脑中打开网页<a href="https://www.typora.io/" target="_blank" rel="external">https://www.typora.io/</a> 时出现了问题，一直出现无法连接现象。</p><a id="more"></a><h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><p>Chrome中出现：</p><blockquote><p><strong>未连接到互联网</strong></p><p>请试试以下办法：</p><ul><li>检查网线、调制解调器和路由器</li><li>重新连接到 Wi-Fi 网络</li><li><a href="javascript:diagnoseErrors()" target="_blank" rel="external">运行 Windows 网络诊断</a></li></ul><p>DNS_PROBE_FINISHED_NO_INTERNET</p></blockquote><p>Firefox中出现：</p><blockquote><p>我们无法连接至 www.typora.io 的服务器。<br>如果确定此网址正确，您可以尝试：</p><ul><li>过会儿再重试。</li><li>检查您的网络连接是否正常。</li><li>如果您部署有网络防火墙，请检查 Firefox 是否已被授权访问网络。</li></ul></blockquote><p>手机和其它设备在同一网络下能正常连接，打开host文件也没发现域名被劫持的情况，挂代理也能连接上。</p><h2 id="解决方案篇"><a href="#解决方案篇" class="headerlink" title="解决方案篇"></a>解决方案篇</h2><p>本人尝试过的方法：</p><ol><li><p>刷新DNS缓存：在命令行界面中输入<code>ipconfig /flushdns</code>，无效；</p></li><li><p>改DNS服务器：把电脑的dns修改为首选8.8.8.8，备用114.114.114.114，和将首选改成8.8.4.4均无效；</p></li><li><p>Disable Path MTU discovery，具体操作方法为：</p><blockquote><p>单击“开始”，单击“运行”，键入 regedit，然后单击“确定”。</p><p>在注册表中找到下面的项： <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</code></p><p>找到<code>EnablePMTUDiscovery</code>，将其值改为0，如果没找到，则在“编辑”菜单上，指向“新建”，然后单击“DWORD 值”，键入 EnablePMTUDiscovery，然后按 Enter，在“编辑”菜单上，单击“修改”，在“数值数据”框中，键入 0，然后单击“确定”。</p><p>退出注册表编辑器，然后重新启动计算机。</p></blockquote></li><li><p>设置MTU值，将其调小，完美解决。具体操作方法为：以管理员身份运行命令提示符，在命令行界面输入<code>netsh interface ipv4 show subinterfaces</code>，查看传入字节和传出字节的接口，修改对应接口的MTU的值，具体命令为：<code>netsh interface ipv4 set subinterface &quot;对应接口名&quot; mtu=值 store=persistent</code>，其中<strong>对应接口名</strong>和<strong>值</strong>需要替换成相应修改的东西。</p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　将MTU值调小，可能会造成网速变慢，但本人又无法去改变其它的东西，既然不能改变其它，只能改变自己喽╮(╯﹏╰)╭。但本人这里觉得奇怪的是：别人的电脑设置默认MTU的值为1500也能访问啊，无奈（╯‵□′）╯︵┴─┴。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://www.zhihu.com/question/23627621" target="_blank" rel="external">电脑上部分网页打不开，但是手机可以，如何解决？</a></p><p>[2] <a href="https://jingyan.baidu.com/article/ad310e80ff9bf81849f49ea9.html" target="_blank" rel="external">mtu值怎样设置才网速最快</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本人最近在某台Win10的电脑中打开网页&lt;a href=&quot;https://www.typora.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.typora.io/&lt;/a&gt; 时出现了问题，一直出现无法连接现象。&lt;/p&gt;
    
    </summary>
    
      <category term="Problems" scheme="http://cniter.github.io/categories/Problems/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5使用小结</title>
    <link href="http://cniter.github.io/posts/5f54aa2c.html"/>
    <id>http://cniter.github.io/posts/5f54aa2c.html</id>
    <published>2017-11-12T13:10:16.000Z</published>
    <updated>2017-12-09T12:57:13.758Z</updated>
    
    <content type="html"><![CDATA[<font color="#FA8072">本文所用的Python版本为python-3.6.2，PyQt5版本为pyqt5-5.9.1，OpenCV版本为opencv-python-3.3.0.10和opencv-contrib-python-3.3.0.10，TensorFlow版本为tensorflow-1.4.0，编程语言为python3，系统环境为Windows 10。</font><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本文是上一篇（<a href="https://cniter.github.io/2017/11/11/TensorFlow-Object-Detection-API%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/">TensorFlow Object Detection API使用小结</a>）的后续，因为那个project还需要一个界面，所以本人使用PyQt做了这么个界面，其中借用OpenCV的图像数据显示。</p><a id="more"></a><h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>　　首先使用pip安装所需库，由于上一篇已经安装了tensorflow，所以本文其实只需要安装pyqt5和opencv-python就可以了，安装pyqt5指令为：<code>pip install pyqt5</code>，相关依赖关系解决办法在上一篇中已提到，这里不再赘述，然后再使用指令<code>pip install opencv-python</code>安装opencv，这里本人发现在python中配置OpenCV简直不要太轻爽O(∩_∩)O~~，就一个pip就解决了，哪有C++那么麻烦，以后可能还会继续使用python版的opencv，所以就顺便把它python版的扩展包也顺便一起装上，安装指令为：<code>pip install opencv-contrib-python</code>。至此所需环境库安装完毕。</p><p>　　<strong>*注</strong>：相对于上文中使用pip在线安装的方式，还有另一种使用pip进行离线安装的方式，在<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">Unofficial Windows Binaries for Python Extension Packages</a>上下载离线包，即XXXXXX.whl文件，文件名一般包含库名称和对应版本、python版本以及是64位还是32位的等信息，这里以离线包<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy" target="_blank" rel="external">numpy-1.13+mkl</a>为例，首先下载适合自己的库版本，适合本人的当然是numpy-1.13.3+mkl-cp36-cp36m-win_amd64.whl（这适合64位的python3.6安装），将命令行目录切换至numpy-1.13.3+mkl-cp36-cp36m-win_amd64.whl文件所在目录，输入指令<code>pip install numpy-1.13.3+mkl-cp36-cp36m-win_amd64.whl</code>即可离线安装numpy-1.13+mkl库。相比在线安装，这种离线安装更加灵活，而且能够安装一些在线安装无法安装的库，像上文中的numpy-1.13+mkl库只能采取离线安装的方式，在线安装只能安装不带mkl的numpy库。采用离线安装方式也可以直接安装带扩展包的opencv-python库：<em>opencv_python‑3.3.1+contrib‑cp36‑cp36m‑win_amd64.whl</em> ，不需要像在线安装那样装两个库。</p><h2 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h2><p>　　以前有用过Qt的基础，所以这次使用PyQt5感觉上手很快，毕竟这里面的语法有很多是相通的，再加上网上的资料也有很多，所以很快就做了个简陋的界面。不过直接用代码控制界面的布局确实很麻烦，每改下布局都要重新运行一下看看，而且启动时间还有点长╮(╯﹏╰）╭。网上有种说法是：</p><blockquote><p>可以先通过QtDesigner设计UI，然后通过Qt提供的命令行工具pyuic5将.ui文件转换成python代码，具体用法是：若ui文件名称为firstPyQt5.ui，则在命令行界面中输入指令：<code>pyuic5 -o firstPyQt5.py firstPyQt5.ui</code>，即可将firstPyQt5.ui文件转换成python代码文件firstPyQt5.py</p></blockquote><p>不过本人这里由于界面比较简陋，没有几个控件，所以就直接将其用python代码控制了，没去尝试这个命令行工具pyuic5了，下次有机会再尝试吧↖(&#94;ω^)↗。</p><p>　　本人做的这个小界面实现的功能是：1、可以选择已经训练好的模型来检测选定图片中的目标；2、可以播放选定的视频；3、还有打开摄像头，显示摄像头拍摄的视频。</p><p>其中由于本人电脑无法实时检测目标，所以在视频和摄像头拍摄中就没有添加检测的代码，只有选择图片时才会执行检测功能，有需要的童靴可以自行添加(•̀ᴗ•́)。</p><p>附完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys  </div><div class="line"></div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> * </div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> * </div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> label_map_util</div><div class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> visualization_utils <span class="keyword">as</span> vis_util</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Detector</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.PATH_TO_CKPT = <span class="string">'./model/hand_model_faster_rcnn_resnet101.pb'</span>   <span class="comment"># 选择模型文件</span></div><div class="line">        self.PATH_TO_LABELS = <span class="string">r'./model/hands_label_map.pbtxt'</span>  <span class="comment"># 选择类别标签文件</span></div><div class="line">        self.NUM_CLASSES = <span class="number">1</span></div><div class="line">        self.detection_graph = self._load_model()   <span class="comment"># 加载模型</span></div><div class="line">        self.category_index = self._load_label_map()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_load_model</span><span class="params">(self)</span>:</span></div><div class="line">        detection_graph = tf.Graph()</div><div class="line">        <span class="keyword">with</span> detection_graph.as_default():</div><div class="line">            od_graph_def = tf.GraphDef()</div><div class="line">            <span class="keyword">with</span> tf.gfile.GFile(self.PATH_TO_CKPT, <span class="string">'rb'</span>) <span class="keyword">as</span> fid:</div><div class="line">                serialized_graph = fid.read()</div><div class="line">                od_graph_def.ParseFromString(serialized_graph)</div><div class="line">                tf.import_graph_def(od_graph_def, name=<span class="string">''</span>)</div><div class="line">        <span class="keyword">return</span> detection_graph</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_load_label_map</span><span class="params">(self)</span>:</span></div><div class="line">        label_map = label_map_util.load_labelmap(self.PATH_TO_LABELS)</div><div class="line">        categories = label_map_util.convert_label_map_to_categories(label_map,</div><div class="line">                                                                    max_num_classes=self.NUM_CLASSES,</div><div class="line">                                                                    use_display_name=<span class="keyword">True</span>)</div><div class="line">        category_index = label_map_util.create_category_index(categories)</div><div class="line">        <span class="keyword">return</span> category_index</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detect</span><span class="params">(self, image)</span>:</span></div><div class="line">        <span class="keyword">with</span> self.detection_graph.as_default():</div><div class="line">            <span class="keyword">with</span> tf.Session(graph=self.detection_graph) <span class="keyword">as</span> sess:</div><div class="line">                <span class="comment"># Expand dimensions since the model expects images to have shape: [1, None, None, 3]</span></div><div class="line">                image_np_expanded = np.expand_dims(image, axis=<span class="number">0</span>)</div><div class="line">                image_tensor = self.detection_graph.get_tensor_by_name(<span class="string">'image_tensor:0'</span>)</div><div class="line">                boxes = self.detection_graph.get_tensor_by_name(<span class="string">'detection_boxes:0'</span>)</div><div class="line">                scores = self.detection_graph.get_tensor_by_name(<span class="string">'detection_scores:0'</span>)</div><div class="line">                classes = self.detection_graph.get_tensor_by_name(<span class="string">'detection_classes:0'</span>)</div><div class="line">                num_detections = self.detection_graph.get_tensor_by_name(<span class="string">'num_detections:0'</span>)</div><div class="line">                <span class="comment"># Actual detection.</span></div><div class="line">                (boxes, scores, classes, num_detections) = sess.run(</div><div class="line">                    [boxes, scores, classes, num_detections],</div><div class="line">                    feed_dict=&#123;image_tensor: image_np_expanded&#125;)</div><div class="line">                <span class="comment"># Visualization of the results of a detection.</span></div><div class="line">                vis_util.visualize_boxes_and_labels_on_image_array(</div><div class="line">                    image,</div><div class="line">                    np.squeeze(boxes),</div><div class="line">                    np.squeeze(classes).astype(np.int32),</div><div class="line">                    np.squeeze(scores),</div><div class="line">                    self.category_index,</div><div class="line">                    use_normalized_coordinates=<span class="keyword">True</span>,</div><div class="line">                    line_thickness=<span class="number">8</span>)</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> image</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetectUI</span><span class="params">(QWidget)</span>:</span></div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">         </div><div class="line">        self.initUI()</div><div class="line">        self.detector = Detector()</div><div class="line">        self.cap = cv2.VideoCapture()</div><div class="line">         </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span>  </div><div class="line"></div><div class="line">        self.timer = QTimer(self)   <span class="comment"># 初始化一个定时器</span></div><div class="line">        self.timer.timeout.connect(self.showFrame)  <span class="comment"># 计时结束调用showFrame()方法</span></div><div class="line">        </div><div class="line">        self.show_pic_label = QLabel(self) </div><div class="line">        self.show_pic_label.resize(<span class="number">640</span>, <span class="number">480</span>)</div><div class="line">        self.show_pic_label.move(<span class="number">10</span>, <span class="number">10</span>)</div><div class="line">        self.show_pic_label.setStyleSheet(<span class="string">"border-width: 1px; border-style: solid; border-color: rgb(255, 170, 0);"</span>)            </div><div class="line"></div><div class="line">        self.show_filename_lineEdit = QLineEdit(self) </div><div class="line">        self.show_filename_lineEdit.resize(<span class="number">200</span>, <span class="number">22</span>)</div><div class="line">        self.show_filename_lineEdit.move(<span class="number">10</span>, <span class="number">500</span>) </div><div class="line"></div><div class="line">        self.select_img_btn = QPushButton(<span class="string">'Select File'</span>, self)   </div><div class="line">        self.select_img_btn.clicked.connect(self.selectImg) </div><div class="line">        self.select_img_btn.resize(self.select_img_btn.sizeHint())</div><div class="line">        self.select_img_btn.move(<span class="number">218</span>, <span class="number">500</span>) </div><div class="line"></div><div class="line">        self.open_camera_btn = QPushButton(<span class="string">'Open Camera'</span>, self)   </div><div class="line">        self.open_camera_btn.clicked.connect(self.openCamera) </div><div class="line">        self.open_camera_btn.resize(self.open_camera_btn.sizeHint())</div><div class="line">        self.open_camera_btn.move(<span class="number">292</span>, <span class="number">500</span>)</div><div class="line"></div><div class="line">        self.select_model_btn = QPushButton(<span class="string">'Select Model'</span>, self)   </div><div class="line">        self.select_model_btn.clicked.connect(self.selectModel) </div><div class="line">        self.select_model_btn.resize(self.select_model_btn.sizeHint())</div><div class="line">        self.select_model_btn.move(<span class="number">366</span>, <span class="number">500</span>) </div><div class="line"></div><div class="line">        self.show_modelname_lineEdit = QLineEdit(self) </div><div class="line">        self.show_modelname_lineEdit.setText(<span class="string">'hand_model_faster_rcnn_resnet101.pb'</span>)</div><div class="line">        self.show_modelname_lineEdit.resize(<span class="number">200</span>, <span class="number">22</span>)</div><div class="line">        self.show_modelname_lineEdit.move(<span class="number">450</span>, <span class="number">500</span>) </div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">200</span>, <span class="number">100</span>, <span class="number">660</span>, <span class="number">530</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Hand Detector'</span>)   </div><div class="line">        self.show()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showImg</span><span class="params">(self, src_img, qlabel)</span>:</span></div><div class="line"></div><div class="line">        src_img = cv2.cvtColor(src_img, cv2.COLOR_BGR2RGB)</div><div class="line">        height, width, bytesPerComponent = src_img.shape</div><div class="line">        bytesPerLine = bytesPerComponent * width</div><div class="line">        <span class="comment"># 转为QImage对象</span></div><div class="line">        q_image = QImage(src_img.data, width, height, bytesPerLine, QImage.Format_RGB888)</div><div class="line">        qlabel.setPixmap(QPixmap.fromImage(q_image).scaled(qlabel.width(), qlabel.height())) </div><div class="line">    </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showFrame</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span>(self.cap.isOpened()):</div><div class="line">            ret, frame = self.cap.read()</div><div class="line">            <span class="keyword">if</span> ret:</div><div class="line">                self.showImg(frame, self.show_pic_label)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.cap.release()</div><div class="line">                self.timer.stop()   <span class="comment"># 停止计时器</span></div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectImg</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.cap.isOpened():</div><div class="line">            self.cap.release()</div><div class="line"></div><div class="line">        file_name, file_type = QFileDialog.getOpenFileName(self,  </div><div class="line">                                    <span class="string">"选取文件"</span>,  </div><div class="line">                                    <span class="string">"./"</span>,  </div><div class="line">                                    <span class="string">"Image Files (*.jpg *.png *.bmp *.tif);;Video Files (*.avi *.mp4)"</span>)   <span class="comment">#设置文件扩展名过滤,注意用双分号间隔过滤，用空格分隔多个文件  </span></div><div class="line">        <span class="comment"># print(file_name,file_type)</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> file_type.find(<span class="string">"Image"</span>) &gt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> file_name:</div><div class="line">                self.show_filename_lineEdit.setText(os.path.split(file_name)[<span class="number">1</span>])</div><div class="line">            </div><div class="line">                img = cv2.imread(file_name, cv2.IMREAD_COLOR)</div><div class="line">                cv2.cvtColor(img, cv2.COLOR_BGR2RGB, img)</div><div class="line"></div><div class="line">                img = self.detector.detect(img) <span class="comment"># 检测目标</span></div><div class="line"></div><div class="line">                height, width, bytesPerComponent = img.shape</div><div class="line">                bytesPerLine = bytesPerComponent * width</div><div class="line">                <span class="comment"># 转为QImage对象</span></div><div class="line">                q_image = QImage(img.data, width, height, bytesPerLine, QImage.Format_RGB888)</div><div class="line">                self.show_pic_label.setPixmap(QPixmap.fromImage(q_image).scaled(self.show_pic_label.width(), self.show_pic_label.height()))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> file_type.find(<span class="string">"Video"</span>) &gt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> file_name:</div><div class="line">                self.show_filename_lineEdit.setText(os.path.split(file_name)[<span class="number">1</span>])</div><div class="line"></div><div class="line">                self.cap.open(file_name)</div><div class="line">                self.timer.start(<span class="number">30</span>)    <span class="comment"># 设置时间隔30ms并启动</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openCamera</span><span class="params">(self)</span>:</span></div><div class="line">        self.cap.open(<span class="number">0</span>)    <span class="comment"># 默认打开0号摄像头</span></div><div class="line">        self.timer.start(<span class="number">30</span>)    <span class="comment"># 设置时间隔30ms并启动</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectModel</span><span class="params">(self)</span>:</span>  </div><div class="line">        model_name, file_type = QFileDialog.getOpenFileName(self,  </div><div class="line">                                    <span class="string">"选取文件"</span>,  </div><div class="line">                                    <span class="string">"./"</span>,  </div><div class="line">                                    <span class="string">"model Files (*.pb);;All Files (*)"</span>)   <span class="comment">#设置文件扩展名过滤,注意用双分号间隔过滤，用空格分隔多个文件  </span></div><div class="line">               </div><div class="line">        <span class="keyword">if</span> model_name:</div><div class="line">            self.show_modelname_lineEdit.setText(os.path.split(model_name)[<span class="number">1</span>])</div><div class="line">            self.detector.PATH_TO_CKPT = model_name</div><div class="line">            self.detector.detection_graph = self.detector._load_model() <span class="comment"># 重新加载模型</span></div><div class="line">         </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">     </div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    dtcui = DetectUI()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　初次使用Python做一个小东西，其语法确实简洁，不过对于本人这种习惯用C++的人来说确实还有点不太习惯(˘•ω•˘)。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/m0_37928067/article/details/75883535" target="_blank" rel="external">用PyQt5+Caffe+Opencv搭建一个人脸识别登录界面</a></p><p>[2] <a href="http://blog.csdn.net/a359680405/article/details/45166271" target="_blank" rel="external">PyQt5学习笔记09—-标准文件打开保存框QFileDialog</a></p><p>[3] <a href="http://www.cnblogs.com/archisama/p/5444032.html" target="_blank" rel="external">PyQt5教程——第一个程序（2）</a>（<a href="http://www.cnblogs.com/archisama/tag/PyQt5/" target="_blank" rel="external">http://www.cnblogs.com/archisama/tag/PyQt5/</a> ）</p><p>[4] <a href="http://www.cnblogs.com/skynet/p/4229556.html" target="_blank" rel="external">PyQt5应用与实践</a></p><p>[5] <a href="http://www.cnblogs.com/tkinter/p/5632245.html" target="_blank" rel="external">PyQt5系列教程(二)利用QtDesigner设计UI界面</a>（<a href="http://www.cnblogs.com/tkinter/tag/pyqt5/" target="_blank" rel="external">http://www.cnblogs.com/tkinter/tag/pyqt5/</a> ）</p><p>[6] <a href="https://docs.opencv.org/3.2.0/index.html" target="_blank" rel="external">OpenCV 3.2.0</a>/<a href="https://docs.opencv.org/3.2.0/d6/d00/tutorial_py_root.html" target="_blank" rel="external">OpenCV-Python Tutorials</a>/<a href="https://docs.opencv.org/3.2.0/dc/d4d/tutorial_py_table_of_contents_gui.html" target="_blank" rel="external">Gui Features in OpenCV</a>/<a href="https://docs.opencv.org/3.2.0/dc/d2e/tutorial_py_image_display.html" target="_blank" rel="external">Getting Started with Images</a></p><p>[7] <a href="https://docs.opencv.org/3.2.0/index.html" target="_blank" rel="external">OpenCV 3.2.0</a>/<a href="https://docs.opencv.org/3.2.0/d6/d00/tutorial_py_root.html" target="_blank" rel="external">OpenCV-Python Tutorials</a>/<a href="https://docs.opencv.org/3.2.0/dc/d4d/tutorial_py_table_of_contents_gui.html" target="_blank" rel="external">Gui Features in OpenCV</a>/<a href="https://docs.opencv.org/3.2.0/dd/d43/tutorial_py_video_display.html" target="_blank" rel="external">Getting Started with Videos</a></p><p>[8] <a href="http://blog.csdn.net/keenweiwei/article/details/9037757" target="_blank" rel="external">python3.3 分割路径与文件名 小例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;#FA8072&quot;&gt;本文所用的Python版本为python-3.6.2，PyQt5版本为pyqt5-5.9.1，OpenCV版本为opencv-python-3.3.0.10和opencv-contrib-python-3.3.0.10，TensorFlow版本为tensorflow-1.4.0，编程语言为python3，系统环境为Windows 10。&lt;/font&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本文是上一篇（&lt;a href=&quot;https://cniter.github.io/2017/11/11/TensorFlow-Object-Detection-API%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/&quot;&gt;TensorFlow Object Detection API使用小结&lt;/a&gt;）的后续，因为那个project还需要一个界面，所以本人使用PyQt做了这么个界面，其中借用OpenCV的图像数据显示。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
      <category term="python" scheme="http://cniter.github.io/tags/python/"/>
    
      <category term="qt" scheme="http://cniter.github.io/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow Object Detection API使用小结</title>
    <link href="http://cniter.github.io/posts/82d3b275.html"/>
    <id>http://cniter.github.io/posts/82d3b275.html</id>
    <published>2017-11-11T13:52:52.000Z</published>
    <updated>2017-12-09T12:57:13.765Z</updated>
    
    <content type="html"><![CDATA[<font color="#FA8072">本文所用的Python版本为python-3.6.2，TensorFlow版本为tensorflow-1.4.0，编程语言为python3，系统环境为Windows 10。</font><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　很久没写过东西了，主要原因是最近研究生课程开始陆续结课，本人也要忙于应付各种结课时的考试、论文、project等一堆麻烦事。这不深度学习结课时需要做个project，本人也顺便将做这个project的过程记录下来。</p><a id="more"></a><h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>　　该project主要利用TensorFlow中的Object Detection API进行训练和检测。在开始使用该API之前需要安装配置Python环境。</p><p>　　既然是Python首先需要<a href="https://www.python.org/downloads/" target="_blank" rel="external">下载安装Python</a>，安装完之后，为了顺利使用pip需要配置环境变量，在Windows系统环境变量中Path末尾添加：</p><table><thead><tr><th style="text-align:center">变量名</th><th>变量值</th></tr></thead><tbody><tr><td style="text-align:center">Path</td><td>;C:\Users\admin\AppData\Local\Programs\Python\Python36\;C:\Users\admin\AppData\Local\Programs\Python\Python36\Scripts\</td></tr></tbody></table><p>其中<code>C:\Users\admin\AppData\Local\Programs\Python\Python36</code>为python-3.6.2默认安装目录。</p><p>　　然后为了方便使用命令行工具，<a href="https://www.git-scm.com/download/" target="_blank" rel="external">下载安装git</a>，安装方式一路默认即可。</p><p>　　接下来利用pip安装TensorFlow，鼠标右键桌面空白处，点击“<strong>Git Bash Here</strong>”，打开bash命令行，输入<code>pip install tensorflow</code>，其中一些依赖关系可能需要手动解决，手动解决的办法就是用pip install 相关依赖库，这是CPU版的TensorFlow，若要使用GPU，则需要安装GPU版的TensorFlow，安装命令为：<code>pip install tensorflow-gpu</code>，以同样方式解决依赖关系。由于本人电脑没N卡，所以没安装GPU版的TensorFlow，所以如果想使用GPU版的TensorFlow请另行尝试。</p><p>　　然后安装TensorFlow Object Detection API依赖库，在命令行中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install pillow</div><div class="line">pip install lxml</div><div class="line">pip install jupyter</div><div class="line">pip install matplotlib</div></pre></td></tr></table></figure><p>　　因为tensorflow并没有默认自带Object Detection API，所以该API需要自行下载，下载地址为：<a href="https://github.com/tensorflow/models" target="_blank" rel="external">https://github.com/tensorflow/models</a> ，下载之后解压，本人解压目录为：<code>D:\ProgramFiles\PythonLibs\tensorflow</code>，解压完之后需要配置环境目录，在系统环境目录中添加：</p><table><thead><tr><th style="text-align:center">变量名</th><th>变量值</th></tr></thead><tbody><tr><td style="text-align:center">PYTHONPATH</td><td>D:\ProgramFiles\PythonLibs\tensorflow\models;D:\ProgramFiles\PythonLibs\tensorflow\models\research;D:\ProgramFiles\PythonLibs\tensorflow\models\research\slim;</td></tr></tbody></table><p>　　下载配置Object Detection API完之后需要安装Protoc，进入<a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">Protoc下载页</a>，下载<a href="https://github.com/google/protobuf/releases/download/v3.4.0/protoc-3.4.0-win32.zip" target="_blank" rel="external"><strong>protoc-3.4.0-win32.zip</strong></a>，解压之后将<strong>bin</strong>文件夹内的<strong>protoc.exe</strong>拷贝到<code>C:\windows\system32</code>目录下（用于将protoc.exe所在的目录配置到环境变量当中）,当然也可以在系统环境变量Path中添加该<strong>bin</strong>文件夹路径。</p><p>　　最后在命令行中切换目录至：D:\ProgramFiles\PythonLibs\tensorflow\models\research文件夹，即object_detection文件夹所在目录，在命令行中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protoc object_detection/protos/*.proto --python_out=.</div></pre></td></tr></table></figure><p>编译<code>object_detection/protos</code>文件夹下的proto文件，生成对应的python文件。</p><p>　　至此，Windows下TensorFlow中的Object Detection API的使用配置全部完成，至于Ubuntu下的配置可参考其<a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md" target="_blank" rel="external">官方文档</a>。</p><p>　　至于如何验证，可以在命令行中切换目录至<code>object_detection</code>，输入：<code>jupyter notebook</code>，稍等一会，浏览器将自动打开<code>http://localhost:8888/tree</code> jupyter界面，点击<code>object_detection_tutorial.ipynb</code>文件，进入打开的新标签，点击“<strong>Cell</strong>”中的“<strong>Run All</strong>”，耐心等待几 ~ 十几分钟（因为它需要下载相应的模型），将会在浏览器下方显示检测结果。</p><p>　　截止本文完成前，该API公开的有以下几个模型：</p><table><thead><tr><th>Model name</th><th>Speed (ms)</th><th>COCO mAP[^1]</th><th>Outputs</th></tr></thead><tbody><tr><td><a href="http://download.tensorflow.org/models/object_detection/ssd_mobilenet_v1_coco_2017_11_08.tar.gz" target="_blank" rel="external">ssd_mobilenet_v1_coco</a></td><td>30</td><td>21</td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/ssd_inception_v2_coco_2017_11_08.tar.gz" target="_blank" rel="external">ssd_inception_v2_coco</a></td><td>42</td><td>24</td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_v2_coco_2017_11_08.tar.gz" target="_blank" rel="external">faster_rcnn_inception_v2_coco</a></td><td>58</td><td>28</td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_resnet50_coco_2017_11_08.tar.gz" target="_blank" rel="external">faster_rcnn_resnet50_coco</a></td><td>89</td><td>30</td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_resnet50_lowproposals_coco_2017_11_08.tar.gz" target="_blank" rel="external">faster_rcnn_resnet50_lowproposals_coco</a></td><td>64</td><td></td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/rfcn_resnet101_coco_2017_11_08.tar.gz" target="_blank" rel="external">rfcn_resnet101_coco</a></td><td>92</td><td>30</td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_resnet101_coco_2017_11_08.tar.gz" target="_blank" rel="external">faster_rcnn_resnet101_coco</a></td><td>106</td><td>32</td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_resnet101_lowproposals_coco_2017_11_08.tar.gz" target="_blank" rel="external">faster_rcnn_resnet101_lowproposals_coco</a></td><td>82</td><td></td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_resnet_v2_atrous_coco_2017_11_08.tar.gz" target="_blank" rel="external">faster_rcnn_inception_resnet_v2_atrous_coco</a></td><td>620</td><td>37</td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_resnet_v2_atrous_lowproposals_coco_2017_11_08.tar.gz" target="_blank" rel="external">faster_rcnn_inception_resnet_v2_atrous_lowproposals_coco</a></td><td>241</td><td></td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_nas_lowproposals_coco_2017_11_08.tar.gz" target="_blank" rel="external">faster_rcnn_nas</a></td><td>1833</td><td>43</td><td>Boxes</td></tr><tr><td><a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_nas_lowproposals_coco_2017_11_08.tar.gz" target="_blank" rel="external">faster_rcnn_nas_lowproposals_coco</a></td><td>540</td><td></td><td>Boxes</td></tr></tbody></table><p>　　根据上述模型可推知，利用该API可能只能训练Faster-RCNN、R-FCN和SSD三种算法的模型。</p><p>接下来介绍如何使用该API来训练自己的模型进行物体检测。</p><h2 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h2><h3 id="数据准备篇"><a href="#数据准备篇" class="headerlink" title="数据准备篇"></a>数据准备篇</h3><p>　　既然要训练自己的模型，当然要准备相应的数据，而TensorFlow有其独特的输入数据格式<a href="https://www.tensorflow.org/api_guides/python/python_io#tfrecords_format_details" target="_blank" rel="external">TFRecord</a>，所以通常还要将自己的数据转换成TFRecord格式以输入TensorFlow中进行训练。以<a href="https://github.com/datitran" target="_blank" rel="external">datitran</a>/<a href="https://github.com/datitran/raccoon_dataset" target="_blank" rel="external"><strong>raccoon_dataset</strong></a>数据集为例，该作者在Google image上收集了200张Raccoon图片，用<a href="https://github.com/tzutalin/labelImg" target="_blank" rel="external">LabelImg</a>对这些图片进行标记，并将标记以PASCAL VOC格式保存为xml文件。作者在文中也提到了另一个图片标记工具<a href="https://github.com/christopher5106/FastAnnotationTool" target="_blank" rel="external">FIAT (Fast Image Data Annotation Tool)</a>。保存为PASCAL VOC格式的xml文件之后，可以使用object_detection文件夹中的<a href="https://github.com/tensorflow/models/blob/master/research/object_detection/create_pascal_tf_record.py" target="_blank" rel="external">create_pascal_tf_record.py</a>文件将数据转化为TFRecord格式，用法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./create_pascal_tf_record --data_dir=/home/user/VOCdevkit \</div><div class="line">        --year=VOC2012 \</div><div class="line">        --output_path=/home/user/pascal.record</div></pre></td></tr></table></figure><p>当然也可以使用datitran作者提供的<a href="https://github.com/datitran/raccoon_dataset/blob/master/xml_to_csv.py" target="_blank" rel="external">xml_to_csv.py</a>文件将xml文件先转化为csv文件，再利用<a href="https://github.com/datitran/raccoon_dataset/blob/master/generate_tfrecord.py" target="_blank" rel="external">generate_tfrecord.py</a>文件将csv文件转化成TFRecord格式文件。</p><p>　　注意，使用xml_to_csv.py和generate_tfrecord.py其文件结构应该是这样的：</p><blockquote><p>.<br>├── annotations<br>├── generate_tfrecord.py<br>├── images<br>└── xml_to_csv.py</p><p>2 directories, 2 files</p></blockquote><p>其中images文件夹存的是jpg图片，annotations文件夹存的是xml标签文件。generate_tfrecord.py文件中的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_text_to_int</span><span class="params">(row_label)</span>:</span></div><div class="line">    <span class="keyword">if</span> row_label == <span class="string">'raccoon'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line"><span class="keyword">None</span></div></pre></td></tr></table></figure><p>其中的<code>raccoon</code>注意要改成自己的类别标签。如此，数据的问题就解决了。</p><h3 id="训练篇"><a href="#训练篇" class="headerlink" title="训练篇"></a>训练篇</h3><p>　　然后就是正式开始训练了，以Faster-RCNN算法为例。首先准备相应的数据，本人准备的数据文件结构如下：</p><blockquote><p>TensorFlowObjectDetectionAPITest<br>├── data<br>│ 　├── model.ckpt.data-00000-of-00001<br>│ 　├── model.ckpt.index<br>│ 　├── model.ckpt.meta<br>│ 　├── object_label_map.pbtxt<br>│ 　├── test.record<br>│ 　└── train.record<br>├── eval<br>├── eval.py<br>├── export_inference_graph.py<br>├── faster_rcnn_resnet101_coco.config<br>├── model<br>├── train<br>└── train.py</p><p>4 directories, 10 files</p></blockquote><p>其中，<strong>TensorFlowObjectDetectionAPITest</strong>为项目文件夹，该<em>project</em>在此文件夹下运行；</p><p><strong>data</strong>文件夹中三个<strong>model.ckpt</strong>文件：<strong>model.ckpt.data-00000-of-00001</strong>、<strong>model.ckpt.index</strong>和<strong>model.ckpt.meta</strong>来自<a href="http://download.tensorflow.org/models/object_detection/faster_rcnn_resnet101_coco_2017_11_08.tar.gz" target="_blank" rel="external"><em>faster_rcnn_resnet101_coco</em></a>模型，用来初始化网络参数；</p><p><strong>object_label_map.pbtxt</strong>文件内容如下：</p><blockquote><p>item {<br>​ id: 1<br>​ name: ‘raccoon’<br>}</p></blockquote><p>将其中的<code>raccoon</code>改成自己的类别标签，如果有多个类别标签则可以参考<code>object_detection\data</code>文件夹中的<em><code>pascal_label_map.pbtxt</code></em>文件格式；</p><p><strong>test.record</strong>和<strong>train.record</strong>是生成的TFRecord数据，分别为待输入的测试数据和训练数据；</p><p><strong>eval</strong>文件夹为空文件夹用来输出测试结果；<strong>train</strong>文件夹为空文件夹用来输出训练结果（包括checkpoint文件和最终的模型文件）；</p><p><strong>faster_rcnn_resnet101_coco.config</strong>为配置文件，包括各种参数和输入输出数据的配置，其来自<code>object_detection\samples\configs</code>文件夹中<em><code>faster_rcnn_resnet101_coco.config</code></em>文件，在使用时需对其做如下修改：</p><ol><li><p>首先是<strong>num_classes</strong>，这是待检测的类别数目，如果只要检测一种，则将其值改为1；</p></li><li><p><code>fine_tune_checkpoint: &quot;PATH_TO_BE_CONFIGURED/model.ckpt&quot;</code>，将<code>PATH_TO_BE_CONFIGURED</code>改为<code>./data</code>；</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">train_input_reader: &#123;</div><div class="line">  tf_record_input_reader &#123;</div><div class="line">    input_path: &quot;PATH_TO_BE_CONFIGURED/mscoco_train.record&quot;</div><div class="line">  &#125;</div><div class="line">  label_map_path: &quot;PATH_TO_BE_CONFIGURED/mscoco_label_map.pbtxt&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将其中的的<code>PATH_TO_BE_CONFIGURED/mscoco_train.record</code>改为<code>./data/train.record</code>，将其中的<code>PATH_TO_BE_CONFIGURED/mscoco_label_map.pbtxt</code>改为<code>./data/object_label_map.pbtxt</code>；</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">eval_input_reader: &#123;</div><div class="line">  tf_record_input_reader &#123;</div><div class="line">    input_path: &quot;PATH_TO_BE_CONFIGURED/mscoco_val.record&quot;</div><div class="line">  &#125;</div><div class="line">  label_map_path: &quot;PATH_TO_BE_CONFIGURED/mscoco_label_map.pbtxt&quot;</div><div class="line">  shuffle: false</div><div class="line">  num_readers: 1</div><div class="line">  num_epochs: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将其中的的<code>PATH_TO_BE_CONFIGURED/mscoco_val.record</code>改为<code>./data/test.record</code>，将其中的<code>PATH_TO_BE_CONFIGURED/mscoco_label_map.pbtxt</code>改为<code>./data/object_label_map.pbtxt</code>；</p></li></ol><p>至于其它的参数可以选择默认，不对其进行修改；</p><p><strong>train.py</strong>为训练代码，其来自<code>object_detection/</code>文件夹中的<em><code>train.py</code></em>，直接复制出来使用即可，具体用法为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python train.py --logtostderr --train_dir=./train --pipeline_config_path=faster_rcnn_resnet101_coco.config</div></pre></td></tr></table></figure><p>其在运行过程中会在<strong>train</strong>文件夹生成一系列训练过程文件，比如checkpoint、model.ckpt-{num}（{num}代表训练过程保存的第几个网络模型，一般从0开始，包括.index、.meta和.data三个文件）等文件。</p><p><strong>eval.py</strong>为评估代码，其来自<code>object_detection/</code>文件夹中的<em><code>eval.py</code></em>，直接复制出来使用即可，具体用法为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python eval.py --logtostderr --checkpoint_dir=./train --eval_dir=./<span class="built_in">eval</span> --pipeline_config_path=./faster_rcnn_resnet101_coco.config</div></pre></td></tr></table></figure><p>其在运行过程中会在<strong>eval</strong>文件夹生成一系列评估文件，每个文件对应一个测试image。</p><p><strong>export_inference_graph.py</strong>为导出pb模型代码，其来自<code>object_detection/</code>文件夹中的<em><code>export_inference_graph.py</code></em>，直接复制出来使用即可，具体用法为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python export_inference_graph.py --input_type image_tensor --pipeline_config_path ./faster_rcnn_resnet101_coco.config --trained_checkpoint_prefix ./train/model.ckpt-18298 --output_directory ./model</div></pre></td></tr></table></figure><p>其中<code>model.ckpt-18298</code>表示使用第18298次保存的网络模型导出pb模型文件，导出的模型文件保存在<strong>model</strong>文件夹，主要有一下几个文件：</p><blockquote><p>- graph.pbtxt</p><p>- model.ckpt.data-00000-of-00001</p><p>- model.ckpt.info</p><p>- model.ckpt.meta</p><p>- frozen_inference_graph.pb</p></blockquote><p>其中frozen_inference_graph.pb就是训练成功用来检测目标的模型。</p><p>　　TensorFlow训练时可以随时查看训练过程，如损失函数的值下降曲线等，所用命令为：在命令行中切换目录至project运行目录，即train.py所在文件夹，本人这里即<em>TensorFlowObjectDetectionAPITest</em>文件夹，输入：<code>tensorboard --logdir=./</code>，等待片刻，在浏览器地址栏输入：<code>http://localhost:6006/</code>，即可看到训练过程曲线。</p><h3 id="检测篇"><a href="#检测篇" class="headerlink" title="检测篇"></a>检测篇</h3><p>　　检测结果使用opencv窗口显示（至于python中opencv的使用请见下一篇），具体调用自己训练的模型进行检测的Python代码（该代码为eli大佬参考<code>object_detection</code>文件夹中的<em><code>object_detection_tutorial.ipynb</code></em>（该文件可在jupyter中查看）改的）为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> label_map_util</div><div class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> visualization_utils <span class="keyword">as</span> vis_util</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Detector</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.PATH_TO_CKPT = <span class="string">r'./model/frozen_inference_graph.pb'</span>    <span class="comment"># 选择模型</span></div><div class="line">        self.PATH_TO_LABELS = <span class="string">r'./data/object_label_map.pbtxt'</span>      <span class="comment"># 选择类别标签文件</span></div><div class="line">        self.NUM_CLASSES = <span class="number">1</span></div><div class="line">        self.detection_graph = self._load_model()</div><div class="line">        self.category_index = self._load_label_map()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_load_model</span><span class="params">(self)</span>:</span></div><div class="line">        detection_graph = tf.Graph()</div><div class="line">        <span class="keyword">with</span> detection_graph.as_default():</div><div class="line">            od_graph_def = tf.GraphDef()</div><div class="line">            <span class="keyword">with</span> tf.gfile.GFile(self.PATH_TO_CKPT, <span class="string">'rb'</span>) <span class="keyword">as</span> fid:</div><div class="line">                serialized_graph = fid.read()</div><div class="line">                od_graph_def.ParseFromString(serialized_graph)</div><div class="line">                tf.import_graph_def(od_graph_def, name=<span class="string">''</span>)</div><div class="line">        <span class="keyword">return</span> detection_graph</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_load_label_map</span><span class="params">(self)</span>:</span></div><div class="line">        label_map = label_map_util.load_labelmap(self.PATH_TO_LABELS)</div><div class="line">        categories = label_map_util.convert_label_map_to_categories(label_map,</div><div class="line">                                                                    max_num_classes=self.NUM_CLASSES,</div><div class="line">                                                                    use_display_name=<span class="keyword">True</span>)</div><div class="line">        category_index = label_map_util.create_category_index(categories)</div><div class="line">        <span class="keyword">return</span> category_index</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detect</span><span class="params">(self, image)</span>:</span></div><div class="line">        <span class="keyword">with</span> self.detection_graph.as_default():</div><div class="line">            <span class="keyword">with</span> tf.Session(graph=self.detection_graph) <span class="keyword">as</span> sess:</div><div class="line">                <span class="comment"># Expand dimensions since the model expects images to have shape: [1, None, None, 3]</span></div><div class="line">                image_np_expanded = np.expand_dims(image, axis=<span class="number">0</span>)</div><div class="line">                image_tensor = self.detection_graph.get_tensor_by_name(<span class="string">'image_tensor:0'</span>)</div><div class="line">                boxes = self.detection_graph.get_tensor_by_name(<span class="string">'detection_boxes:0'</span>)</div><div class="line">                scores = self.detection_graph.get_tensor_by_name(<span class="string">'detection_scores:0'</span>)</div><div class="line">                classes = self.detection_graph.get_tensor_by_name(<span class="string">'detection_classes:0'</span>)</div><div class="line">                num_detections = self.detection_graph.get_tensor_by_name(<span class="string">'num_detections:0'</span>)</div><div class="line">                <span class="comment"># Actual detection.</span></div><div class="line">                (boxes, scores, classes, num_detections) = sess.run(</div><div class="line">                    [boxes, scores, classes, num_detections],</div><div class="line">                    feed_dict=&#123;image_tensor: image_np_expanded&#125;)</div><div class="line">                <span class="comment"># Visualization of the results of a detection.</span></div><div class="line">                vis_util.visualize_boxes_and_labels_on_image_array(</div><div class="line">                    image,</div><div class="line">                    np.squeeze(boxes),</div><div class="line">                    np.squeeze(classes).astype(np.int32),</div><div class="line">                    np.squeeze(scores),</div><div class="line">                    self.category_index,</div><div class="line">                    use_normalized_coordinates=<span class="keyword">True</span>,</div><div class="line">                    line_thickness=<span class="number">8</span>)</div><div class="line"></div><div class="line">        cv2.namedWindow(<span class="string">"detection"</span>, cv2.WINDOW_NORMAL)</div><div class="line">        cv2.imshow(<span class="string">"detection"</span>, image)</div><div class="line">        cv2.waitKey(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    image = cv2.imread(<span class="string">'./test_img.jpg'</span>) <span class="comment"># 选择待检测的图片</span></div><div class="line">    detector = Detector()</div><div class="line">    detector.detect(image)</div></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　经过这次TensorFlow训练，感觉深度学习真tm吃硬件，费时间，也难怪神经网络理论出来几十年之后才火，当年的硬件根本无法支持这么大的计算量。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>最后附上datitran作者提供的xml_to_csv.py文件源码和generate_tfrecord.py文件源码：</p><p><strong>xml_to_csv.py源码</strong>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xml_to_csv</span><span class="params">(path)</span>:</span></div><div class="line">    xml_list = []</div><div class="line">    <span class="keyword">for</span> xml_file <span class="keyword">in</span> glob.glob(path + <span class="string">'/*.xml'</span>):</div><div class="line">        tree = ET.parse(xml_file)</div><div class="line">        root = tree.getroot()</div><div class="line">        <span class="keyword">for</span> member <span class="keyword">in</span> root.findall(<span class="string">'object'</span>):</div><div class="line">            value = (root.find(<span class="string">'filename'</span>).text,</div><div class="line">                     int(root.find(<span class="string">'size'</span>)[<span class="number">0</span>].text),</div><div class="line">                     int(root.find(<span class="string">'size'</span>)[<span class="number">1</span>].text),</div><div class="line">                     member[<span class="number">0</span>].text,</div><div class="line">                     int(member[<span class="number">4</span>][<span class="number">0</span>].text),</div><div class="line">                     int(member[<span class="number">4</span>][<span class="number">1</span>].text),</div><div class="line">                     int(member[<span class="number">4</span>][<span class="number">2</span>].text),</div><div class="line">                     int(member[<span class="number">4</span>][<span class="number">3</span>].text)</div><div class="line">                     )</div><div class="line">            xml_list.append(value)</div><div class="line">    column_name = [<span class="string">'filename'</span>, <span class="string">'width'</span>, <span class="string">'height'</span>, <span class="string">'class'</span>, <span class="string">'xmin'</span>, <span class="string">'ymin'</span>, <span class="string">'xmax'</span>, <span class="string">'ymax'</span>]</div><div class="line">    xml_df = pd.DataFrame(xml_list, columns=column_name)</div><div class="line">    <span class="keyword">return</span> xml_df</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    image_path = os.path.join(os.getcwd(), <span class="string">'annotations'</span>)</div><div class="line">    xml_df = xml_to_csv(image_path)</div><div class="line">    xml_df.to_csv(<span class="string">'raccoon_labels.csv'</span>, index=<span class="keyword">None</span>)</div><div class="line">    print(<span class="string">'Successfully converted xml to csv.'</span>)</div><div class="line"></div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure><p><strong>generate_tfrecord.py文件源码</strong>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Usage:</span></div><div class="line"><span class="string">  # From tensorflow/models/</span></div><div class="line"><span class="string">  # Create train data:</span></div><div class="line"><span class="string">  python generate_tfrecord.py --csv_input=data/train_labels.csv  --output_path=train.record</span></div><div class="line"><span class="string">  # Create test data:</span></div><div class="line"><span class="string">  python generate_tfrecord.py --csv_input=data/test_labels.csv  --output_path=test.record</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> io</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> dataset_util</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple, OrderedDict</div><div class="line"></div><div class="line">flags = tf.app.flags</div><div class="line">flags.DEFINE_string(<span class="string">'csv_input'</span>, <span class="string">''</span>, <span class="string">'Path to the CSV input'</span>)</div><div class="line">flags.DEFINE_string(<span class="string">'output_path'</span>, <span class="string">''</span>, <span class="string">'Path to output TFRecord'</span>)</div><div class="line">FLAGS = flags.FLAGS</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># TO-DO replace this with label map</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_text_to_int</span><span class="params">(row_label)</span>:</span></div><div class="line">    <span class="keyword">if</span> row_label == <span class="string">'raccoon'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(df, group)</span>:</span></div><div class="line">    data = namedtuple(<span class="string">'data'</span>, [<span class="string">'filename'</span>, <span class="string">'object'</span>])</div><div class="line">    gb = df.groupby(group)</div><div class="line">    <span class="keyword">return</span> [data(filename, gb.get_group(x)) <span class="keyword">for</span> filename, x <span class="keyword">in</span> zip(gb.groups.keys(), gb.groups)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tf_example</span><span class="params">(group, path)</span>:</span></div><div class="line">    <span class="keyword">with</span> tf.gfile.GFile(os.path.join(path, <span class="string">'&#123;&#125;'</span>.format(group.filename)), <span class="string">'rb'</span>) <span class="keyword">as</span> fid:</div><div class="line">        encoded_jpg = fid.read()</div><div class="line">    encoded_jpg_io = io.BytesIO(encoded_jpg)</div><div class="line">    image = Image.open(encoded_jpg_io)</div><div class="line">    width, height = image.size</div><div class="line"></div><div class="line">    filename = group.filename.encode(<span class="string">'utf8'</span>)</div><div class="line">    image_format = <span class="string">b'jpg'</span></div><div class="line">    xmins = []</div><div class="line">    xmaxs = []</div><div class="line">    ymins = []</div><div class="line">    ymaxs = []</div><div class="line">    classes_text = []</div><div class="line">    classes = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> index, row <span class="keyword">in</span> group.object.iterrows():</div><div class="line">        xmins.append(row[<span class="string">'xmin'</span>] / width)</div><div class="line">        xmaxs.append(row[<span class="string">'xmax'</span>] / width)</div><div class="line">        ymins.append(row[<span class="string">'ymin'</span>] / height)</div><div class="line">        ymaxs.append(row[<span class="string">'ymax'</span>] / height)</div><div class="line">        classes_text.append(row[<span class="string">'class'</span>].encode(<span class="string">'utf8'</span>))</div><div class="line">        classes.append(class_text_to_int(row[<span class="string">'class'</span>]))</div><div class="line"></div><div class="line">    tf_example = tf.train.Example(features=tf.train.Features(feature=&#123;</div><div class="line">        <span class="string">'image/height'</span>: dataset_util.int64_feature(height),</div><div class="line">        <span class="string">'image/width'</span>: dataset_util.int64_feature(width),</div><div class="line">        <span class="string">'image/filename'</span>: dataset_util.bytes_feature(filename),</div><div class="line">        <span class="string">'image/source_id'</span>: dataset_util.bytes_feature(filename),</div><div class="line">        <span class="string">'image/encoded'</span>: dataset_util.bytes_feature(encoded_jpg),</div><div class="line">        <span class="string">'image/format'</span>: dataset_util.bytes_feature(image_format),</div><div class="line">        <span class="string">'image/object/bbox/xmin'</span>: dataset_util.float_list_feature(xmins),</div><div class="line">        <span class="string">'image/object/bbox/xmax'</span>: dataset_util.float_list_feature(xmaxs),</div><div class="line">        <span class="string">'image/object/bbox/ymin'</span>: dataset_util.float_list_feature(ymins),</div><div class="line">        <span class="string">'image/object/bbox/ymax'</span>: dataset_util.float_list_feature(ymaxs),</div><div class="line">        <span class="string">'image/object/class/text'</span>: dataset_util.bytes_list_feature(classes_text),</div><div class="line">        <span class="string">'image/object/class/label'</span>: dataset_util.int64_list_feature(classes),</div><div class="line">    &#125;))</div><div class="line">    <span class="keyword">return</span> tf_example</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></div><div class="line">    writer = tf.python_io.TFRecordWriter(FLAGS.output_path)</div><div class="line">    path = os.path.join(os.getcwd(), <span class="string">'images'</span>)</div><div class="line">    examples = pd.read_csv(FLAGS.csv_input)</div><div class="line">    grouped = split(examples, <span class="string">'filename'</span>)</div><div class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> grouped:</div><div class="line">        tf_example = create_tf_example(group, path)</div><div class="line">        writer.write(tf_example.SerializeToString())</div><div class="line"></div><div class="line">    writer.close()</div><div class="line">    output_path = os.path.join(os.getcwd(), FLAGS.output_path)</div><div class="line">    print(<span class="string">'Successfully created the TFRecords: &#123;&#125;'</span>.format(output_path))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    tf.app.run()</div></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/xiaoxiao123jun/article/details/76605928" target="_blank" rel="external">对于谷歌开源的TensorFlow Object Detection API视频物体识别系统实现教程</a></p><p>[2] <a href="http://blog.csdn.net/c20081052/article/details/77608954" target="_blank" rel="external">TensorFlow学习——Tensorflow Object Detection API（win10，CPU）</a></p><p>[3] <a href="https://towardsdatascience.com/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9" target="_blank" rel="external">How to train your own Object Detector with TensorFlow’s Object Detector API</a></p><p>[4] <a href="http://rensanning.iteye.com/blog/2381885" target="_blank" rel="external">TensorFlow 之 物体检测</a>（<a href="http://rensanning.iteye.com/category/374992" target="_blank" rel="external">http://rensanning.iteye.com/category/374992</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;#FA8072&quot;&gt;本文所用的Python版本为python-3.6.2，TensorFlow版本为tensorflow-1.4.0，编程语言为python3，系统环境为Windows 10。&lt;/font&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　很久没写过东西了，主要原因是最近研究生课程开始陆续结课，本人也要忙于应付各种结课时的考试、论文、project等一堆麻烦事。这不深度学习结课时需要做个project，本人也顺便将做这个project的过程记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
      <category term="Deep Learning" scheme="http://cniter.github.io/categories/Study/Deep-Learning/"/>
    
    
      <category term="tensorflow" scheme="http://cniter.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>C语言中整型提升问题</title>
    <link href="http://cniter.github.io/posts/2a3d46b0.html"/>
    <id>http://cniter.github.io/posts/2a3d46b0.html</id>
    <published>2017-10-27T11:56:12.000Z</published>
    <updated>2017-12-09T12:57:13.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　今天有人问了本人一个移位的问题，就是下面这段C语言代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> a = <span class="number">0xffff</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%#hx\n"</span>, a &lt;&lt; <span class="number">4</span> &gt;&gt; <span class="number">8</span> &lt;&lt; <span class="number">4</span>);</div></pre></td></tr></table></figure><p>你认为会输出什么结果？੧ಡ ⌣ ಡ੭</p><a id="more"></a><h2 id="解答篇"><a href="#解答篇" class="headerlink" title="解答篇"></a>解答篇</h2><p>　　正确答案是：<code>0xfff0</code>。恐怕有一部分会像本人一样觉得答案就是<code>0xff0</code>才对，还像模像样的给出对应的说法：看<code>a</code>首先向左移四位，即去掉最左边的<code>f</code>，右边补4个0变成这样<code>0xfff0</code>；然后再向右移8位，a将会变成这样<code>0x00ff</code>；最后向左移四位，得到<code>0x0ff0</code>，所以应该输出<code>0xff0</code>。<strong>但是，正确答案终究是正确答案。</strong>之所以会输出正确答案，是因为这里面还有一个<strong>整型提升</strong>。所谓的整型提升就是：</p><blockquote><p>在一个表达式中，如果int能够表示原始类型中的所有数值，那么这个数值就被转成int型，否则，它被转成unsigned int型。这种规则被称为整型提升。所有其它类型都不会被整型提升改变。</p></blockquote><p>　　所以在<code>a &lt;&lt; 4 &gt;&gt; 8 &lt;&lt; 4</code>中，会先将a提升为int型，即a会变成<code>0x0000ffff</code>，接着向左移四位，a变成<code>0x000ffff0</code>，再向右移8位，变成<code>0x00000fff</code>，最后向左移4位，变成<code>0x0000fff0</code>，最后为了输出，再做一个隐式的类型转换（由int转unsigned short），得到<code>0xfff0</code>，所以最后输出<code>0xfff0</code>。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　这个问题是一个刚入大学的童靴问本人的，刚问本人时本人还没反应过来，后来才想起有整型提升这么回事o(╯□╰)o。btw，这位童靴主要是想去掉高4位和低4位只取中间8位的值，其实最简单的办法就是直接<code>a &amp; 0x0ff0</code>，这样管它有没有整型提升，肯定能得到中间8位的值(╯▽╰)。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/mishifangxiangdefeng/article/details/47981889" target="_blank" rel="external">C语言进阶：整型提升</a>（<a href="http://blog.csdn.net/mishifangxiangdefeng/article/category/1058873" target="_blank" rel="external">http://blog.csdn.net/mishifangxiangdefeng/article/category/1058873</a> ）</p><p>[2] <a href="http://bbs.csdn.net/topics/390856773" target="_blank" rel="external">对 unsigned char 先左移 后右移 可以出现两种结果</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　今天有人问了本人一个移位的问题，就是下面这段C语言代码：&lt;/p&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%#hx\n&quot;&lt;/span&gt;, a &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;你认为会输出什么结果？੧ಡ ⌣ ಡ੭&lt;/p&gt;
    
    </summary>
    
      <category term="Problems" scheme="http://cniter.github.io/categories/Problems/"/>
    
    
      <category term="c/cpp" scheme="http://cniter.github.io/tags/c-cpp/"/>
    
  </entry>
  
  <entry>
    <title>TXT数据转OpenCV中的Mat数据</title>
    <link href="http://cniter.github.io/posts/dece8eba.html"/>
    <id>http://cniter.github.io/posts/dece8eba.html</id>
    <published>2017-10-19T09:01:01.000Z</published>
    <updated>2017-12-09T12:57:13.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本文是以前做的一个小东西的处理前奏，当时也记录过，现在把它翻出来重新看看。那个东西需要利用深度图，本人当时还没拿到Kinect，就在网上下了一些<a href="https://drive.google.com/uc?export=download&amp;confirm=QRhv&amp;id=0B_9saHAqGFITODNmNzU0ZjctMjk0Yi00YjI5LWJmZDMtYTdiYTE2YzM5OTQ4" target="_blank" rel="external">数据</a>（<a href="http://eeeweba.ntu.edu.sg/computervision/people/home/renzhou/HandGesture.htm" target="_blank" rel="external">http://eeeweba.ntu.edu.sg/computervision/people/home/renzhou/HandGesture.htm</a>），该数据集包含了彩色图及对应的深度图，但是该数据集没有以图像形式存储深度值，而是用txt文本以行列形式存储真正的深度值（单位为mm），所以并不能直观的看到深度图像，本人需要把这些深度值从txt文本提取出来并把它以图像的形式呈现出来，由于需求比较特殊，网上没看到现成的解决的方案，所以本人只有用现成的轮子自己做一个了。</p><a id="more"></a><h2 id="思路篇"><a href="#思路篇" class="headerlink" title="思路篇"></a>思路篇</h2><p>　　程序的基本思路是：先找到目录及子目录下的所有txt文件路径；再根据路径分别读取txt文件，按行读取之后再进行字符串分割提取其中的深度值；为了便于以图像形式显示，将深度值归一化至0~255存入8位单通道的Mat类型数据中，最后以png图像形式保存至各个目录。</p><h2 id="实现篇"><a href="#实现篇" class="headerlink" title="实现篇"></a>实现篇</h2><p>　　因为当时还在用opencv-2.4.11，所以本文所实现的代码是基于opencv-2.4.11，不过应该只要在opencv-2.0版本及以上只要有Mat数据结构的都能用，毕竟本人只用到了OpenCV中的Mat数据结构。Talk is cheap, show you the code（代码很乱，估计也只用这么一次，所以就没怎么注意了:-P）。具体C++实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;  </span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// ******************************************************************</span></div><div class="line"><span class="comment">// @refer to  [C++文件读写操作（二）逐字符读取文本和逐行读取文本](http://blog.csdn.net/wangshihui512/article/details/8921924)</span></div><div class="line"><span class="comment">//            [字符串分割(C++)](http://www.cnblogs.com/MikeZhang/archive/2012/03/24/MySplitFunCPP.html)</span></div><div class="line"><span class="comment">//            [C++读取文件夹中所有的文件或者是特定后缀的文件](http://blog.csdn.net/adong76/article/details/39432467)</span></div><div class="line"><span class="comment">//            [C/C++ 判断文件夹是否存在以及创建、删除文件夹 windows以及linux通用](http://blog.csdn.net/u012005313/article/details/50688257)</span></div><div class="line"><span class="comment">//            [Split a string in C++?](http://stackoverflow.com/questions/236129/split-a-string-in-c)</span></div><div class="line"><span class="comment">//            [Kinect开发学习笔记之（六）带游戏者ID的深度数据的提取](http://blog.csdn.net/zouxy09/article/details/8151044)</span></div><div class="line"><span class="comment">//            [Depth Map Tutorial](http://www.pages.drexel.edu/~nk752/depthMapTut.html)</span></div><div class="line"><span class="comment">// ******************************************************************</span></div><div class="line"><span class="comment">// ----- 逐个字符读取文件 --------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">testByChar</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    fstream testByCharFile;  </div><div class="line">    <span class="keyword">char</span> c;  </div><div class="line">    testByCharFile.open(<span class="string">"./test.txt"</span>,ios::in);  </div><div class="line"></div><div class="line">    <span class="keyword">while</span>(!testByCharFile.eof())  </div><div class="line">    &#123;  </div><div class="line">        testByCharFile&gt;&gt;c;  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;c;  </div><div class="line">    &#125;  </div><div class="line">    testByCharFile.close();  </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// -------- 逐行读取文件 -------------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">testByLine</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">char</span> buffer[<span class="number">256</span>];  </div><div class="line">    fstream outFile;  </div><div class="line">    outFile.open(<span class="string">"./test.txt"</span>,ios::in);  </div><div class="line"></div><div class="line">    <span class="keyword">while</span>(!outFile.eof())  </div><div class="line">    &#123;  </div><div class="line">        outFile.getline(buffer, <span class="number">256</span>, <span class="string">'\n'</span>);<span class="comment">//getline(char *,int,char) 表示该行字符达到256个或遇到换行就结束  </span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;buffer&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">    &#125;  </div><div class="line">    outFile.close();  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">//  ------- 分割字符串 --------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splitString</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">char</span> buffer[<span class="number">1280</span>];  </div><div class="line">    fstream outFile;  </div><div class="line">    outFile.open(<span class="string">"./test.txt"</span>,ios::in);  </div><div class="line"></div><div class="line">    <span class="keyword">while</span>(!outFile.eof())  </div><div class="line">    &#123;  </div><div class="line">        outFile.getline(buffer, <span class="number">1280</span>, <span class="string">'\n'</span>);<span class="comment">//getline(char *,int,char) 表示该行字符达到1280个或遇到换行就结束  </span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;buffer&lt;&lt;<span class="built_in">endl</span>; </div><div class="line"></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *d = <span class="string">" ,*"</span>;</div><div class="line">        <span class="keyword">char</span> *p;</div><div class="line">        p = strtok(buffer, d);</div><div class="line">        <span class="keyword">while</span>(p)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, p);</div><div class="line">            p=strtok(<span class="literal">NULL</span>, d);</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    outFile.close();  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">// 获取文件夹下指定格式所有文件名</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getAllFormatFiles</span><span class="params">( <span class="built_in">string</span> path, <span class="built_in">string</span> format, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; files )</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="comment">//文件句柄    </span></div><div class="line">    <span class="keyword">long</span>   hFile   =   <span class="number">0</span>;    </div><div class="line">    <span class="comment">//文件信息    </span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">finddata_t</span> <span class="title">fileinfo</span>;</span>    </div><div class="line">    <span class="built_in">string</span> pathName;    </div><div class="line">    <span class="keyword">if</span>((hFile = _findfirst(pathName.assign(path).append(<span class="string">"/*."</span> + format).c_str(),&amp;fileinfo)) !=  <span class="number">-1</span>)    </div><div class="line">    &#123;    </div><div class="line">        <span class="keyword">do</span>    </div><div class="line">        &#123;   </div><div class="line">            <span class="comment">//如果是目录,迭代之  </span></div><div class="line">            <span class="comment">//如果不是,加入列表  </span></div><div class="line">            <span class="keyword">if</span>((fileinfo.attrib &amp;  _A_SUBDIR))    </div><div class="line">            &#123;    </div><div class="line">                <span class="keyword">if</span>(<span class="built_in">strcmp</span>(fileinfo.name,<span class="string">"."</span>) != <span class="number">0</span>  &amp;&amp;  <span class="built_in">strcmp</span>(fileinfo.name,<span class="string">".."</span>) != <span class="number">0</span>)    </div><div class="line">                &#123;  </div><div class="line">                    <span class="comment">//files.push_back(p.assign(path).append("/").append(fileinfo.name) );  </span></div><div class="line">                    getAllFormatFiles( pathName.assign(path).append(<span class="string">"/"</span>).append(fileinfo.name), format, files);   </div><div class="line">                &#125;  </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">else</span>    </div><div class="line">            &#123;    </div><div class="line">                files.push_back(pathName.assign(path).append(<span class="string">"/"</span>).append(fileinfo.name) );    </div><div class="line">            &#125;    </div><div class="line">        &#125;<span class="keyword">while</span>(_findnext(hFile, &amp;fileinfo) == <span class="number">0</span>);    </div><div class="line"></div><div class="line">        _findclose(hFile);   </div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">// http://stackoverflow.com/questions/236129/split-a-string-in-c</span></div><div class="line"><span class="comment">// ---- stackoverflow上大神的C++版本分割字符串 --------------------</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; split(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; text, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; delims)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; tokens;</div><div class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> start = text.find_first_not_of(delims), end = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>((end = text.find_first_of(delims, start)) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</div><div class="line">    &#123;</div><div class="line">        tokens.push_back(text.substr(start, end - start));</div><div class="line">        start = text.find_first_not_of(delims, end);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(start != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</div><div class="line">        tokens.push_back(text.substr(start));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> tokens;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建文件夹及子文件夹</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDir</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;path)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; tokens;</div><div class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ((end = path.find(<span class="string">'/'</span>, start)) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (end != start) </div><div class="line">        &#123;</div><div class="line">            tokens.push_back(path.substr(<span class="number">0</span>, end));</div><div class="line">        &#125;</div><div class="line">        start = end + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (end != start) </div><div class="line">    &#123;</div><div class="line">        tokens.push_back(path);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::const_iterator itp = tokens.begin();</div><div class="line">    <span class="keyword">while</span> (itp != tokens.end())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (access(itp-&gt;c_str(), <span class="number">0</span>) == <span class="number">-1</span>)  <span class="comment">// 判断文件夹是否存在  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;*itp&lt;&lt;<span class="string">" is not existing"</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"now make it"</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">            <span class="keyword">if</span> (mkdir(itp-&gt;c_str()) == <span class="number">0</span>)   <span class="comment">// 不存在则创建，只能一级一级的创建</span></div><div class="line">            &#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"make successfully"</span>&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; *itp++ &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Txt文件转opencv Mat（txt文件中存的是以行列形式的深度值）</span></div><div class="line">cv::<span class="function">Mat <span class="title">Txt2DepthMat</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;txtname)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    cv::Mat result(480, 640, CV_8UC1, cv::Scalar(0));</div><div class="line"></div><div class="line">    <span class="keyword">char</span> buffer[<span class="number">12800</span>];     <span class="comment">// 按行读取文件</span></div><div class="line">    fstream outFile;  </div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *d = <span class="string">","</span>;    <span class="comment">// 以,为分割点</span></div><div class="line">    <span class="keyword">char</span> *p;    <span class="comment">// 分割出的子串</span></div><div class="line">    outFile.open(txtname, ios::in);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; outFile.getline(buffer, <span class="number">12800</span>, <span class="string">'\n'</span>) != <span class="literal">NULL</span> &amp;&amp; i &lt; result.rows; i++)</div><div class="line">    &#123;</div><div class="line">        p = strtok(buffer, d);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; p &amp;&amp; j &lt; result.cols; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> realDepth = (atoi(p) &amp; <span class="number">0xfff8</span>) &gt;&gt; <span class="number">3</span>; <span class="comment">//提取距离信息，高13位</span></div><div class="line">            <span class="keyword">int</span> depth = (<span class="keyword">int</span>)(<span class="number">256</span> * realDepth / <span class="number">0x0fff</span>); <span class="comment">//因为提取的信息是距离信息，为了便于显示，这里归一化为0-255  </span></div><div class="line">            result.at&lt;uchar&gt;(i, j) = cv::saturate_cast&lt;uchar&gt;(depth);</div><div class="line">            p = strtok(<span class="literal">NULL</span>, d);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    outFile.close();  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 以颜色表示深度信息，越暖（红色）越近，越冷（蓝色）越远</span></div><div class="line">cv::<span class="function">Mat <span class="title">Depth2Color</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;depth)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    cv::Mat result(depth.size(), CV_8UC3, cv::Scalar::all(0));</div><div class="line">    <span class="keyword">int</span> tempDepth, depthRed, depthGreen, depthBlue;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.rows; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; result.cols; j++)</div><div class="line">        &#123;</div><div class="line">            tempDepth = <span class="number">255</span> - depth.at&lt;uchar&gt;(i, j);</div><div class="line">            <span class="keyword">if</span>(tempDepth &lt; <span class="number">43</span>)</div><div class="line">            &#123;</div><div class="line">                depthRed = tempDepth * <span class="number">6</span>;</div><div class="line">                depthGreen = <span class="number">0</span>;</div><div class="line">                depthBlue = tempDepth * <span class="number">6</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(tempDepth &gt; <span class="number">42</span> &amp;&amp; tempDepth &lt; <span class="number">85</span>)</div><div class="line">            &#123;</div><div class="line">                depthRed = <span class="number">255</span> - (tempDepth - <span class="number">43</span>) * <span class="number">6</span>;</div><div class="line">                depthGreen = <span class="number">0</span>;</div><div class="line">                depthBlue = <span class="number">255</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(tempDepth &gt; <span class="number">84</span> &amp;&amp; tempDepth &lt; <span class="number">128</span>)</div><div class="line">            &#123;</div><div class="line">                depthRed = <span class="number">0</span>;</div><div class="line">                depthGreen = (tempDepth - <span class="number">85</span>) * <span class="number">6</span>;</div><div class="line">                depthBlue = <span class="number">255</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(tempDepth &gt; <span class="number">127</span> &amp;&amp; tempDepth &lt; <span class="number">169</span>)</div><div class="line">            &#123;</div><div class="line">                depthRed = <span class="number">0</span>;</div><div class="line">                depthGreen = <span class="number">255</span>;</div><div class="line">                depthBlue = <span class="number">255</span> - (tempDepth - <span class="number">128</span>) * <span class="number">6</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(tempDepth &gt; <span class="number">168</span> &amp;&amp; tempDepth &lt; <span class="number">212</span>)</div><div class="line">            &#123;</div><div class="line">                depthRed = (tempDepth - <span class="number">169</span>) * <span class="number">6</span>;</div><div class="line">                depthGreen = <span class="number">255</span>;</div><div class="line">                depthBlue = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(tempDepth &gt; <span class="number">211</span> &amp;&amp; tempDepth &lt; <span class="number">254</span>)</div><div class="line">            &#123;</div><div class="line">                depthRed = <span class="number">255</span>;</div><div class="line">                depthGreen = <span class="number">255</span> - (tempDepth - <span class="number">212</span>) * <span class="number">6</span>;</div><div class="line">                depthBlue = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(tempDepth &gt; <span class="number">253</span>)</div><div class="line">            &#123;</div><div class="line">                depthRed = <span class="number">255</span>;</div><div class="line">                depthGreen = <span class="number">0</span>;</div><div class="line">                depthBlue = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (tempDepth == <span class="number">255</span>)</div><div class="line">            &#123;</div><div class="line">                depthRed = <span class="number">0</span>;</div><div class="line">                depthGreen = <span class="number">0</span>;</div><div class="line">                depthBlue = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            result.at&lt;Vec3b&gt;(i, j)[<span class="number">0</span>] = depthBlue;</div><div class="line">            result.at&lt;Vec3b&gt;(i, j)[<span class="number">1</span>] = depthGreen;</div><div class="line">            result.at&lt;Vec3b&gt;(i, j)[<span class="number">2</span>] = depthRed;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">string</span> filePath = <span class="string">"C:/Users/XXXXXX/Downloads/NTU-Microsoft-Kinect-HandGesture Dataset/Depth"</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; files;  </div><div class="line">    <span class="comment">//读取所有文件  </span></div><div class="line">    <span class="built_in">string</span> format = <span class="string">"*"</span>;  <span class="comment">// 不知道为什么在我电脑读不了特定文件？</span></div><div class="line">    getAllFormatFiles(filePath, format, files);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.size(); i++)    </div><div class="line">    &#123;</div><div class="line">        cv::Mat tempMat = Txt2DepthMat(files[i]);</div><div class="line">        files[i].replace(<span class="number">0</span>, <span class="number">66</span>, <span class="string">"../data"</span>);</div><div class="line">        files[i].replace(files[i].find(<span class="string">".txt"</span>), files[i].length() - <span class="number">1</span>, <span class="string">".png"</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt; files[i] &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">        <span class="built_in">string</span> tempString = files[i].substr(<span class="number">0</span>, files[i].find_last_of(<span class="string">"/"</span>));</div><div class="line">        makeDir(tempString);</div><div class="line">        cv::imwrite(files[i], tempMat);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"File Size: "</span> &lt;&lt; files.size() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">//cv::imshow("test", Depth2Color(Txt2DepthMat("./1.txt")));</span></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　正如前言所说，本文是以前记录过的，一些细节也快忘记，这次重写算是回顾一下吧，这段程序可能也确实只用这么一次，但其中用到了不少C++处理字符串和读写文件等相关知识，而这些知识，在以后有极大的可能会再次用到，因此记录↖(&#94;ω^)↗。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/wangshihui512/article/details/8921924" target="_blank" rel="external">C++文件读写操作（二）逐字符读取文本和逐行读取文本</a>（<a href="http://blog.csdn.net/shihui512/article/category/1397194" target="_blank" rel="external">http://blog.csdn.net/shihui512/article/category/1397194</a> ）</p><p>[2] <a href="http://www.cnblogs.com/MikeZhang/archive/2012/03/24/MySplitFunCPP.html" target="_blank" rel="external">字符串分割(C++)</a>（<a href="http://www.cnblogs.com/MikeZhang/category/345894.html" target="_blank" rel="external">http://www.cnblogs.com/MikeZhang/category/345894.html</a> ）</p><p>[3] <a href="http://blog.csdn.net/adong76/article/details/39432467" target="_blank" rel="external">C++读取文件夹中所有的文件或者是特定后缀的文件</a>（<a href="http://blog.csdn.net/adong76/article/category/1632029" target="_blank" rel="external">http://blog.csdn.net/adong76/article/category/1632029</a> ）</p><p>[4] <a href="http://blog.csdn.net/u012005313/article/details/50688257" target="_blank" rel="external">C/C++ 判断文件夹是否存在以及创建、删除文件夹 windows以及linux通用</a>（<a href="http://blog.csdn.net/u012005313/article/category/5586103" target="_blank" rel="external">http://blog.csdn.net/u012005313/article/category/5586103</a> ）</p><p>[5] <a href="https://stackoverflow.com/questions/236129/the-most-elegant-way-to-iterate-the-words-of-a-string/7408245#7408245" target="_blank" rel="external">Split a string in C++?</a>（<a href="http://stackoverflow.com/questions/236129/split-a-string-in-c" target="_blank" rel="external">http://stackoverflow.com/questions/236129/split-a-string-in-c</a> ）</p><p>[6] <a href="http://blog.csdn.net/zouxy09/article/details/8151044" target="_blank" rel="external">Kinect开发学习笔记之（六）带游戏者ID的深度数据的提取</a>（<a href="http://blog.csdn.net/zouxy09/article/category/1273380" target="_blank" rel="external">http://blog.csdn.net/zouxy09/article/category/1273380</a> ）</p><p>[7] <a href="http://www.pages.drexel.edu/~nk752/depthMapTut.html" target="_blank" rel="external">Depth Map Tutorial</a>（<a href="http://www.pages.drexel.edu/~nk752/depthMapTut.html" target="_blank" rel="external">http://www.pages.drexel.edu/~nk752/depthMapTut.html</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本文是以前做的一个小东西的处理前奏，当时也记录过，现在把它翻出来重新看看。那个东西需要利用深度图，本人当时还没拿到Kinect，就在网上下了一些&lt;a href=&quot;https://drive.google.com/uc?export=download&amp;amp;confirm=QRhv&amp;amp;id=0B_9saHAqGFITODNmNzU0ZjctMjk0Yi00YjI5LWJmZDMtYTdiYTE2YzM5OTQ4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据&lt;/a&gt;（&lt;a href=&quot;http://eeeweba.ntu.edu.sg/computervision/people/home/renzhou/HandGesture.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://eeeweba.ntu.edu.sg/computervision/people/home/renzhou/HandGesture.htm&lt;/a&gt;），该数据集包含了彩色图及对应的深度图，但是该数据集没有以图像形式存储深度值，而是用txt文本以行列形式存储真正的深度值（单位为mm），所以并不能直观的看到深度图像，本人需要把这些深度值从txt文本提取出来并把它以图像的形式呈现出来，由于需求比较特殊，网上没看到现成的解决的方案，所以本人只有用现成的轮子自己做一个了。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="c/cpp" scheme="http://cniter.github.io/tags/c-cpp/"/>
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV中滑动条和鼠标事件响应操作的使用小结</title>
    <link href="http://cniter.github.io/posts/e8b35736.html"/>
    <id>http://cniter.github.io/posts/e8b35736.html</id>
    <published>2017-10-08T09:06:29.000Z</published>
    <updated>2017-12-09T12:57:13.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　既然在<a href="https://cniter.github.io/2017/09/28/%E5%88%A9%E7%94%A8%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/">上一篇</a>中提到了回调函数，本人就干脆把OpenCV中较常使用的两个使用回调函数的函数使用方法也一并记录下来吧。</p><a id="more"></a><h2 id="说明篇"><a href="#说明篇" class="headerlink" title="说明篇"></a>说明篇</h2><p>OpenCV中使用回调函数的两个函数为：</p><ol><li><p><strong>鼠标事件响应操作函数：</strong><code>void cv::setMouseCallback(const string&amp; winname, MouseCallback onMouse, void* userdata = 0);</code></p><p><strong><em>参数浅解：</em></strong></p><blockquote><p><code>const string&amp; winname</code>：窗口名称，对名为winname的窗口执行鼠标事件响应操作；</p><p><code>MouseCallback onMouse</code>：鼠标响应事件回调函数，监听鼠标的点击，移动，松开，判断鼠标的操作类型并做出相应处理；</p><p><code>void* userdata</code>：对应回调函数的可选参数，若使用全局变量可以忽略该参数。</p></blockquote><p><em>对应的回调函数声明为：</em><code>typedef void (*MouseCallback)(int event, int x, int y, int flags, void* userdata);</code></p><p><strong><em>参数浅解：</em></strong></p><blockquote><p><code>int event</code>：鼠标滑动（CV_EVENT_MOUSEMOVE）、左键单击（CV_EVENT_LBUTTONDOWN）、右键单击（CV_EVENT_RBUTTONDOWN ）等10种鼠标点击事件的int型代号；</p><p><code>int x, int y</code>：鼠标位于窗口的（x，y）坐标位置，窗口左上角默认为原点，向右为x正轴，向下为y正轴；</p><p><code>int flags</code>：鼠标左键拖拽（CV_EVENT_FLAG_LBUTTON）、右键拖拽（CV_EVENT_FLAG_RBUTTON）等6种鼠标拖拽事件的int型代号；</p><p><code>void* userdata</code>：回调函数的参数，若使用全局变量可以忽略该参数。</p></blockquote></li><li><p><strong>创建滑动条函数：</strong><code>int cv::createTrackbar(const string&amp; trackbarname, const string&amp; winname, int* value, int count, TrackbarCallback onChange=0, void* userdata=0);</code></p><p><strong><em>参数浅解：</em></strong></p><blockquote><p><code>const string&amp; trackbarname</code>：创建的滑动条名称；</p><p><code>const string&amp; winname</code>：所在窗口名称，对名为winname的窗口添加滑动条；</p><p><code>int* value</code>：滑块的位置，其初始值对应滑块的初始位置；</p><p><code>int count</code>：滑块可达到的最大位置的值，滑块最小位置的值总为0；</p><p><code>TrackbarCallback onChange</code>：滑动条事件回调函数，当滑动条上位置改变的时，则执行该回调函数；</p><p><code>void* userdata</code>：对应回调函数的可选参数，若使用全局变量可以忽略该参数。</p></blockquote><p><em>对应的回调函数声明为：</em><code>typedef void (CV_CDECL *TrackbarCallback)(int pos, void* userdata);</code></p><p><strong><em>参数浅解：</em></strong></p><blockquote><p><code>int pos</code>：滑动条的位置对应的值；</p><p><code>void* userdata</code>：回调函数的参数，若使用全局变量可以忽略该参数。</p></blockquote></li></ol><p><em>*注：本文的函数说明采用的是opencv-2.4.11的函数声明，与opencv-3.2.0的函数声明区别在于<code>string</code>类型，opencv-3.2.0采用的是其自己实现的一个<code>String</code>类。</em></p><h2 id="实例篇"><a href="#实例篇" class="headerlink" title="实例篇"></a>实例篇</h2><p>Show u the code，具体C++实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt; </span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// ---------------- 鼠标事件回调函数 ---------------------------------</span></div><div class="line"><span class="keyword">static</span> cv::Mat src_img;	<span class="comment">// 原始图像全局变量</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mouseCallback</span><span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flags, <span class="keyword">void</span> *)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">bool</span> selected = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">static</span> cv::Point left_top_vertex, right_down_vertex;	<span class="comment">// 左上角顶点和右下角顶点</span></div><div class="line">	<span class="comment">// When the left mouse button is pressed, record its position and save it in corner1  </span></div><div class="line">	<span class="keyword">if</span> (event == CV_EVENT_LBUTTONDOWN)	<span class="comment">// 左键按下</span></div><div class="line">	&#123;</div><div class="line">		left_top_vertex.x = x;</div><div class="line">		left_top_vertex.y = y;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Corner 1 recorded at "</span> &lt;&lt; left_top_vertex &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// When the left mouse button is released, record its position and save it in corner2  </span></div><div class="line">	<span class="keyword">if</span> (event == cv::EVENT_LBUTTONUP)	<span class="comment">// 左键弹起</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// Also check if user selection is bigger than 20 pixels (jut for fun!)  </span></div><div class="line">		<span class="keyword">if</span> (<span class="built_in">abs</span>(x - left_top_vertex.x) &gt; <span class="number">10</span> &amp;&amp; <span class="built_in">abs</span>(y - left_top_vertex.y) &gt; <span class="number">10</span>)</div><div class="line">		&#123;</div><div class="line">			right_down_vertex.x = x;</div><div class="line">			right_down_vertex.y = y;</div><div class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Corner 2 recorded at "</span> &lt;&lt; right_down_vertex &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">			selected = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Please select a bigger region"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// Update the box showing the selected region as the user drags the mouse  </span></div><div class="line">	<span class="keyword">if</span> (flags == CV_EVENT_FLAG_LBUTTON)	<span class="comment">// 左键拖拽</span></div><div class="line">	&#123;</div><div class="line">		cv::Point pt;</div><div class="line">		pt.x = x;</div><div class="line">		pt.y = y;</div><div class="line">		cv::Mat local_img = src_img.clone();</div><div class="line">		rectangle(local_img, left_top_vertex, pt, cv::Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</div><div class="line">		imshow(<span class="string">"Cropping app"</span>, local_img);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// Define ROI and crop it out when both corners have been selected  </span></div><div class="line">	<span class="keyword">if</span> (selected)</div><div class="line">	&#123;</div><div class="line">		cv::Rect box;</div><div class="line">		box.width = <span class="built_in">abs</span>(left_top_vertex.x - right_down_vertex.x);</div><div class="line">		box.height = <span class="built_in">abs</span>(left_top_vertex.y - right_down_vertex.y);</div><div class="line">		box.x = cv::min(left_top_vertex.x, right_down_vertex.x);</div><div class="line">		box.y = cv::min(left_top_vertex.y, right_down_vertex.y);</div><div class="line">		<span class="comment">// Make an image out of just the selected ROI and display it in a new window  </span></div><div class="line">		cv::<span class="function">Mat <span class="title">crop</span><span class="params">(src_img, box)</span></span>;</div><div class="line">		cv::namedWindow(<span class="string">"Crop"</span>);</div><div class="line">		imshow(<span class="string">"Crop"</span>, crop);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ---------- 响应鼠标事件 ------------------------------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMouseCallbackTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	src_img = cv::imread(<span class="string">"../data/lena.jpg"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);</div><div class="line">	cv::namedWindow(<span class="string">"Cropping app"</span>);</div><div class="line">	imshow(<span class="string">"Cropping app"</span>, src_img);</div><div class="line">	<span class="comment">// Set the mouse event callback function  </span></div><div class="line">	cv::setMouseCallback(<span class="string">"Cropping app"</span>, mouseCallback);</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (<span class="keyword">char</span>(cv::waitKey(<span class="number">30</span>)) != <span class="string">'q'</span>) &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// -------------- 滑动条回调函数 ------------------------</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thresholdCallback</span><span class="params">(<span class="keyword">int</span> slider_value, <span class="keyword">void</span>* gray)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">//static_cast&lt;&gt;用于安全转换指针</span></div><div class="line">	cv::Mat *tmp_gray = <span class="keyword">static_cast</span>&lt;cv::Mat *&gt;(gray);</div><div class="line">	cv::Mat tmp = *tmp_gray;</div><div class="line">	cv::Mat dst;</div><div class="line">	threshold(tmp, dst, slider_value, <span class="number">255</span>, CV_THRESH_BINARY);</div><div class="line"></div><div class="line">	<span class="comment">//显示效果图</span></div><div class="line">	cv::imshow(<span class="string">"Trackbar Demo"</span>, dst);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ------------ 创建滑动条 ----------------------------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createTrackbarTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat src_gray = cv::imread(<span class="string">"../data/lena.jpg"</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">const</span> <span class="keyword">int</span> max_value = <span class="number">255</span>;	<span class="comment">//滑动条的最大值</span></div><div class="line">	<span class="keyword">int</span> slider_value = <span class="number">0</span>;	<span class="comment">// 滑动条的初始值</span></div><div class="line"></div><div class="line">	<span class="keyword">char</span> *window_name = <span class="string">"Trackbar Demo"</span>;</div><div class="line">	<span class="keyword">char</span> *trackbar_name = <span class="string">"Value:"</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 创建一个窗口显示图片</span></div><div class="line">	cv::namedWindow(window_name, CV_WINDOW_AUTOSIZE);</div><div class="line">	imshow(window_name, src_gray);</div><div class="line"></div><div class="line">	<span class="comment">// 创建滑动条来控制阈值</span></div><div class="line">	createTrackbar(trackbar_name, window_name, &amp;slider_value, max_value, thresholdCallback, &amp;src_gray);</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (<span class="keyword">char</span>(cv::waitKey(<span class="number">30</span>)) != <span class="string">'q'</span>) &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ------- 将两个函数在同一个窗口执行 ------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">callbackTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	src_img = cv::imread(<span class="string">"../data/lena.jpg"</span>, <span class="number">0</span>);</div><div class="line">	<span class="keyword">const</span> <span class="keyword">int</span> max_value = <span class="number">255</span>;	<span class="comment">//滑动条的最大值</span></div><div class="line">	<span class="keyword">int</span> slider_value = <span class="number">0</span>;	<span class="comment">// 滑动条的初始值</span></div><div class="line"></div><div class="line">	<span class="keyword">char</span> *window_name = <span class="string">"Callback Demo"</span>;</div><div class="line">	<span class="keyword">char</span> *trackbar_name = <span class="string">"Value:"</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 创建一个窗口显示图片</span></div><div class="line">	cv::namedWindow(window_name, CV_WINDOW_AUTOSIZE);</div><div class="line">	imshow(window_name, src_img);</div><div class="line"></div><div class="line">	<span class="comment">// 创建滑动条来控制阈值</span></div><div class="line">	createTrackbar(trackbar_name, window_name, &amp;slider_value, max_value, thresholdCallback, &amp;src_img);</div><div class="line"></div><div class="line">	<span class="comment">// 鼠标事件响应</span></div><div class="line">	cv::setMouseCallback(window_name, mouseCallback);</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (<span class="keyword">char</span>(cv::waitKey(<span class="number">30</span>)) != <span class="string">'q'</span>) &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">//setMouseCallbackTest();</span></div><div class="line">	<span class="comment">//createTrackbarTest();</span></div><div class="line">	callbackTest();</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (<span class="keyword">char</span>(cv::waitKey(<span class="number">30</span>)) != <span class="string">'q'</span>) &#123;&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　经本人测试，上面示例程序在opencv-2.4.11和opencv-3.2.0下都能完美运行。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本来这两个函数都已经写（chao）好了，但为了更好的体现示例程序，又稍作了修改：添加鼠标左键拖拽事件及不使用全局变量等。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://www.cnblogs.com/lidabo/p/3437587.html" target="_blank" rel="external">opencv2 使用鼠标绘制矩形并截取和保存矩形区域图像</a>（<a href="http://www.cnblogs.com/lidabo/category/516776.html" target="_blank" rel="external">http://www.cnblogs.com/lidabo/category/516776.html</a> ）</p><p>[2] <a href="http://blog.csdn.net/weixin_35738542/article/details/52071963" target="_blank" rel="external">Opencv中添加进度条及回调函数</a>（<a href="http://blog.csdn.net/weixin_35738542/article/category/6337413" target="_blank" rel="external">http://blog.csdn.net/weixin_35738542/article/category/6337413</a> ）</p><p>[3] <a href="http://blog.csdn.net/u014291399/article/details/47811905" target="_blank" rel="external">OpenCV2中滑动条（Trackbar）回调函数的小发现</a>（<a href="http://blog.csdn.net/u014291399/article/category/3097955" target="_blank" rel="external">http://blog.csdn.net/u014291399/article/category/3097955</a> ）</p><p>[4] <a href="http://blog.csdn.net/wangyaninglm/article/details/42032825" target="_blank" rel="external">OpenCV GUI基本操作，回调函数，进度条，裁剪图像等</a>（<a href="http://blog.csdn.net/wangyaninglm/article/category/1653815" target="_blank" rel="external">http://blog.csdn.net/wangyaninglm/article/category/1653815</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　既然在&lt;a href=&quot;https://cniter.github.io/2017/09/28/%E5%88%A9%E7%94%A8%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/&quot;&gt;上一篇&lt;/a&gt;中提到了回调函数，本人就干脆把OpenCV中较常使用的两个使用回调函数的函数使用方法也一并记录下来吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>利用回调函数计算函数运行时间</title>
    <link href="http://cniter.github.io/posts/b6fb6109.html"/>
    <id>http://cniter.github.io/posts/b6fb6109.html</id>
    <published>2017-09-28T07:36:16.000Z</published>
    <updated>2017-12-09T12:57:13.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　曾有一段时间在写一个小程序，由于其对运行时间有要求，所以每写一段代码就要测试一下运行时间，如果超出就需要优化一下代码或换一种方法和算法。但是每次都需要插在某两个位置插两段代码感觉有点烦，也有点浪费时间，毕竟浪费时间就是浪费生命，本着保尔柯察金关于生命的言论，本人不愿虚度年华，所以只得寻找一个方便简洁的方法计算运行时间（说了这么多，说到底其实就是懒吧*/ω\*）。后面就想到了回调函数，将想要计算运行时间的代码段放入一个函数中，并将其作为回调函数，用事先写好的计算时间函数调用它，从而方便计算该代码段的运行时间。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Show u the code，具体C++实现代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CALLED_ printf(<span class="meta-string">"The function %s"</span>, __FUNCTION__);</span></div><div class="line"></div><div class="line"><span class="comment">// 使用回调函数计算一段代码执行时间</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">computeTotalTime</span><span class="params">(<span class="keyword">void</span>(*processingCallback)</span><span class="params">()</span> </span>= <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">clock_t</span> start_time = clock();</div><div class="line">	processingCallback();</div><div class="line">	<span class="keyword">clock_t</span> end_time = clock();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">" takes: %fs.\n"</span>, (<span class="keyword">double</span>)(end_time - start_time) / CLOCKS_PER_SEC);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</div><div class="line">	&#125;</div><div class="line">	_CALLED_;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	computeTotalTime(test);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本来是想在网上找一个的，谁知道并没有找到，就只有自己动手实现一个了╮(╯_╰)╭。后面使用了一下该函数，发现好像并没有提高生产力o(╯□╰)o，所以就没人放在网上？-_-!，不过确实从实现过程中学到了一些东西↖(&#94;ω^)↗。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://www.cnblogs.com/danshui/archive/2012/01/02/2310114.html" target="_blank" rel="external">C/C++之回调函数</a>（<a href="http://www.cnblogs.com/danshui/category/345046.html" target="_blank" rel="external">http://www.cnblogs.com/danshui/category/345046.html</a> ）</p><p>[2] <a href="http://blog.csdn.net/coder_xia/article/details/6566708" target="_blank" rel="external">c/c++在windows下获取时间和计算时间差的几种方法总结</a>（<a href="http://blog.csdn.net/coder_xia/article/category/837943" target="_blank" rel="external">http://blog.csdn.net/coder_xia/article/category/837943</a> ）</p><p>[3] <a href="http://www.cnblogs.com/steady/archive/2011/03/08/1977029.html" target="_blank" rel="external">(转)用宏获取函数名</a>（<a href="http://www.cnblogs.com/steady/category/264974.html" target="_blank" rel="external">http://www.cnblogs.com/steady/category/264974.html</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　曾有一段时间在写一个小程序，由于其对运行时间有要求，所以每写一段代码就要测试一下运行时间，如果超出就需要优化一下代码或换一种方法和算法。但是每次都需要插在某两个位置插两段代码感觉有点烦，也有点浪费时间，毕竟浪费时间就是浪费生命，本着保尔柯察金关于生命的言论，本人不愿虚度年华，所以只得寻找一个方便简洁的方法计算运行时间（说了这么多，说到底其实就是懒吧*/ω\*）。后面就想到了回调函数，将想要计算运行时间的代码段放入一个函数中，并将其作为回调函数，用事先写好的计算时间函数调用它，从而方便计算该代码段的运行时间。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="c/cpp" scheme="http://cniter.github.io/tags/c-cpp/"/>
    
  </entry>
  
  <entry>
    <title>论如何科学的上网</title>
    <link href="http://cniter.github.io/posts/df943c4f.html"/>
    <id>http://cniter.github.io/posts/df943c4f.html</id>
    <published>2017-09-22T07:36:43.000Z</published>
    <updated>2017-12-23T11:30:01.518Z</updated>
    
    <content type="html"><![CDATA[<p>科学式上网推荐组合：Chrome，Proxy SwitchyOmega，Lantern等代理工具。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　所谓的科学式上网，懂的自然懂，本人也就不做过多解释了。本来一直在用别人免费提供的pac代理，但最近可能别人关掉了，上不了google了，就只能另寻他路了。所谓的另寻他路也就是尝试云端框架网站站长<strong><em>枂下</em></strong>提供的另外几种科学式上网攻略。本文只是对<strong><em>枂下</em></strong>站长的攻略做一下实验记录，若想看原滋原味的攻略，还请移步<a href="https://cloudfra.com/" target="_blank" rel="external">云端框架</a>。</p><a id="more"></a><h2 id="科学的上网方法"><a href="#科学的上网方法" class="headerlink" title="科学的上网方法"></a>科学的上网方法</h2><p>　　尽量使用Chrome进行科学式上网，因为其有一个代理管理插件Proxy SwitchyOmega，该插件称之为代理切换神器也不为过，网上大量的教程和配置文件也是基于该神器做的。使用Proxy SwitchyOmega需要进行配置，这对初学者有一定的难度，这里本人推荐直接使用站长<strong><em>枂下</em></strong>提供的配置文件，至于SwitchyOmega的配置文件可以去站长的<a href="https://cloudfra.com/" target="_blank" rel="external">云端框架</a>网站上去下，也可以联系本人。至于代理工具请看下文，本人目前也只尝试过使用以下几种工具。</p><h3 id="lantern"><a href="#lantern" class="headerlink" title="lantern"></a>lantern</h3><p>　　其实本人最先尝试的工具是XX-NET，但是其配置起来稍显繁琐，而且在第一步的时候必须处在科学式上网环境，而Lantern就比较简单了，只要装上之后再稍微动动手脚就可以了，所以就把lantern写在第一位了。从站长<strong><em>枂下</em></strong>那下载【蓝】灯电脑破解版压缩包，不过本人觉得应该随便在哪里下载个原版lantern-2.2.5安装都可以，只要后续的破解方法一样即可。</p><p>　　具体破解方法为：主要是令lantern一直保持在2.2.5版本不变。但是一般来说lantern在安装之后会自动更新到最新版（本人在两台电脑上都安装过lantern，其中一台安装完之后打开lantern安装文件夹发现其已更新，而另一台却没有更新，这就有点玄学了-_-!），至于判断lantern有没有更新的办法是：首先进入lantern的安装文件夹：<code>C:\Users\XXX\AppData\Roaming\Lantern</code>（将XXX改成自己的用户名），1、看lantern.exe文件的修改日期，如果还是2016年的，就说明其还没更新；2、显示隐藏文件，看有没有.lantern.exe.old文件，如果没有，则也还没更新。如果已经更新了，参考站长<strong><em>枂下</em></strong>的说法：</p><blockquote><p>删除lantern.exe文件，修改.lantern.exe.old为lantern.exe</p></blockquote><p>这样就又可以回退至lantern-2.2.5版。如果没更新的话就不用进行删除回退这一步，直接进行下一步。</p><p>　　下一步为修改lantern-2.2.5.yaml文件中的更新路径<code>updateserverurl</code>，使lantern永远不再更新，一直维持在2.2.5版本不变。具体更改方式为：</p><blockquote><p>将其中的</p><p><code>updateserverurl: https://update.getlantern.org</code></p><p>修改为</p><p><code>updateserverurl: https://pic.black1ce.com</code></p></blockquote><p>修改完之后保存退出。这里本人觉得可以随便将其修改成其它路径即可，毕竟只是让其不更新而已，这个路径应该除了更新就没有其它作用了，这纯属本人拙劣的猜测，有（ai）兴（gao）趣（shi）的童靴可以试试:-P。</p><p>　　原本以为到这一步就完成了，但是<strong><em>枂下</em></strong>站长后来又补发了一步，就是上面几步只是让lantern不再更新，而500M流量之后限速的问题仍然存在（本人目前还没超过500M，所以不知道这个问题，但抱着有备无患的心态先把<strong><em>枂下</em></strong>站长的攻略记一下O(∩_∩)O~），所以接下来才是上正菜，破解“限制500M流量”问题的具体方法为：当使用lantern流量超过500M时，打开lantern的安装目录，打开lantern-2.2.5.yaml文件，</p><blockquote><p>修改其中第九行的设备号，随意更换一个数字或者字母即可。</p></blockquote><p>按<strong><em>枂下</em></strong>站长的说法是8位随机字母数字大小写均可，只是为方便起见推荐只改动某位即可。</p><p>eg：本人目前第9行为：<code>deviceid: Gu25Sfoz</code>，一旦500M流量用完了，本人就只需要将其修改为<code>deviceid: Gu25Sfoa</code>即可。</p><p>到这一步lantern的破解算是基本完成了吧，如果<strong><em>枂下</em></strong>站长有新的更新且被本人看到的话再进行实验更新吧。</p><hr><h3 id="XX-NET"><a href="#XX-NET" class="headerlink" title="XX-NET"></a>XX-NET</h3><p>　　该工具应该是本人尝试配置的首款代理工具，不得不说其配置和lantern相比实在是太复杂了，而且其中有一步还必须处在科学式网络环境中，本人还是借助别人的VPN上的（当时还没用lantern，所以没用其500M免费不限速的流量~~o(&gt;_&lt;)o ~~）。本人经过实测XX-NET无法在Firefox中用google搜索，一用google搜就会报错：</p><blockquote><font size="7" face="黑体"><strong>您的连接并不安全</strong></font><p>www.google.com 的网站管理员未正确配置网站。为避免您的信息被窃，Firefox 没有与该网站建立连接。</p><p>此网站采用了 HTTP 严格传输安全（HSTS）机制，要求 Firefox 只能与其建立安全连接。正因如此，您也不能将此证书加入例外列表。</p><blockquote><p>www.google.com 使用了无效的安全证书。 该证书因为其颁发者证书未知而不被信任。 该服务器可能未发送相应的中间证书。 可能需要导入一个额外的根证书。 错误代码: SEC_ERROR_UNKNOWN_ISSUER</p><blockquote><p><a href="https://www.google.com/search?q=test&amp;ie=utf-8&amp;oe=utf-8" target="_blank" rel="external">https://www.google.com/search?q=test&amp;ie=utf-8&amp;oe=utf-8</a></p><p>对等端的证书颁发者不受认可。</p><p>HTTP 严格传输安全（HSTS）：false<br>HTTP 公钥钉扎：true</p><p>证书链：</p><p>—–BEGIN CERTIFICATE—–<br>MIIDkzCCAnugAwIBAgIQSu4RvcIwnqiEQE6Z68FlaDANBgkqhkiG9w0BAQsFADBz<br>MQswCQYDVQQGEwJDTjERMA8GA1UECAwISW50ZXJuZXQxDzANBgNVBAcMBkNlcm5l<br>dDEQMA4GA1UECgwHR29BZ2VudDEVMBMGA1UECwwMR29BZ2VudCBSb290MRcwFQYD<br>VQQDDA5Hb0FnZW50IFhYLU5ldDAeFw0xNzA5MTYxNDIzMjRaFw0yNzA5MTQxNDMz<br>MjRaMHgxCzAJBgNVBAYTAkNOMREwDwYDVQQIDAhJbnRlcm5ldDEPMA0GA1UEBwwG<br>Q2VybmV0MRcwFQYDVQQLDA5Hb0FnZW50IEJyYW5jaDEVMBMGA1UEAwwMKi5nb29n<br>bGUuY29tMRUwEwYDVQQKDAwqLmdvb2dsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUA<br>A4IBDwAwggEKAoIBAQDL3K1OgwalKOJPtO4urpAiu+lioGNax/EIaYR1D2kH66AJ<br>lpal0pYFhXF6MOYCUNfpZIqP5qAQs7JGuRmFdo7rWaLHZ+3S+TlIHdZkoLvyYBcX<br>ENVBcLQvZ7IL7DDUZObK/R7OOKz82dEoITQnT+q/lecR9wQ7QNdNVNqn0xS0NPt7<br>bS76irMxkJcO2q7Lu4R56ImCox/G7dUEepjL0Po516l6fLKG3qi5org2z6ap0yl2<br>Etu8cRfqiqaqhO0HI1Twz+Rbp/8KUdUBgnNkjcod83HE+jJKxIUDmn18+l7J8sBi<br>a0JvWSIYy2ccFXoR8L4lfvIa8PhTuMmpxyDkwDdPAgMBAAGjHjAcMBoGA1UdEQEB<br>/wQQMA6CDCouZ29vZ2xlLmNvbTANBgkqhkiG9w0BAQsFAAOCAQEADiM6yWCaGNLn<br>ggirjN0b34j5JmjgYYx3bRaKDe4We2emjlLsdskBo2ztkd/tPBfUa7DWExgFPvVq<br>B2FeEf85Zj72kMmc2JikJBtPF1qK9fa4O1gST4VE0xIF99zGrgkDhGaYd1ocElWS<br>qfBNQfzwsO+nl2OQf99ATMqMSCGacN7z+LJBLn65de+ODzYUkIHzhU5/xJMian3y<br>fQzNFCAgK8OMf16excqRUcX8zfGPfvtAafDrdOYEXcGayLIvt4tGr8T+tii+MtCR<br>O5hXK8/ABMLGI74zgLYloVFjJv21VsLrNCvvD43T5E3c+8d1MENozdEnsyzWkTkp<br>knP4aEiLOQ==<br>—–END CERTIFICATE—–</p></blockquote></blockquote></blockquote><p>本人不知道为什么(+﹏+)~。所以为了能正常使用科学式网络，还是老老实实的用Chrome吧，何况其还有Switchyomega神器，并且建议把Chrome设置为默认浏览器。具体配置流程如下：</p><p>　　从<strong><em>枂下</em></strong>站长那下载XX-NET（本人其实最先是直接在GitHub上下载最新的XX-NET，但本人由于在Firefox上尝试失败了，当时也没在Chrome上尝试，以为最新版XX-NET有问题，后来用上<strong><em>枂下</em></strong>站长那下的XX-NET在Chrome上试了下可以，而Firefox不行，就知道可能是Firefox的问题，而既然已经能用了，本人也没用最新的XX-NET在Chrome上尝试了），直接解压到某个文件夹，然后将XX-Net-3.3.6文件夹重命名为XX-Net，即去掉末尾的版本号，据<strong><em>枂下</em></strong>站长说法是为了减少后续XX-NET出错（本人这里老老实实的照<strong><em>枂下</em></strong>站长说的做了，所以也不知道如果没去掉版本号会有什么后果）。接着以管理员身份运行XX-Net目录下的start.vbs文件（这里右键是没有“<strong>以管理员身份运行</strong>”选项的，要想以管理员身份运行就只有使用Windows命令行了，具体做法就是以管理员身份运行“<strong>命令提示符</strong>”，再在其中运行start.vbs文件即可），运行成功后将弹出</p><blockquote><p>已经导入GoAgent证书,请重启浏览器.</p></blockquote><p>点击确定即可。再次启动默认（Chrome）浏览器，将打开127.0.0.1:8085页面，即为XX-NET的配置界面。将看到GAEProxy状态信息（可能是由于google取消了公共APPID，所以本人看到的不是“<strong>您正在使用公共APPID，….</strong>”这条消息，而是另外一条消息（具体什么消息本人忘记了o(╯□╰)o）），打开显示详细信息（其实也没用，本人并看不懂这么多-_-|||），先放这里吧，部分信息以后再说，先进入正式配置步骤。</p><ol><li>首先点击左边的“<strong>高级</strong>”选项，据<strong><em>枂下</em></strong>站长说，将自动调整扫描线程数关掉，最大扫描线程数设为200，点击提交（可能这样连接速度更快一些）。本人这里这里没有照做，而是保持默认设置，本人只是要求能上就可以了，对速度要求可以稍微放松一点（或许以后会调成站长推荐的配置）。</li><li>接下来点击“<strong>部署服务端</strong>”选项，填写AppID，点击“<strong>开始部署</strong>”。但是这一步，本人并没有AppID，所以只能上google申请，这样最麻烦的一步就来了。照着<strong><em>枂下</em></strong>站长的指引，本人一步步的申请了AppID。具体申请步骤如下（这一步需要登录google账号，必须处于科学式网络环境）：<ol><li>点击<a href="https://appengine.google.com" target="_blank" rel="external">打开Appid申请页面</a>，登录google账号，创建项目，并在新建项目中修改项目ID（这就是第一个AppID），为方便，建议直接以“项目名-00”的方式按顺序命名AppID，创建成功后继续点击“<strong>Google Cloud Platform</strong>”旁的一个小三角，点击弹框的“<strong>+</strong>”，按上述方式进行创建新的AppID，如此重复，本人总共创建10个AppID，10个之后会提示配额已用完，硬是要创建只会覆盖掉第一个AppID。</li><li>接下来就是需要选择语言和地区，只有为每个AppID选择语言和地区之后，该AppID才会生效。语言和地区的选择界面可以从“<strong>App Engine</strong>”界面中进入，也可以直接在添加AppID界面的那个弹框中点击相应的AppID进入，当然如果是第一个AppID选择语言可以直接点击界面上的“<strong>选择一种语言</strong>” 。语言选择Python，地区选择亚洲（asia-northeast1），选错了后果自负（当然可以覆盖掉该AppID重新设置）。其实可以照<strong><em>枂下</em></strong>站长那样设置完第一个AppID的语言和地区之后直接修改浏览器的地址栏的url以快速设置AppID的语言和地区。具体修改方法为：将url地址末尾的project参数的值改为你想要设置的下一个AppID，eg:本人当前AppID为test-00，对应的浏览器url地址末尾的参数为<code>lang=python&amp;project=test-00</code>，本人想设置的下一个AppID为test-01，则只需将其修改为<code>lang=python&amp;project=test-01</code>回车即可快速设置test-01的语言和地区。如此重复，就可以设置完全部的AppID语言和地区。设置完之后，这些AppID就能进行部署了（据说每个AppID每天有1G的流量可以使用，并于每天下午三点更新，也就是本人每天有10G流量，一般是够用了:-D）。</li></ol></li><li>将上文申请并设置完成的AppID放入“<strong>GAE AppID</strong>”文本框中，多个AppID可以按这样的格式放入：<code>test-01|test-02|test-03</code>，两个AppID以<code>|</code>分隔即可。点击“<strong>开始部署</strong>”，会弹出一个登录google账号的标签页，登录并允许即可，等待2~5分钟，可发现日志页面出现<code>Done!</code>和<code>Deploy 10 appid successed.</code>等字样即表示服务端部署成功。</li><li>点击“<strong>部署</strong>”选项，将上面部署服务端的AppID以相同格式输入“<strong>GAE AppID</strong>”文本框中，点击“<strong>保存</strong>”即可。保存完之后，即可在状态信息界面显示详细信息中Appid发现当前工作AppID就是部署的AppID，至于那个配置下的监听代理就是设置代理的地址和端口。</li></ol><p>这样XX-NET就算是配置完成了，至于<strong><em>枂下</em></strong>站长说的扫描ip，本人就没做实验了，因为这样配置完就可以科学式上网了。</p><hr><p>　　以上代理工具配置完成后，即可在Chrome中畅游Internet了，但是正确的科学式上网姿势应该是：国内的网站走本地连接，而国外被屏蔽的网站才走代理。这就需要Proxy SwitchyOmega这款插件了，它能按照一定的规则自动选择走本地还是走代理，这样既不会浪费流量，也能使国内的网站联网速度不受影响。导入前文推荐的配置文件后，就可选择对应的代理方式。这里当然是选择自动切换，至于虚拟切换是选择<strong>Lantern for 8787</strong>还是<strong>XXNET for GAE</strong>就随便个人的喜好了（在走代理的时候别忘了把相应的代理工具开启）；如果直接选择其中一种代理方式就相当于全局代理，这也就失去这款插件的作用，只有自动切换加上虚拟切换才能充分发挥这款神器的真正作用。</p><h2 id="匿名网络"><a href="#匿名网络" class="headerlink" title="匿名网络"></a>匿名网络</h2><p>　　要想使用匿名网络，当然少不了专用的浏览器：<a href="https://www.torproject.org/" target="_blank" rel="external">Tor Browser</a>，下载并安装（下载时需要身处科学式网络环境，安装时最好改变一下目录，而且路径中最好不要有中文）。接下来就是配置了Tor网络了。具体配置流程如下：</p><p>　　首先，它问直接连接Tor网络还是配置网桥或代理，这里当然是选择<strong>配置</strong>；其次它问互联网服务提供商(ISP)是否对Tor网络连接进行了封锁或审查，这里选<strong>否</strong>，据<strong><em>枂下</em></strong>站长所说因为国内网桥大部分已失效，连接网桥没有意义还会拖慢速度；然后它问是否本地代理访问互联网，这里当然选择<strong>是</strong>；最后填写本地代理配置，这里需要注意，<strong><em>枂下</em></strong>站长提供的部分代理配置是：</p><blockquote><p>SSR/SS Socks5//127.0.0.1 : 1080</p><p>Seed HTTP//127.0.0.1 : 1080</p><p>Lantern Socks5//127.0.0.1 : 8287（2系列），三系列的在Lantern设置页面查看</p><p>Psiphon 可以在配置页面自定义</p></blockquote><p>　　其中经本人实测，上面Lantern的代理配置是连接不上的，本人后来参考SwitchyOmega配置文件中Lantern的代理为HTTP//127.0.0.1 : 8787，经尝试如此配置可以连接Tor网络，所以Lantern的正确配置应为：</p><blockquote><p>Lantern HTTP//127.0.0.1 : 8787（2系列），三系列的在Lantern设置页面查看</p></blockquote><p>设置完成后等待片刻就能连上Tor网络了，最好就保持原来的<em>DuckDuckGo</em>搜索引擎，不要更改，接下来就可随心所欲的畅游Internet了。</p><p>　　至于想访问暗网，可以参考<a href="https://github.com/ckjbug/Hacking/blob/master/%E6%95%B4%E7%90%86%E7%9A%84%E6%9A%97%E7%BD%91%E7%BD%91%E5%9D%80Tor.txt" target="_blank" rel="external">Hacking/整理的暗网网址Tor.txt</a>和<a href="https://sites.google.com/site/howtoaccessthedeepnet/working-links-to-the-deep-web" target="_blank" rel="external">Working Links to the Deep Web</a>或者直接用站长<strong><em>枂下</em></strong>给的网址：<code>torlinkbgs6aabns.onion</code>和<code>xmh57jrzrnw6insl.onion</code>。</p><p>据<strong><em>枂下</em></strong>站长回答：</p><blockquote><p>XX-Net可以作tor的前置代理吗？不行的，xx-net是假http协议</p></blockquote><p>所以XX-NET不能用作Tor的代理配置。</p><p>　　最后再简要记录一下Chrome调用Tor Browser的代理吧。本人没有像<strong><em>枂下</em></strong>站长那样用命令行去实验，只是享受了一下ta的试验成果（O(∩_∩)O谢谢）。总而言之，还是利用SwitchyOmega，代理方式选择<strong>Tor for 9150</strong>，就可以在Chrome中调用Tor Browser的代理，畅游Internet了。</p><hr><p><strong><em>更新于：2017-11-27</em></strong></p><p>　　时久达期间及之后，lantern的那种破解方式从时灵时不灵，到完全失效，而XX-NET则一开始就失效了，这见证了Google和GFW的斗智斗勇（๑乛◡乛๑），但很明显，google失败了，事实证明没有GFW封不了的，只是看它想不想封(๑•ั็ω•็ั๑)。至于lantern和XX-Net的复活方式请移步<strong><em>枂下</em></strong>站长的网站，本人这里就不再赘述了。<strong>这里需要更新的一点是：</strong>Tor的网桥配置采用“<strong>meet-amazon</strong>”（亚马逊的云计算平台）或者“<strong>meet-azure</strong>”（微软的云计算平台）传输也能实现科学式上网，但速度很慢，仅能浏览网页而已，可以当做备选临时用用。</p><hr><p><strong><em>更新于2017-12-24：</em></strong>今天使用了下<a href="https://psiphon.ca/zh/index.html" target="_blank" rel="external">赛风（Psiphon）</a>，其操作完全傻瓜式，简直不要太好用，而且为单个绿色文件，携带也方便，用的时候只要设置一下端口就行。不出意外的话，妈妈再也不用担心本人搞科研了（؏؏☝ᖗ乛◡乛ᖘ☝؏؏）。</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　最后的匿名网络是本人弄着好玩的，像暗网这种东西本人这种遵纪守法的好公民才不会访问呢(ಡωಡ)。等以后时机到了再去买个国外VPS自己搭建一个科学式上网环境吧。最后感谢<strong><em>枂下</em></strong>站长的无私分享。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>　　原本还以为本人搭建的Hexo+GitHub个人博客站点还是个深网，没想到搞完科学式上网后用google搜索竟然能搜到，虽然本人没做什么，但google仍然能搜到，google的蜘蛛还挺厉害的，不过如果百度的蜘蛛没被GitHub屏蔽的话百度可能也能搜到（从某些原因上来说，GitHub把百度屏蔽掉也好O(∩_∩)O~）。既然已经被google收录了，本人也就不去搞那个站点地图了，等以后想搞SEO了再去做吧。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://cloudfra.com/switchyomega-chrome-firefox.html" target="_blank" rel="external">Switchyomega超详细教程之Chrome与Firefox版本</a></p><p>[2] <a href="https://cloudfra.com/lantern-windows.html" target="_blank" rel="external">【蓝】灯电脑破解版之2系列禁止自动升级最终办法</a></p><p>[3] <a href="https://cloudfra.com/xx-net-important.html" target="_blank" rel="external">XX-NET史上最详细完整教程</a></p><p>[4] <a href="https://cloudfra.com/xx-net-appid-1.html" target="_blank" rel="external">XX-NET史上最详细完整教程之第一部分：Appid创建部分</a></p><p>[5] <a href="https://cloudfra.com/tor-browser-windows.html" target="_blank" rel="external">Tor Browser在国内Windows平台下的超详细教程</a></p><p>[6] <a href="https://cloudfra.com/tor-browser-chrome.html" target="_blank" rel="external">Chrome等其他程序如何完美调用Tor Browser的代理来上网</a></p><p>[7] <a href="https://program-think.blogspot.com/2014/10/gfw-tor-meek.html" target="_blank" rel="external">“如何翻墙”系列：TOR 已复活——meek 流量混淆插件的安装、优化、原理</a>（<a href="https://program-think.blogspot.com/search/label/IT" target="_blank" rel="external">https://program-think.blogspot.com/search/label/IT</a> ）</p><p>[8] <a href="https://program-think.blogspot.com/2009/05/how-to-break-through-gfw.html" target="_blank" rel="external">如何翻墙？——写在 BlogSpot 被封之后 {2015-08-28}</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;科学式上网推荐组合：Chrome，Proxy SwitchyOmega，Lantern等代理工具。&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　所谓的科学式上网，懂的自然懂，本人也就不做过多解释了。本来一直在用别人免费提供的pac代理，但最近可能别人关掉了，上不了google了，就只能另寻他路了。所谓的另寻他路也就是尝试云端框架网站站长&lt;strong&gt;&lt;em&gt;枂下&lt;/em&gt;&lt;/strong&gt;提供的另外几种科学式上网攻略。本文只是对&lt;strong&gt;&lt;em&gt;枂下&lt;/em&gt;&lt;/strong&gt;站长的攻略做一下实验记录，若想看原滋原味的攻略，还请移步&lt;a href=&quot;https://cloudfra.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云端框架&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
      <category term="gfw" scheme="http://cniter.github.io/tags/gfw/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的SPFK主题修改小记</title>
    <link href="http://cniter.github.io/posts/b1e9411b.html"/>
    <id>http://cniter.github.io/posts/b1e9411b.html</id>
    <published>2017-09-16T10:26:23.000Z</published>
    <updated>2017-12-28T15:05:50.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本人一直在对Hexo的SPFK主题进行持续修改以符合本人自己的需求，在修改当中也会遇到一些小问题，以防遇到重复问题，特此记录所遇小问题，至于大问题可能会另外开篇。</p><a id="more"></a><h2 id="修改篇"><a href="#修改篇" class="headerlink" title="修改篇"></a>修改篇</h2><h3 id="1、修改aboutme排版问题"><a href="#1、修改aboutme排版问题" class="headerlink" title="1、修改aboutme排版问题"></a><font color="#FA8072">1、修改<strong>aboutme</strong>排版问题</font></h3><p><strong><em>修改日期：2017-09-16</em></strong></p><p><strong>需求描述：</strong>本人为了使<strong>aboutme</strong>排版好看一点，使“<strong>关于我</strong>”的内容更有段落感，本人尝试在主题配置文件中aboutme对象的内容添加各种换行转义符号均于事无补，如<code>\n</code>、<code>\r\n</code>、<code>&amp;#13;</code>、<code>&amp;#10;</code>、<code>&lt;br /&gt;</code>等，站点不仅不会换行，还会直接将转义符号都显示出来(╯﹏╰）。</p><p><strong>解决办法：</strong>既然本人基本把所有的换行方法都试过了，还没有任何作用，那就只能是问题出在其它地方了。本人首先找到显示aboutme内容的地方，其位于主题文件夹下<code>\layout\_partial\left-col.ejs</code>，显示aboutme内容的代码为<code>&lt;div id=&quot;js-aboutme&quot;&gt;&lt;%=theme.aboutme%&gt;&lt;/div&gt;</code>，查阅相关资料，具体为<a href="https://cnodejs.org/topic/5711aec2238ae0ac1e3a6a26" target="_blank" rel="external">与大家分享ejs源码阅读心得</a>，其中有这样一段话：</p><blockquote><h><strong>关于ejs模板的五种模式对应几种指令</strong></h><p><code>ejs</code>主要提供了如下几种指令:</p><ul><li><code>&lt;%</code>, 该指令主要通过js中的<code>eval</code>来执行js代码, 如上模板代码<code>&lt;% [1,2].forEach(function(v){ %&gt;</code>将通过<code>eval</code>编译成<code>; [1,2].forEach(function(v){</code>即直接可执行的js代码, 并且不会存放到<code>__output</code>函数中输出.</li><li><strong><code>&lt;%=</code>, 该指令主要用于输出变量内容, 如上模板代码<code>&lt;%= v %&gt;</code>将通过<code>escape</code>函数编译成<code>__append(escape(v))</code>, 可以看到该指令用于输出变量内容, 最后将通过<code>__output</code>输出内容.</strong></li><li><strong><code>&lt;%-</code>, 该指令与<code>&lt;%=</code>区别是, <code>&lt;%=</code>指令使用<code>escape</code>函数来对特殊字符进行编码, 如将<code>&gt;</code>转为<code>%3E</code>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/escape" target="_blank" rel="external">查看关于escape函数</a>.</strong></li><li><code>&lt;%#</code>, 该指令主要用于模板内注释, 既不会执行也不会输出.</li><li><code>&lt;%%</code>, 主要用于输出字面值<code>%</code>.</li></ul><p>关于以上各个指令对应的解析, 可参考<code>ejs</code>源码根目录<code>lib/ejs.js</code>文件中的<code>scanLine</code>函数.</p></blockquote><p>从中可得知<code>&lt;%=</code>指令会将变量内容中一些特殊字符先转义，再原封不动的输出，所以本人无论怎么修改主题配置文件中aboutme对象的值，其输出内容都会是原封不动的aboutme对象的值。为了让其输出内容可以有相应的特殊格式，就不能让其转义，只能用<code>&lt;%-</code>指令，将其修改为<code>&lt;div id=&quot;js-aboutme&quot;&gt;&lt;%-theme.aboutme%&gt;&lt;/div&gt;</code>，这样就能使输出内容可以自定义特殊格式，本人最后在aboutme对象的内容中需要换行的地方添加了<code>&lt;br /&gt;</code>，实测如此修改后可以换行。</p><h3 id="2、给左栏添加滚动条"><a href="#2、给左栏添加滚动条" class="headerlink" title="2、给左栏添加滚动条"></a><font color="#FA8072">2、给左栏添加滚动条</font></h3><p><strong><em>修改日期：2017-09-18</em></strong></p><p><strong>需求描述：</strong>SPFK主题是双栏的主题。因为左栏主要是用来显示一些菜单和头像等内容，这些内容也不多，所以原作者就没有添加滚动条。但是由于本人添加了个本地搜索功能，在刚开始文章少的时候还不受影响，但是随着文章的增多，搜索功能就会影响左栏的布局，这是就必须添加一个滚动条了。本以为添加滚动条很简单，就是添加一个<code>overflow: auto;</code>，谁知道还没这么简单╮(╯﹏╰）╭。</p><p><strong>解决办法：</strong>本人对问题的定位没问题，就是修改主题文件夹下的<code>\source\css\_partial\main.styl</code>文件中<em>.left-col</em>样式，问题在于怎么修改，本想直接在其中加入<code>overflow: auto;</code>，按道理说问题就能解决的，但是本人去搜索试试，发现搜索框上方的头像，文字等全部消失了，滚动条没起到作用，而下方的菜单可以通过滚动条看到。于是本人觉得可能是div上界没撑开，而超出的地方却隐藏了，但下界为什么能撑开，本人这里还是很不明白?_?。既然是这里隐藏了，本人就去看相关标签有没有<code>overflow: hidden;</code>属性，谁知道要么是没有，要么是即是关闭了也没有作用，那问题应该不是出在这里。就只能是这些元素所在的子div里了，本人找到其子div属性<em>.intrude-less</em>，其中虽有overflow: auto;但没设置height属性，所以就不能发挥其作用，本人于是给它加上height属性，搜索后发现有两个滚动条，这显然不简约，于是本人把<em>.intrude-less</em>的overflow: auto;属性注释掉，没想到居然能完美解决问题，可能是因为加上高度属性之后就能撑大父元素div了吧（来自某业余前端的猜测(⊙_⊙)）。后面为了更美观，本人把下方菜单区域的div样式<em>.switch-area</em>高度min-height改小了一点，顺便也把主题文件夹下的<code>\layout\_partial\left-col.ejs</code>文件中首行注释掉<code>&lt;!-- &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt; --&gt;</code>。本人也曾想把height改为min-height，谁知道又出现相同的问题，不得不又改回去。虽然这次已经解决了问题，但有些细节问题还是不太明白，只有等以后前端水平上去了再去想了，如有大佬知道还望不吝赐教(&#94;人&#94;)。</p><h3 id="3、更换鼠标指针"><a href="#3、更换鼠标指针" class="headerlink" title="3、更换鼠标指针"></a><font color="#FA8072">3、更换鼠标指针</font></h3><p><strong><em>修改日期：2017-9-26 ~ 2017-9-27</em></strong></p><p><strong>需求描述：</strong>本人在玩《<strong>Ori and the Blind Forest</strong>》这款游戏的时候觉得其鼠标指针很酷炫，于是想把其鼠标指针放在本人的博客站点中(๑´ڡ`๑) 。</p><p><strong>解决办法：</strong>要想更改指针，首先需要找到对应的指针文件，最终在万能的贴吧得到指引，在<a href="http://www.rw-designer.com/" target="_blank" rel="external">RealWorld Graphics</a>上找到两个ori指针文件，一个是<a href="http://www.rw-designer.com/cursor-detail/100439" target="_blank" rel="external">动态的</a>ani指针文件，还有一个是<a href="http://www.rw-designer.com/cursor-detail/82454" target="_blank" rel="external">静态的</a>cur指针文件（好像该游戏的作者也在steam上的评论中提供了游戏中的指针文件）。既然已经找到了指针文件，就可以开始更换炫酷的鼠标指针(•̀ᴗ•́)。具体更改方法如下：将下好的指针文件放在主题文件下的\source\img文件夹中，在主题配置文件中添加cursor属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># set cursor | 设置鼠标指针图标</span></div><div class="line"><span class="attr">cursor:</span> </div><div class="line"><span class="attr">  on:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  cursor_0:</span> <span class="string">img/cursor.ani</span>  <span class="comment"># 首选指针 </span></div><div class="line"><span class="attr">  cursor_1:</span> <span class="string">img/cursor.cur</span>  <span class="comment"># 备选指针</span></div></pre></td></tr></table></figure><p>其中cursor_0和cursor_1代表使用哪个指针，因为firefox和chrome不支持ani文件的指针（好像是ani文件有很大的漏洞），所以ani动态指针是用不了的，只能用cur格式的静态指针，而IE是可以加载ani格式的动态指针，所以本人这里就将两个指针文件全放上去了，首选加载动态指针；最后增加相应的代码调用cursor属性，加载指针文件，在主题文件夹下/layout/_partial/background.ejs文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.cursor.on)&#123; %&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        body&#123;</div><div class="line">            background: #3f3f3f;</div><div class="line">            cursor: url(&lt;%- config.root %&gt;&lt;%- theme.cursor.cursor_0 %&gt;), url(&quot;&lt;%- config.root %&gt;&lt;%- theme.cursor.cursor_1 %&gt;&quot;), auto;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p>如此更新站点之后即可使用新鼠标指针样式，可能需要先进行<code>hexo clean</code>再发布。</p><p><strong>BTW：</strong>这次修改是一个月之前的了，当时不知怎么的忘记记录了，还好本人的git提交记录比较详细，对应的提交记录为：<a href="https://github.com/cniter/cniter.github.io/commit/6c4fb2ddb930f739e2040a2b440106d21aebff04" target="_blank" rel="external">add a function – change cursor</a>和<a href="https://github.com/cniter/cniter.github.io/commit/d24d6d4f3292d7719f292599e6eebd54761c15e5" target="_blank" rel="external">update set cursor function</a> 。</p><h3 id="4、修改打赏问题"><a href="#4、修改打赏问题" class="headerlink" title="4、修改打赏问题"></a><font color="#FA8072">4、修改打赏问题</font></h3><p><strong><em>修改日期：2017-10-13</em></strong></p><p><strong>问题描述：</strong>本人突然想玩一下那个打赏小东西，但照配置文件中指示的那样在文章开头ymal格式中加入<code>reward: true</code>属性，没有任何作用，于是去主题文件夹搜索reward属性相应的代码，结果是“找不到结果”（坑爹了这是，摔！（╯‵□′）╯︵┴─┴ ）。</p><p><strong>解决办法：</strong>既然reward属性找不到就只有搜索reward_type属性，最终在主题文件夹下<code>\spfk_c\layout\_partial\article.ejs</code>文件中找到这样一条语句<code>&lt;% if ((theme.reward_type === 2 || (theme.reward_type === 1 &amp;&amp; post.toc)) &amp;&amp; !index){ %&gt;</code>，其下面就是打赏相关的代码，查看SPFK主题原作者介绍信息（<a href="https://luuman.github.io/2015/12/27/Hexo/HexoTheme/" target="_blank" rel="external">Hexo 主题：SPFK</a>）发现toc属性是用来显示目录的（一个用来打赏的代码怎么与文章目录相关了-_-#），所以上面的toc应该改成reward，修改后的代码为<code>&lt;% if ((theme.reward_type === 2 || (theme.reward_type === 1 &amp;&amp; post.reward)) &amp;&amp; !index){ %&gt;</code>，这时照配置文件中指示的那样在文章开头ymal格式中加入<code>reward: true</code>属性就能在相应的文章后面看到一个大大的“<strong>赏</strong>”字。</p><p>本来写到这里应该打赏这玩意应该完结了，但本人无意中在该文件的下面发现这样一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;% if (!index &amp;&amp; post.toc != false &amp;&amp; !is_page())&#123; %&gt;</div><div class="line">    &lt;%- partial(&apos;_partial/toc&apos;) %&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p>这是和toc（即文章目录）真正相关的代码，功能大概就是判断是否加载文章目录相关的代码，如果在文章开头设置<code>toc: false</code>，则该文章不会显示目录，但是如果在文章中不加toc属性，也会显示文章目录，但上面的打赏却不会显示，看起来<code>post.toc != false</code>和<code>post.toc</code>应该逻辑差不多，这里是本人感到十分奇怪的一个地方？后面查阅相关资料（<a href="http://www.w3school.com.cn/jsref/jsref_undefined.asp" target="_blank" rel="external">JavaScript undefined 属性</a>）得知:</p><blockquote><p>注释：null 表示无值，而 undefined 表示一个未声明的变量，或已声明但没有赋值的变量，或一个并不存在的对象属性。</p></blockquote><p>而本文这里因为没有在文章开头设置toc属性，所以其为<code>undefined</code>，其既不为false也不为true，只为undefined，当在<code>if</code>语句中做判断，会执行<code>else</code>分支，作<code>!</code>运算，结果则为：<code>true</code>。所以<code>if(post.toc)</code>不能执行其下代码，因为<code>post.toc</code>为undefined，不为true也不为false，而<code>if(post.toc != false)</code>能执行其下代码，因为<code>post.toc != false</code>为真。至于javascript中<code>if(a == ture)</code>和<code>if(a)</code>的区别具体为：前一种是a必须为1或者true才执行；而后一种只要a不为<code>false undefined null 0 -0 NaN &quot;&quot;</code>这7个中的其中任何一个都能执行。</p><h3 id="5、交换内容栏和左侧栏位置"><a href="#5、交换内容栏和左侧栏位置" class="headerlink" title="5、交换内容栏和左侧栏位置"></a><font color="#FA8072">5、交换内容栏和左侧栏位置</font></h3><p><strong><em>修改日期：2017-11-22 ~ 2017-11-23</em></strong></p><p><strong>需求描述：</strong>本人最近逛网站时发现，好像一些博客网站基本都是把内容放在左侧，百度和google的搜索结果也是在左侧，可能是内容在左侧要好一点吧，于是本人略微修改之后，将内容放在左侧，而原来的左侧栏放到最右侧，好像是顺眼了一点（不排除是心理作用(ಡωಡ)），如果以后还觉得不错的话，再把相关的变量名换掉吧（此次修改仅仅是将CSS相关的值改变，div类名没变）。</p><p><strong>解决办法：</strong>首先当然是定位左侧栏<code>.left-col</code>，它在主题文件夹下source/css/_partial/main.styl文件中，为其添加<code>right: 0px;</code>属性，使左侧栏靠右侧停放；在定位内容栏<code>.mid-col</code> ，将<code>right:0;</code>改成<code>left:0;</code>，将<code>left: 300px;</code>改成<code>right: left-col-width;</code>，使内容栏靠左侧停放，同时使其距离右侧有左侧栏的宽度。最后就是再修改其他一些小东西（比如目录按钮和目录内容div等）的css值，关于这个本人就细述了，反正也就是更改left、right、bottom以及top属性及其值，具体修改了哪些内容可以见本人github提交记录。</p><p><strong>BTW：</strong>诶呀呀！昨天忘记测试手机端，今天用手机打开一看，手机端页面也距右边left-col-width宽度，这使得内容全挤在一起了，完全没法看ರ_ರ …。所以不得不添加手机端样式，定位手机端.mid-col，它在主题文件夹下/source/css/_partial/mobile.styl文件中，为其添加<code>right: 0;</code>属性值；后面看见回到顶部、回到底部的导航栏也有点问题，就在该文件中<code>/*导航*/</code>下面<code>.scroll</code>上面添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#scroll</span>&#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使得该导航栏靠右停靠。</p><h3 id="6、更新站点部分CSS文件和代码结构"><a href="#6、更新站点部分CSS文件和代码结构" class="headerlink" title="6、更新站点部分CSS文件和代码结构"></a><font color="#FA8072">6、更新站点部分CSS文件和代码结构</font></h3><p><strong><em>修改日期：2017-12-04 ~ 2017-12-06</em></strong></p><p><strong>更新日志：</strong></p><ol><li><p>本人将left-col相关的东西（比如css样式和ejs文件）全部重名为right-col，毕竟经过几天的适应，感觉放在右侧还不错，就干脆也将其重命名算了，所以原左侧栏left-col从现在开始就完全变成右侧栏right-col了；</p></li><li><p>原来的本地搜索框有两个.search样式，本次修改将两个.search样式合并了，删除重复的样式，只留下一个合并后的.search样式；本人同时还优化了一下本地搜索功能的结构，将原来主题配置文件中的search_box属性删掉，给search属性添加一个on的属性来代替search_box属性，这样让结构不那么混乱，只由一个search属性决定本地搜索功能的开启和关闭及功能的实现，而不是像以前那样由search_box属性决定右侧栏搜索框的显示，而search属性决定本地搜索功能的实现；</p></li><li><p>更改右侧栏right-col的overflow样式，原来是右侧栏right-col垂直超出滚动，水平超出隐藏，这样在屏幕比较窄的情况在右侧会出现两条滚动条，很不美观。现在本人将overflow样式改成<code>&amp;:hover {overflow-y: auto; overflow-x: hidden;}</code>，这样只有在鼠标指针悬浮在右侧栏right-col上时才会再右侧栏出现滚动条，这样虽然不能从根本上解决问题，但稍微缓解了一下，等以后再看能不能彻底解决滚动条的问题ರ_ರ …；</p></li><li><p>本人以前添加RevolverMaps这个小部件的时候只是简单粗暴的添加div及对应的样式，完全没考虑到主题的扩展性和易修改性。于是本人将其改成配置文件的形式，在主题配置文件中添加<code>visual_visitor</code>属性，只要将其值设置为<a href="http://www.revolvermaps.com/" target="_blank" rel="external">RevolverMaps官网</a>获取的那串script code，eg：</p><p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;//ra.revolvermaps.com/0/0/8.js?i=0lpycb5p234&amp;amp;m=7&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=49&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</code>，即可在右侧栏菜单下的访问情况中看到一个3D地球实时显示访客的位置信息，本人为了优化异步访问信息，将其中的<code>async=&quot;async&quot;</code>改成<code>defer=&quot;defer&quot;</code>，这样好像能优化加载次序。这两者的区别可参考<a href="https://segmentfault.com/q/1010000000640869" target="_blank" rel="external">defer和async的区别</a>，好像是都能异步加载，只是async是该script加载完立即执行，而defer是该script加载完之后在整个页面结束加载之前执行，也就是最后执行的；</p></li><li><p>最后还修改了MathJax的CDN地址及配置属性。MathJax的配置属性可参考<a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/configuration.html#id3" target="_blank" rel="external">加载和配置MathJax</a>，具体如下：</p><blockquote><p>第一种配置Mahtjax的方法就是使用配置文件。MathJax附带了很多种预制配置文件。它们存储在<code>MathJax/config</code> 目录。主要有其中以下几个：</p><ul><li><code>default.js</code>：这个文件包含了所有MathJax可用的配置选项，并附有注释和说明，你可以编辑它们来满足你的需要。</li><li><code>TeX-AMS-MML_HTMLorMML.js</code>：允许使用 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-tex" target="_blank" rel="external"><em>TeX</em></a>, <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-latex" target="_blank" rel="external"><em>LaTeX</em></a>, 或者<a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-mathml" target="_blank" rel="external"><em>MathML</em></a> 符号书写公式。如果浏览器支持就处理为MathML，否则就使用Html和Css渲染。</li><li><code>TeX-AMS_HTML.js</code>：允许使用 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-tex" target="_blank" rel="external"><em>TeX</em></a> 或者 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-latex" target="_blank" rel="external"><em>LaTeX</em></a> 符号书写公式。使用Html和Css渲染。</li><li><code>MML_HTMLorMML.js</code>：允许使用 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-mathml" target="_blank" rel="external"><em>MathML</em></a> 符号书写公式。如果浏览器支持就处理为MathML，否则就使用Html和Css渲染。</li><li><code>AM_HTMLorMML.js</code>：允许使用 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-asciimath" target="_blank" rel="external"><em>AsciiMath</em></a> 符号书写。如果浏览器支持就处理为MathML，否则就使用Html和Css渲染。</li><li><code>TeX-AMS-MML_SVG.js</code>：允许使用 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-tex" target="_blank" rel="external"><em>TeX</em></a>, <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-latex" target="_blank" rel="external"><em>LaTeX</em></a>, 或者<a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-mathml" target="_blank" rel="external"><em>MathML</em></a> 符号书写公式。使用SVG产生输出。</li><li><code>TeX-MML-AM_HTMLorMML.js</code>：允许使用 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-tex" target="_blank" rel="external"><em>TeX</em></a>, <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-latex" target="_blank" rel="external"><em>LaTeX</em></a>,<a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-mathml" target="_blank" rel="external"><em>MathML</em></a>,或者 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-asciimath" target="_blank" rel="external"><em>AsciiMath</em></a> 符号书写公式。如果浏览器支持就处理为MathML，否则就使用Html和Css渲染。</li></ul><p>第一个文件是提供给你修改的。它基本上包含了MathJax的所有配置选项，同时有注释解释。其他的文件就是我们联合配置文件。它们不仅仅配置Mathjax,还预加载了一些配置所需的文件。这些文件内容在 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/common-configurations" target="_blank" rel="external">联合配置</a> 中有详细的解释。</p></blockquote><p>原来的CDN地址<strong><em>cdn.mathjax.org</em></strong>已经在2017-04-30日关闭，所以必须更新CDN地址，其推荐的CDN地址为<strong><em>cdnjs.cloudflare.com/ajax/libs/mathjax</em></strong>，而新的MathJax也提供一种一种新的配置文件<code>TeX-MML-AM_CHTML</code>（允许使用 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-tex" target="_blank" rel="external"><em>TeX</em></a>, <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-latex" target="_blank" rel="external"><em>LaTeX</em></a>,<a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-mathml" target="_blank" rel="external"><em>MathML</em></a>或者 <a href="http://mathjax-chinese-doc.readthedocs.io/en/latest/glossary.html#term-asciimath" target="_blank" rel="external"><em>AsciiMath</em></a> 符号书写公式，使用CommonHTML产生输出），新的MathJax推荐使用的就是这种配置文件，因为它计划在V3.0将HTML-CSS输出格式丢弃，只留下CommonHTML和SVG这两种输出格式。而且新的CDN地址不支持<code>/latest/MathJax.js</code>这种格式，必须指定一个确定的版本，截止本人此次修改日期之前，最新的版本为2.7.2，所以比较推荐的一种加载格式为：</p><p><code>&lt;script type=&quot;text/javascript&quot; async src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;</code> 。</p></li></ol><h3 id="7、添加404页面和一些插件等"><a href="#7、添加404页面和一些插件等" class="headerlink" title="7、添加404页面和一些插件等"></a><font color="#FA8072">7、添加404页面和一些插件等</font></h3><p><strong><em>修改日期：2017-12-09 ~ 2017-12-10</em></strong></p><p><strong>更新日志：</strong></p><ol><li><p>修改文章内a标签的高度，即.article-entry p a中padding的上下边距。文章内的a标签在外面加个虚线框本来就很突出了，还设置上下padding为8px，这就显得有点浮夸了 :) 。最后将其上下边距设为0px；</p></li><li><p>添加404页面，具体参考自：<a href="http://moxfive.xyz/2015/10/16/hexo-404-page/" target="_blank" rel="external">在 Hexo 中创建匹配主题的404页面</a>，</p><blockquote><blockquote><ol><li>启动 Git Bash，进入 Hexo 所在文件夹，输入 <code>hexo new page 404</code> ；</li><li>打开刚新建的页面文件，默认在 Hexo 文件夹根目录下 <code>/source/404/index.md</code>；</li><li>在顶部插入一行，写上<code>permalink: /404</code>，这表示指定该页固定链接为 <code>http://&quot;主页&quot;/404.html</code></li></ol></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="number">404</span> <span class="string">Not</span> <span class="string">Found：该页面无法显示</span></div><div class="line"><span class="attr">toc:</span> <span class="literal">false</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">permalink:</span> <span class="string">/404</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></blockquote></li><li><p>添加hexo-abbrlink插件，使文章生成唯一永久链接。这个插件最好是在建站之初就加上，不然写了很多文章之后又都得重新生成链接，搜索引擎需要再次抓取新链接，不利于SEO，本人这里也就只有等Google慢慢抓取更新，还好写的不多，不算太迟。安装完之后本人在站点配置文件中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span> <span class="comment"># 需安装hexo-abbrlink插件</span></div><div class="line"><span class="attr">abbrlink:</span></div><div class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></div><div class="line"><span class="attr">  rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></div></pre></td></tr></table></figure><p><strong><em>※BTW：</em></strong>需要将原来的permalink注释掉或直接删除。</p><p>更多设置可参考<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="external"><strong>hexo-abbrlink</strong></a> 。</p></li><li><p>添加hexo-all-minifier插件，快速压缩代码，分别对html、css、js、images进行优化。本人这里就直接使用推荐的配置了，直接在站点配置文件中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">all_minifier:</span> <span class="literal">true</span>  <span class="comment"># 需安装hexo-all-minifier插件</span></div></pre></td></tr></table></figure><p>更多设置可参考<a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="external"><strong>hexo-all-minifier</strong></a> 。</p></li><li><p>原来文章标题不可点击，反而日期可点击，这有点奇怪◔ ‸◔?。本次修改之后，点击文章标题即为刷新页面。</p></li></ol><h4 id="更新日期：2017-12-19-2017-12-19"><a href="#更新日期：2017-12-19-2017-12-19" class="headerlink" title="更新日期：2017-12-19 ~ 2017-12-19"></a><strong><em>更新日期：2017-12-19 ~ 2017-12-19</em></strong></h4><p><strong>具体修改内容：</strong>主要更新了404页面上面的动图，个人偏好喜欢一些星系漩涡之内的动图，偶然发现这个东西（<a href="http://www.jb51.net/jiaoben/576717.html" target="_blank" rel="external">HTML5+Three.js实现的3D可拖拽银河星系旋转动画特效源码</a>），于是将它的源码略作修改放进本人的404页面，将相关的js文件放入主题文件夹中<code>\source\js</code>文件夹里，最初时是将相关js文件引入路径当成相对路径引入，没想到这样造成有的404页面会显示旋转动图，而有的404页面则不会显示，后面参考网上资料（<a href="https://segmentfault.com/a/1190000007491687" target="_blank" rel="external">解惑页面中的相对路径和绝对路径</a>）了解到：</p><blockquote><ol><li><code>html</code> 中引入的资源（包括<code>js</code>、<code>css</code>、<code>img</code>）<ul><li>相对路径：相对的是 <strong>网页本身的 URL</strong> ；</li><li>绝对路径：相对的是 <strong>网页 URL 的根路径</strong> ；</li></ul></li><li><code>css</code> 中引入的资源<ul><li>相对路径：相对的是 <strong>css 文件本身的 URL</strong> ；</li><li>绝对路径：相对的是 <strong>网页 URL 的根路径</strong>；</li></ul></li></ol><p><strong>结论：</strong><br><code>html</code> 中引入资源的相对路径与 <strong>网页的 URL </strong>有关，而<code>css</code>中则与 <strong>css 资源本身 URL </strong>有关。但使用绝对路径时，不管是在 <code>html</code>中，还是<code>css</code>中，都只与 <strong>网页 URL的根路径</strong>有关。</p></blockquote><p>将相对路径改为绝对路径，即可在本人博客域名下所有404页面正常显示旋转动图。</p><h3 id="8、添加Gitalk评论系统"><a href="#8、添加Gitalk评论系统" class="headerlink" title="8、添加Gitalk评论系统"></a><font color="#FA8072">8、添加Gitalk评论系统</font></h3><p><strong><em>修改日期：2017-12-16</em></strong></p><p>　　Gitalk是一款类似gitment的评论系统，本人先是照着它提供的配置添加之后，发现居然与spfk主题中的require-2.1.6,jquery-1.9.1.min.js冲突，显示不了Gitalk，本人以为是bug，所以就去提了个<a href="https://github.com/gitalk/gitalk/issues/80" target="_blank" rel="external">issue</a>，作者<strong>booxood</strong>还是挺认真负责的（°Д°）Ъ，耐心的解决本人的问题，原来是本人的引用方式有问题，需要用require方式引用，大佬就是大佬<strong>○|￣|_</strong>，小白还是小白，萌新完全没见过还有这种操作，也算是开眼界了✪ω✪。由于大佬解决完问题之后就直接把issue关闭了，所以本人就只有在这里表示感谢了/つ∇T)。本人最后添加gitalk的ejs代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;comments&quot; class=&quot;gitalk&quot;&gt;</div><div class="line">    &lt;div id=&quot;gitalk-container&quot; class=&quot;article article-inner article-entry&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        require([&apos;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&apos;], function (Gitalk) &#123;</div><div class="line">            var gitalk = new Gitalk(&#123;</div><div class="line">                clientID: &apos;&lt;%= theme.gitalk.client_id%&gt;&apos;,</div><div class="line">                clientSecret: &apos;&lt;%= theme.gitalk.client_secret%&gt;&apos;,</div><div class="line">                id: window.location.pathname,</div><div class="line">                repo: &apos;&lt;%= theme.gitalk.repo%&gt;&apos;,</div><div class="line">                owner: &apos;&lt;%= theme.gitalk.owner%&gt;&apos;,</div><div class="line">                admin: &apos;&lt;%= theme.gitalk.admin%&gt;&apos;,</div><div class="line">                // facebook-like distraction free mode</div><div class="line">                distractionFreeMode: true</div><div class="line">            &#125;)</div><div class="line">            gitalk.render(&apos;gitalk-container&apos;)</div><div class="line">        &#125;) </div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>还有其它的一些修改也是仿照gitment的代码添加的，我这上面没有添加css文件是因为gitalk原有的css文件与本人的主题不相符，所以就稍微修改了一下。</p><p><strong>※BTW：</strong>上次修改文章内a标签的高度后突然发现打赏的“<strong>赏</strong>”字背景圆形变成椭圆了o(╯□╰)o，后面发现原来它也继承文章内a标签的属性，没有自己的padding，后面只有给<code>.dashang</code>添加个独立的<code>padding: 8px;</code>。</p><h3 id="9、Fix-Bugs"><a href="#9、Fix-Bugs" class="headerlink" title="9、Fix Bugs"></a><font color="#FA8072">9、Fix Bugs</font></h3><h4 id="修改日期：2017-12-20"><a href="#修改日期：2017-12-20" class="headerlink" title="修改日期：2017-12-20"></a><strong><em>修改日期：2017-12-20</em></strong></h4><p><strong>修复bug：</strong>鼠标悬浮a标签之上会出现显示a标签title内容的气泡，当title内容过多时，会造成气泡位置下调，从而遮住相应a标签内容的bug。</p><p><strong>解决方案为：</strong>定位气泡文件为主题文件夹下<code>\layout\_partial\post\TipTitle.ejs</code>文件，将其中气泡出现的位置改变，原来气泡的位置确定由top和left决定，现改为bottom和left，毕竟气泡是出现在a标签上方，如果将top确定，则title内容过多时，其只能向下扩张，造成气泡位置下移现象，从而遮住原来的a标签内容，改为bottom确定之后，气泡只会向上扩张，气泡位置相对稳定，不会遮住原来的a标签内容。具体修改内容为，将<code>top: offset.top - a.outerHeight() - 15</code>替换为<code>bottom: window.innerHeight - offset.top + 10</code> ，其它内容保持不变。</p><h4 id="修改日期：2017-12-26"><a href="#修改日期：2017-12-26" class="headerlink" title="修改日期：2017-12-26"></a><strong><em>修改日期：2017-12-26</em></strong></h4><p><strong>BUG描述：</strong>由于spfk主题启用的是百度分享，而原作者没有为其添加邮件分享，本人为了好玩就添加个邮件分享，但是在添加过程中，本人发现了个BUG，就是为其添加的title属性没有作用，它会自动更改title内容，而spfk主题有显示title的气泡TipTitle，所以不需要用默认的东西显示title内容，但是，这个百度分享还是强制默认显示，TipTitle并不能消除其title内容。</p><p><strong>解决方案：</strong>定位百度分享强制添加title的代码，其位于主题文件夹下\source\static\api\js\view\share_view.js中，具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> i=e.partners,s=i[n]?<span class="string">"\u5206\u4eab\u5230"</span>+i[n].name:<span class="string">""</span>;</div><div class="line">  !r(t).attr(<span class="string">"title"</span>)&amp;&amp;s&amp;&amp;r(t).attr(<span class="string">"title"</span>,s)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为TipTitle会首先将title去掉，所以这里会强制添加百度分享自己的title，所以需要将其注释掉，具体注释代码为：<code>/*&amp;&amp;r(t).attr(&quot;title&quot;,s)*/</code>。本来这样就可以了，但是本人发现添加邮件分享之后，布局又不对，所以定位主题文件夹下\source\css_partial\baidushare.styl文件，发现它的居中布局居然是有宽度决定的，于是本人为其添加<code>text-align: center;</code>谁知还是没变，不能自动居中，后来在主题文件夹下找到\source\static\api\css\share_style2_24.css文件，发现.bdshare-button-style2-24 a设置了浮动样式，难怪（⊙﹏⊙），最后将其注释掉就能自动居中了。最后还需要更改移动端\source\css_partial\mobile.styl中.bdshare-button-style2-24的样式设置为自动居中就可以了。</p><h3 id="10、使文章目录可折叠"><a href="#10、使文章目录可折叠" class="headerlink" title="10、使文章目录可折叠"></a><font color="#FA8072">10、使文章目录可折叠</font></h3><p><strong><em>修改日期：2017-12-28</em></strong></p><p>首先声明，本次修改完全参考：<a href="http://moxfive.xyz/2016/06/13/hexo-collapsible-toc/" target="_blank" rel="external">为 Hexo 添加可折叠的文章目录</a>，所用代码也来自其文（本人只是做了点微不足道的修改），在此表示感谢 <a href="https://github.com/MOxFIVE/hexo-theme-yelee/" target="_blank" rel="external">Yelee</a> 主题的作者<a href="http://moxfive.xyz/" target="_blank" rel="external">MOxFIVE</a> 👍 。</p><p>具体修改如下：首先在主题文件夹下\layout_partial\toc.ejs中添加js代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 折叠目录 --&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    // -------------添加小图标--------------</div><div class="line">    var $itemHasChild = $(&quot;#toc .toc-item:has(&gt; .toc-child)&quot;);</div><div class="line">    var $titleHasChild = $itemHasChild.children(&quot;.toc-link&quot;);</div><div class="line">    $itemHasChild.prepend(&quot;&lt;i class=&apos;fa fa-caret-down&apos;&gt;&lt;/i&gt;&lt;i class=&apos;fa fa-caret-right&apos;&gt;&lt;/i&gt;&quot;);</div><div class="line"></div><div class="line">    var $iconToFold = $(&quot;.toc-item &gt; .fa-caret-down&quot;);</div><div class="line">    var $iconToExpand = $(&quot;.toc-item &gt; .fa-caret-right&quot;);</div><div class="line">    $iconToExpand.addClass(&quot;hide&quot;);</div><div class="line"></div><div class="line">    // --------------点击小图标--------------</div><div class="line">    var clickIcon = function () &#123;</div><div class="line">        $(&quot;#toc .toc-item &gt; i&quot;).click(function () &#123;</div><div class="line">            $(this).siblings(&quot;.toc-child&quot;).slideToggle(100);</div><div class="line">            $(this).toggleClass(&quot;hide&quot;);</div><div class="line">            $(this).siblings(&quot;i&quot;).toggleClass(&quot;hide&quot;);</div><div class="line">        &#125;)</div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    // 默认展开目录，所以隐藏掉表示“目录已展开”的图标（向下的小三角）</div><div class="line">    var $iconToFold = $(&quot;.toc-item &gt; .fa-caret-down&quot;);</div><div class="line">    $iconToExpand.addClass(&quot;hide&quot;);</div><div class="line"></div><div class="line">    // ------------点击大标题-----------------</div><div class="line">    var clickTitle = function () &#123;</div><div class="line">        $titleHasChild.dblclick(function () &#123;</div><div class="line">            $(this).siblings(&quot;.toc-child&quot;).hide(100);</div><div class="line">            $(this).siblings(&quot;i&quot;).toggleClass(&quot;hide&quot;);</div><div class="line">        &#125;)</div><div class="line">        // After dblclick enent</div><div class="line">        $titleHasChild.click(function () &#123;</div><div class="line">            var $curentTocChild = $(this).siblings(&quot;.toc-child&quot;);</div><div class="line">            if ($curentTocChild.is(&quot;:hidden&quot;)) &#123;</div><div class="line">                $curentTocChild.show(100);</div><div class="line">                $(this).siblings(&quot;i&quot;).toggleClass(&quot;hide&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    // ---------点击总标题-----------------</div><div class="line">    var clickTocTitle = function () &#123;</div><div class="line">        var $iconToExpand = $(&quot;.toc-item &gt; .fa-caret-right&quot;);</div><div class="line">        var $iconToFold = $(&quot;.toc-item &gt; .fa-caret-down&quot;);</div><div class="line">        var $subToc = $titleHasChild.next(&quot;.toc-child&quot;);</div><div class="line"></div><div class="line">        var $tocTitle = $(&quot;#toc .toc-title&quot;);</div><div class="line"></div><div class="line">        // 当包含多级目录时再执行</div><div class="line">        if ($titleHasChild.length) &#123;</div><div class="line">            $tocTitle.addClass(&quot;clickable&quot;);</div><div class="line">            $tocTitle.click(function () &#123;</div><div class="line">                if ($subToc.is(&quot;:hidden&quot;)) &#123;</div><div class="line">                    $subToc.show(150);</div><div class="line">                    $iconToExpand.removeClass(&quot;hide&quot;);</div><div class="line">                    $iconToFold.addClass(&quot;hide&quot;);</div><div class="line">                &#125; else &#123;</div><div class="line">                    $subToc.hide(100);</div><div class="line">                    $iconToExpand.addClass(&quot;hide&quot;);</div><div class="line">                    $iconToFold.removeClass(&quot;hide&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>然后添加相应的css样式，在主题文件夹下\source\css_partial\article.styl中<strong>#toc</strong>样式里添加css样式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ol</span><span class="selector-class">.toc</span> <span class="selector-tag">li</span><span class="selector-class">.toc-item</span> <span class="selector-tag">i</span> &#123;</div><div class="line">   <span class="attribute">display</span>: inline-block;</div><div class="line">   <span class="attribute">margin-left</span>: -<span class="number">0.9em</span>;</div><div class="line">   <span class="attribute">width</span>: <span class="number">0.9em</span>;</div><div class="line">   <span class="attribute">color</span>: <span class="number">#b3b3b3</span>;</div><div class="line">   <span class="attribute">font-weight</span>: bold;</div><div class="line">   <span class="attribute">cursor</span>: pointer;</div><div class="line"></div><div class="line">   &amp;:hover &#123;</div><div class="line">       <span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   &amp;<span class="selector-class">.hide</span> &#123;</div><div class="line">       <span class="attribute">display</span>: none;</div><div class="line">   &#125;</div><div class="line">&#125;  </div><div class="line"><span class="selector-class">.toc-title</span><span class="selector-class">.clickable</span> &#123;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line"></div><div class="line">    &amp;:hover &#123;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#88acdb</span>;</div><div class="line">    &#125;</div><div class="line">    &amp;:active &#123;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#d3d3d3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上两步做完之后，点击目录前的小三角符号或双击目录名就能折叠相应目录，点击“<strong>文章目录</strong>”就能折叠所有目录。</p><hr><p>待续。。。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　先就写到这里，如后续修改中发现问题再继续记录吧↖(&#94;ω&#94;)↗。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本人一直在对Hexo的SPFK主题进行持续修改以符合本人自己的需求，在修改当中也会遇到一些小问题，以防遇到重复问题，特此记录所遇小问题，至于大问题可能会另外开篇。&lt;/p&gt;
    
    </summary>
    
      <category term="建站小记" scheme="http://cniter.github.io/categories/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>解决Qt中Qlabel显示OpenCV的Mat数据图像产生扭曲现象问题</title>
    <link href="http://cniter.github.io/posts/22c3daf1.html"/>
    <id>http://cniter.github.io/posts/22c3daf1.html</id>
    <published>2017-09-16T08:16:08.000Z</published>
    <updated>2017-12-09T12:57:13.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　曾写过一个程序，需要有一个界面，但本人不想使用MFC，因缘巧合，在网上看到Qt，就尝试用了一下，遂有此文。本人的Qt版本为qt-opensource-windows-x86-msvc2013-5.6.2，看其名字就知道该版本的Qt可以通过Visual Studio 2013开发Qt程序（各位看官猜的没错，本人并没有直接使用Qt Creator开发Qt程序，而是通过VS开发Qt程序的\(&#94;o&#94;)/），一来是熟悉VS开发，对Qt Creator完全没用过；二来是已经在VS配好全套的开发环境了（画外音：说白了就是懒嘛╭(╯^╰)╮）。但是在VS中开发Qt程序还需要一些其它的配置。</p><a id="more"></a><h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>　　在VS中开发Qt程序首先需要安装一个addin外接程序，下载并安装<a href="http://download.qt.io/archive/vsaddin/qt-vs-addin-1.2.5.exe" target="_blank" rel="external">qt-vs-addin-1.2.5.exe</a>（<a href="http://download.qt.io/archive/vsaddin/" target="_blank" rel="external">http://download.qt.io/archive/vsaddin/</a> ），（网上说该程序已不支持VS2013及以上版本的VS，原因是VS2013及其以上版本的VS都不支持该种类型的插件，新版本的VS需要安装新型插件<a href="http://download.qt.io/archive/vsaddin/qt-vs-tools-msvc2013-2.1.1.vsix" target="_blank" rel="external">qt-vs-tools-msvc2013-2.1.1.vsix</a>或 <a href="http://download.qt.io/archive/vsaddin/qt-vs-tools-msvc2015-2.1.1.vsix" target="_blank" rel="external">qt-vs-tools-msvc2015-2.1.1.vsix</a>），但是经本人实测，本人的VS2013-update5 英文旗舰版通过qt-vs-addin-1.2.5编写Qt程序完全没问题，不过VS2015就不知道了，可能真需要安装新型插件。下载安装好相应的软件之后需要在VS中配置Qt环境，虽然不配置也能正常编译，但是会在Qt相关的语句下面出现红色波浪线，本人轻微强迫症表示不能忍╭(╯^╰)╮。具体配置如下：</p><p>选中“<strong>VC++目录</strong>”，在“<strong>包含目录</strong>”中添加：</p><blockquote><p>C:\Qt\Qt5.6.2\5.6\msvc2013\include</p></blockquote><p>在“<strong>库目录</strong>”中添加：</p><blockquote><p>C:\Qt\Qt5.6.2\5.6\msvc2013\lib</p></blockquote><p>配置完成之后即可发现红色波浪线已消失。</p><h2 id="使用篇"><a href="#使用篇" class="headerlink" title="使用篇"></a>使用篇</h2><p>　　VS中如何开发Qt程序请详见参考资料，懒癌发作，不想写了=_=（其实是因为要写的话只能贴图了，本人表示不想使用图片(╯﹏╰) ）。</p><h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><p><strong>问题描述：</strong>本人在用Qt显示OpenCV的Mat数据图像时，有时会发生扭曲现象（图像从对角线分开，两边颠倒，扭曲），有时却不会，为了撤了解决问题，查阅了相关资料，终于发现症结所在，原来是图片数据格式不符合Qt的图片数据格式。</p><p><strong>解决办法：</strong>正文来喽~(≧▽≦)/~，就不说废话了，“Talk is cheap. Show you the code”，具体完整正确显示代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMatWithQtQlabel</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;img, QLabel *label)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// [Qt中用QLabel显示OpenCV中Mat图像数据出现扭曲现象的解决](http://lovelittlebean.blog.163.com/blog/static/11658218620125208212189/)</span></div><div class="line">	QImage q_img;  </div><div class="line">	<span class="keyword">if</span>(img.channels() == <span class="number">3</span>)    <span class="comment">// RGB image  </span></div><div class="line">	&#123;  </div><div class="line">		q_img = QImage((<span class="keyword">const</span> uchar*)(img.data), img.cols, img.rows, img.cols*img.channels(), QImage::Format_RGB888).rgbSwapped();  </div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (img.channels() == <span class="number">4</span>)	<span class="comment">// RGBA image  </span></div><div class="line">	&#123;</div><div class="line">		q_img = QImage((<span class="keyword">const</span> uchar*)(img.data), img.cols, img.rows, img.cols*img.channels(), QImage::Format_RGB32);  </div><div class="line">	&#125;<span class="keyword">else</span>              <span class="comment">// gray image  </span></div><div class="line">	&#123;  </div><div class="line">		q_img = QImage((<span class="keyword">const</span> uchar*)(img.data), img.cols, img.rows, img.cols*img.channels(), QImage::Format_Indexed8);  </div><div class="line">	&#125;  </div><div class="line"></div><div class="line">	<span class="comment">// -------------- 图片自适应label -------------------</span></div><div class="line">	QImage q_label_img = q_img.scaled(label-&gt;size(), Qt::IgnoreAspectRatio, Qt::SmoothTransformation); <span class="comment">// 图片自适应label大小	</span></div><div class="line">	label-&gt;setPixmap(QPixmap::fromImage(q_label_img));  <span class="comment">// 将图片显示到label上 </span></div><div class="line"></div><div class="line">	<span class="comment">// -------------- label自适应图片 -------------------</span></div><div class="line">	<span class="comment">/*label-&gt;setPixmap(QPixmap::fromImage(q_img));  // 显示在label中</span></div><div class="line"><span class="comment">	label-&gt;resize(label-&gt;pixmap()-&gt;size());  // 改变label的尺寸以自适应图像</span></div><div class="line"><span class="comment">	label-&gt;show();  */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　rgbSwapped()函数是为了使Qt中显示图形颜色更自然，因为OpenCV的Mat数据RGB图像是以BGR的顺序排列，而Qt中是以RGB的顺序排列，所以需要rgbSwapped()交换一下颜色通道排列顺序。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="1、摄像头数据采集问题"><a href="#1、摄像头数据采集问题" class="headerlink" title="1、摄像头数据采集问题"></a>1、摄像头数据采集问题</h3><p>注意：如果是从摄像头实时采集显示图像，在显示时需先判断图像有没有数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (image.data)</div><div class="line">&#123;</div><div class="line">  <span class="comment">// 执行显示操作</span></div><div class="line">  showMatWithQtQlabel(mat, ui.label);</div><div class="line">  </div><div class="line">  <span class="comment">// 执行其它操作...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!image.empty())</div><div class="line">&#123;</div><div class="line">  <span class="comment">// 执行显示操作</span></div><div class="line">  showMatWithQtQlabel(mat, ui.label);</div><div class="line">  </div><div class="line">  <span class="comment">// 执行其它操作...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>具体原因可参考本人的一篇文章<a href="https://cniter.github.io/2017/09/16/%E8%A7%A3%E5%86%B3OpenCV-2.4.11%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%98%BE%E7%A4%BA%E6%8B%8D%E6%91%84%E8%A7%86%E9%A2%91%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/">解决OpenCV-2.4.11调用摄像头显示拍摄视频出错问题</a>。</p><h3 id="2、信号与槽的连接函数问题"><a href="#2、信号与槽的连接函数问题" class="headerlink" title="2、信号与槽的连接函数问题"></a>2、信号与槽的连接函数问题</h3><p>Qt4中信号与槽的连接函数语法为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connect(&amp;theTimer,SIGNAL(timeout()),<span class="keyword">this</span>,SLOT(getFrame()));	<span class="comment">// 超时就去取下一帧</span></div></pre></td></tr></table></figure><p>而Qt5中信号与槽的连接函数新语法为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connect(&amp;theTimer, &amp;QTimer::timeout, <span class="keyword">this</span>, &amp;QtTest::getFrame);	<span class="comment">//超时就去取下一帧</span></div></pre></td></tr></table></figure><p>推荐使用Qt5新语法，具体原因可参考<a href="http://www.cnblogs.com/mushroom/p/5701330.html" target="_blank" rel="external">qt5中信号和槽的新语法</a> 。</p><p><strong>个人粗浅理解：</strong>信号函数一般是Qt中控件的库函数，比如按钮控件QButton的<code>QButton::clicked ()</code>函数，定时器QTimer的<code>QTimer::timeout ()</code>等函数；而槽函数是响应函数，一般由用户自己编写，也可以使用Qt中库函数。</p><p>　　使用Qt中可能会遇到的一些错误请参考<a href="http://www.cnblogs.com/csuftzzk/p/VS_Qt_Experience.html" target="_blank" rel="external">使用VS2010开发Qt程序的一点经验</a>（<a href="http://www.cnblogs.com/csuftzzk/category/445772.html" target="_blank" rel="external">http://www.cnblogs.com/csuftzzk/category/445772.html</a> ）。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本来其实就想把问题篇写出来的，毕竟主要就是想记录一下那个显示函数，但是感觉有点没头没尾，就把VS集成Qt开发环境也稍微写了一下，而使用篇确实是因为参考资料已经写的很详细了，所以就直接一笔带过了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/llh318724/article/details/7007661" target="_blank" rel="external">QT +openCV 实现摄像头采集以及拍照功能</a>（<a href="http://blog.csdn.net/llh318724/article/category/930663" target="_blank" rel="external">http://blog.csdn.net/llh318724/article/category/930663</a> ）</p><p>[2] <a href="http://blog.csdn.net/qqmindyourwill/article/details/50280233" target="_blank" rel="external">VS2010 + QT5.2+ QT-VS-Addin1.2.2开发环境配置</a>（<a href="http://blog.csdn.net/qqmindyourwill/article/category/5990841" target="_blank" rel="external">http://blog.csdn.net/qqmindyourwill/article/category/5990841</a> ）</p><p>[3] <a href="http://blog.csdn.net/fm0517/article/details/7476430" target="_blank" rel="external">Qt+OpenCV界面</a>（<a href="http://blog.csdn.net/fm0517/article/category/1110960" target="_blank" rel="external">http://blog.csdn.net/fm0517/article/category/1110960</a> ）</p><p>[4] <a href="http://blog.csdn.net/loveaborn/article/details/7680834" target="_blank" rel="external">Qt中用QLabel显示OpenCV中Mat图像数据出现扭曲现象的解决</a>（<a href="http://blog.csdn.net/loveaborn/article/category/1164072" target="_blank" rel="external">http://blog.csdn.net/loveaborn/article/category/1164072</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　曾写过一个程序，需要有一个界面，但本人不想使用MFC，因缘巧合，在网上看到Qt，就尝试用了一下，遂有此文。本人的Qt版本为qt-opensource-windows-x86-msvc2013-5.6.2，看其名字就知道该版本的Qt可以通过Visual Studio 2013开发Qt程序（各位看官猜的没错，本人并没有直接使用Qt Creator开发Qt程序，而是通过VS开发Qt程序的\(&amp;#94;o&amp;#94;)/），一来是熟悉VS开发，对Qt Creator完全没用过；二来是已经在VS配好全套的开发环境了（画外音：说白了就是懒嘛╭(╯^╰)╮）。但是在VS中开发Qt程序还需要一些其它的配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Problems" scheme="http://cniter.github.io/categories/Problems/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
      <category term="qt" scheme="http://cniter.github.io/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>解决OpenCV-2.4.11调用摄像头显示拍摄视频出错问题</title>
    <link href="http://cniter.github.io/posts/509ee93b.html"/>
    <id>http://cniter.github.io/posts/509ee93b.html</id>
    <published>2017-09-16T07:56:16.000Z</published>
    <updated>2017-12-09T12:57:13.766Z</updated>
    
    <content type="html"><![CDATA[<font color="#FA8072">本文所用的OpenCV版本为opencv-2.4.11，编程语言为C++。</font><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本文其实是以前在刚学OpenCV时遇到的一个问题，当时我的环境还是：Win7，VS2010，opencv-2.4.11。当初就记录了下来，现在再来重新梳理一下。</p><a id="more"></a><h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><p><strong>问题描述：</strong>使用OpenCV-2.4.11调用摄像头显示拍摄视频时报<font color="#FA8072">runtime error</font>，控制台窗口出现<font color="#FA8072">OpenCV Error: Assertion failed (size.width&gt;0 &amp;&amp; size.height&gt;0) in cv::imshow, file ……..\opencv\modules\highgui\src\window.cpp, line 261</font>。</p><p><strong>解决办法：</strong>在显示图片时先判断是否有图像数据，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!image.empty()) </div><div class="line">&#123;</div><div class="line">    imshow(<span class="string">"window"</span>, image);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (image.data) </div><div class="line">&#123;</div><div class="line">    imshow(<span class="string">"window"</span>, image);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>原因可能是：</strong>用imshow()显示图像时，其image必须有数据，如果它为空则程序会报错，而一般打开摄像头会有一定时间的延迟，这时程序已经启动，而摄像头由于启动延迟，不一定能及时获取图像，造成要显示的image为空，因此报错。个人粗浅理解，板砖轻拍⊙﹏⊙b。</p><p>而网上有人也认为：</p><blockquote><ol><li>我也是遇到这个问题，不过看到一个帖子写得不错（英文的），里面给出了一个可能的理由，就是我们用opencv打开视频的时候，会自动先监测摄像头有没有读到帧，如果没有，就会报错，然后再执行你的程序，加一个if判断就是跳过系统自己的判断，直接执行我们的程序。来自：<a href="https://zhidao.baidu.com/question/1831122325089024420.html" target="_blank" rel="external">https://zhidao.baidu.com/question/1831122325089024420.html</a></li><li>有人说的原因是在VideoCapture刚开始获取摄像头视频流的过程不返回信号，所以判断Mat是否为空，并不断循环去获取Mat。来自：<a href="http://www.cnblogs.com/tiny656/p/3538115.html" target="_blank" rel="external">http://www.cnblogs.com/tiny656/p/3538115.html</a></li></ol></blockquote><p>附最终完整示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 调用摄像头</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">videoCaptureTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//cv::VideoCapture cap(0);  // 打开默认摄像头，参数0代表默认摄像头的ID</span></div><div class="line">    cv::VideoCapture cap;</div><div class="line">    cap.open(<span class="number">0</span>);</div><div class="line">    <span class="comment">// 设置摄像头</span></div><div class="line">    cap.<span class="built_in">set</span>(CV_CAP_PROP_FRAME_WIDTH,<span class="number">640</span>);</div><div class="line">    cap.<span class="built_in">set</span>(CV_CAP_PROP_FRAME_HEIGHT,<span class="number">480</span>);</div><div class="line">    <span class="comment">// 确认是否成功打开摄像头</span></div><div class="line">    <span class="keyword">if</span> (!cap.isOpened())</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"打开摄像头失败，退出！\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    cv::namedWindow(<span class="string">"Capture"</span>, CV_WINDOW_AUTOSIZE|CV_WINDOW_FREERATIO);</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        cv::Mat frame;</div><div class="line">        cap &gt;&gt; frame;   <span class="comment">// 获取帧</span></div><div class="line"></div><div class="line">        <span class="comment">// 对摄像头获取的帧进行各种处理</span></div><div class="line">        <span class="keyword">if</span> (!frame.empty()) <span class="comment">// 最好加上该判断，并在该判断中对帧进行处理</span></div><div class="line">        &#123;</div><div class="line">            cv::imshow(<span class="string">"Capture"</span>, frame);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(cv::waitKey(<span class="number">30</span>) &gt;= <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 每30ms取一帧</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    videoCaptureTest();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　其实也可以通过在获取帧时，反复获取帧，直到取到的帧有数据为止，这样就不需要判断语句了，直接显示即可，具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">    cap &gt;&gt; frame;</div><div class="line">&#125;<span class="keyword">while</span>(frame.empty());</div><div class="line"></div><div class="line">cv::imshow(<span class="string">"Capture"</span>, frame);</div></pre></td></tr></table></figure><p>参考自：<a href="https://stackoverflow.com/a/9285151" target="_blank" rel="external">https://stackoverflow.com/a/9285151</a> 。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本文还是当初在国内某平台写博客时写的，但现在再回头看，又稍微有了点新的思路，温故确实能知新(*&#94;__&#94;*) 嘻嘻……。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.sina.com.cn/s/blog_a3e7ccd6010105yn.html" target="_blank" rel="external">OpenCV2.3使用摄像头和视频</a>（<a href="http://blog.sina.com.cn/s/articlelist_2749877462_3_1.html" target="_blank" rel="external">http://blog.sina.com.cn/s/articlelist_2749877462_3_1.html</a> ）</p><p>[2] <a href="http://zhidao.baidu.com/link?url=pIM9Hr0-Yalk-uj8cm5ml0y91X92jJmPAXMKQ-1h7FXSPsrwTiD6_9Ngfq72hmxbVDjNE0aYTOmXCCVEryZvhNBJGW6FbsqjO6dbjVLEZt3" target="_blank" rel="external">OpenCV Error: Assertion failed (size.width&gt;0 &amp;&amp; size.height&gt;0) in cv::imshow, fi 这个问题怎么办？</a></p><p>[3] <a href="http://blog.csdn.net/czl389/article/details/51031100" target="_blank" rel="external">OpenCV打开摄像头出现运行错误OpenCV Error：Assertion failed (size.width&gt;0&amp;&amp;size.height&gt;0)in cv::imshow，…… </a>（<a href="http://blog.csdn.net/czl389/article/category/6381887" target="_blank" rel="external">http://blog.csdn.net/czl389/article/category/6381887</a> ）</p><p>[4] <a href="http://www.cnblogs.com/tiny656/p/3538115.html" target="_blank" rel="external">[OpenCV]获取摄像头视频</a>（<a href="http://www.cnblogs.com/tiny656/category/550972.html" target="_blank" rel="external">http://www.cnblogs.com/tiny656/category/550972.html</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;#FA8072&quot;&gt;本文所用的OpenCV版本为opencv-2.4.11，编程语言为C++。&lt;/font&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本文其实是以前在刚学OpenCV时遇到的一个问题，当时我的环境还是：Win7，VS2010，opencv-2.4.11。当初就记录了下来，现在再来重新梳理一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Problems" scheme="http://cniter.github.io/categories/Problems/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加各种小部件</title>
    <link href="http://cniter.github.io/posts/3bc0decc.html"/>
    <id>http://cniter.github.io/posts/3bc0decc.html</id>
    <published>2017-09-15T12:23:05.000Z</published>
    <updated>2017-12-09T12:57:13.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本人目前还在使用对Hexo的主题<strong>SPFK</strong>自行魔改的那个主题（所谓的魔改也就是对照着<strong>black-blue</strong>主题修改了部分CSS，然后又添加了一个站内搜索功能(&gt;&#94;ω&#94;&lt;)），主题SPFK主体的东西其实都没改变。现在正逐渐将其完善中，遂有此文。</p><a id="more"></a><h2 id="添加QQ邮箱联系"><a href="#添加QQ邮箱联系" class="headerlink" title="添加QQ邮箱联系"></a>添加QQ邮箱联系</h2><p><strong><em>添加日期：2017-9-15</em></strong></p><p>　　进入<a href="http://openmail.qq.com/" target="_blank" rel="external">QQ邮箱开放平台</a>，点击“<strong>获取邮我按钮</strong>”，登录QQ之后继续点击该按钮，因为本人不需要其样式，只需要其链接即可，所以就默认样式，直接点击“<strong>获取代码</strong>”即可，本人默认的“<strong>HTML代码</strong>”为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=qNvAyd3G0d3JxujOx9DFycHEhsvHxQ"</span> <span class="attr">style</span>=<span class="string">"text-decoration:none;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_01.png"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><p>提取其中的href，即<code>http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=qNvAyd3G0d3JxujOx9DFycHEhsvHxQ</code>，将该链接添加到<strong>主题配置文件</strong>中，具体如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">subnav:</span></div><div class="line"><span class="attr">  mail:</span> <span class="string">"http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=qNvAyd3G0d3JxujOx9DFycHEhsvHxQ"</span></div></pre></td></tr></table></figure><p>重新部署站点即可发现对应的邮箱图标，点击该图标可直接给本人发邮件。</p><h2 id="添加QQ交谈链接"><a href="#添加QQ交谈链接" class="headerlink" title="添加QQ交谈链接"></a>添加QQ交谈链接</h2><p><strong><em>添加日期：2017-9-15</em></strong></p><p>　　进入<a href="http://shang.qq.com/v3/widget.html" target="_blank" rel="external">QQ推广</a>，点击上方的“<strong>推广工具</strong>”，若没登录QQ则先登录QQ，组件样式同样默认即可，这里需要注意的是，需要点击左边的“<strong>设置</strong>”，下滚页面，找到“<strong>安全级别设置</strong>”，如下</p><blockquote><h><strong>安全级别设置</strong></h><p><input name="qq_security" type="radio">完全公开（推荐商家，客服等用户使用，代码中显示QQ号码，易于推广）</p><p><input name="qq_security" type="radio">安全加密（推荐博主，论坛用户等使用，代码中不显示QQ号码）</p></blockquote><p>选中“<strong>安全加密</strong>”，不然该选项默认的为完全公开，这样QQ号码就直接会显示在代码中，不利于隐私保护，选中之后，点击“<strong>保存</strong>”。保存之后，再次点击“<strong>推广工具</strong>”，即可发现下方的复制代码区域的HTML代码已看不到明码显示的QQ号，（若还是能看到QQ号，没有任何变化，可关闭该界面，重启浏览器重新进入该界面），本人的“<strong>复制这段代码并将其粘贴到您的网页上</strong>”下方区域的默认的代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://sighttp.qq.com/authd?IDKEY=b1afd83745b30922bc98e020847b86a5148d2114e62e8422"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span>  <span class="attr">src</span>=<span class="string">"http://wpa.qq.com/imgd?IDKEY=b1afd83745b30922bc98e020847b86a5148d2114e62e8422&amp;pic=52"</span> <span class="attr">alt</span>=<span class="string">"点击这里给我发消息"</span> <span class="attr">title</span>=<span class="string">"点击这里给我发消息"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><p>提取其中的href，即<code>http://sighttp.qq.com/authd?IDKEY=b1afd83745b30922bc98e020847b86a5148d2114e62e8422</code>，将该链接添加到<strong>主题配置文件</strong>中，具体如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">subnav:</span></div><div class="line"><span class="attr">  QQ:</span> <span class="string">"http://sighttp.qq.com/authd?IDKEY=4faf682653b3b7f5f47b9cb6d2bb8b81de8fa7a8fb8cee12"</span></div></pre></td></tr></table></figure><p>重新部署站点即可发现对应的QQ图标，点击该图标可直接给本人发临时QQ消息。</p><h2 id="添加用户访问统计信息小工具——RevolverMaps"><a href="#添加用户访问统计信息小工具——RevolverMaps" class="headerlink" title="添加用户访问统计信息小工具——RevolverMaps"></a>添加用户访问统计信息小工具——RevolverMaps</h2><p><strong><em>添加日期：2017-10-12</em></strong></p><p>　　由于本人暂时不想搞SEO，所以就没有搞站点地图，更没有将本人的站点提交到百度和Google的站长平台上。但本人又想查看用户访问信息（是不是很矛盾o(╯□╰)o），而正好本人看到有个很酷炫的3D地球能满足本人的需求（其实很酷炫才是主要原因O(∩_∩)O~），所以本人决定将其加入本人的站点中（当做一部分装饰品๑乛◡乛๑）。该插件的名称为<a href="http://www.revolvermaps.com/?target=gallery" target="_blank" rel="external">RevolverMaps</a>，具体样式可以去其官网看，本人就不贴图了。设置完前三步之后，第四步让用户复制代码到自己的站点上，注意第四步会让你选“<strong>new map</strong>”还是“<strong>update</strong>”，由于本人是初次使用，当然是选择默认的“<strong>new map</strong>”，如果是以前使用过，就选择“<strong>update</strong>”，并将原来使用的script代码输入出现的文本框并提交，这样就只是更改3D地球样式而不会丢失用户访问信息数据。<br>　　具体添加方法为：将复制的script代码放入想显示的某个div中。本人得到的script代码为：</p><blockquote><p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;//rf.revolvermaps.com/0/0/8.js?i=50om5cdoa3h&amp;amp;m=7&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=49&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</code></p></blockquote><p>　　由于本人的博客是双栏的，本人当然是把RevolverMaps放入左栏中，本人刚开始是把得到的script代码放入主题文件夹下\layout_partial\left-col.ejs文件末尾的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span>                </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><code>&lt;/header&gt;</code>标签之前（即在header的最下端显示RevolverMaps），但实际用起来有点不好看；本人又想干脆另外创造一个div放置地球，具体思路为：在birdhouse图标旁创建一个新的地球图标，再做一个像birdhouse图标一样的动画，鼠标移到地球图标时，出现一个div，该div用来放置RevolverMaps，这一步做到一半（即将一个新的地球图标并排放在birdhouse图标旁）发现这个效果感觉更不好看了，如果要改就需要大改了，有点麻烦o(︶︿︶)o唉；于是本人看到鼠标放在birdhouse图标出现的菜单栏上，想到何不如将该菜单栏在添加一栏，创建一个div用来显示RevolverMaps？事不宜迟，马上就动手添加该div，具体添加步骤如下：</p><ol><li><p>首先当然是添加一个“<strong>访问情况</strong>”的列表名称，在主题文件夹下<code>\layout\_partial\left-col.ejs</code>文件中<code>&lt;ul class=&quot;tips-inner&quot;&gt;</code>下最后一个<code>&lt;li&gt;</code>后即<code>&lt;/ul&gt;</code>前添加<code>&lt;li&gt;访问情况&lt;/li&gt;</code>；</p></li><li><p>接着像其它的列表一样（点击该列表birdhouse图标就会改变成相应的图标），点击“<strong>访问情况</strong>”会将birdhouse图标改变成一个地球小图标，经查阅相应的css文件，其它的列表对应的图标好像是利用div的边框属性画出来的（某业余前端的猜测+_+），本人目前还没有这样的才能，就只有投机的采用Font Awesome中的<a href="http://fontawesome.io/icon/globe/" target="_blank" rel="external">globe</a>图标了。在主题文件夹下<code>\layout\_partial\left-col.ejs</code>文件中<code>&lt;div class=&quot;icon-ctn&quot;&gt;</code>下最末尾即其对应的<code>&lt;/div&gt;</code>前添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon-wrap icon-globe hide"</span> <span class="attr">data-idx</span>=<span class="string">"4"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-globe fa-spin fa-2x"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>这样点击“<strong>访问情况</strong>”会将birdhouse图标变成一个旋转的地球小图标了；</p></li><li><p>接下来就需要创建“<strong>访问情况</strong>”对应的div了，在主题文件夹下<code>\layout\_partial\left-col.ejs</code>文件中<code>&lt;div class=&quot;switch-wrap&quot;&gt;</code>下最末尾即其对应的<code>&lt;/div&gt;</code>前添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"switch-part switch-part5"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//rf.revolvermaps.com/0/0/8.js?i=50om5cdoa3h&amp;amp;m=7&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=49"</span> <span class="attr">async</span>=<span class="string">"async"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure><p>这样点击“<strong>访问情况</strong>”就能出现酷炫的3D地球了，才怪:p。这样只能让3D地球出现在菜单界面，还需要添加修改相应的css；</p></li><li><p>最后就是改css样式了，本以为这一步很简单，没想到这一步花费本人最多时间╮(╯_╰)╭，修改的样式位于主题文件夹下<code>\source\css_partial\main.styl</code>文件中，首先为switch-part5添加对应的样式，在.switch-part4样式后添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.switch-part5&#123;</div><div class="line">        left: 400%;</div><div class="line">        width: 100%;</div><div class="line">    	//height: 200px;</div><div class="line">        //margin-left: 47px;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>做完这一步会发现3D地球显示不完全，下面会缺一点，所以还需要继续修改，修改过程如下：本人曾将该width减小（如上面代码中的注释），这样确实能让3D地球显示完全，但有点小，不是很好看；后面想到没显示完全可能是上层div（.switch-area）太小且设置了<code>overflow: hidden;</code>，于是这里本人首先增加了.switch-area的高度,这样确实能解决问题，但会使左栏的滚动条显示出来；所以本人接着尝试将.switch-area的<code>overflow: hidden;</code>注释掉，谁想注释掉之后出现了横向滚动条，这样更不好了，于是本人又更改为<code>overflow-x: hidden;</code>，谁想.switch-area又出现了竖直滚动条（感觉像拆东墙补西墙-_-|||），查阅相关资料（<a href="http://blog.csdn.net/qiqingjin/article/details/50413691" target="_blank" rel="external">CSS-overflow特性及总结</a>）得知若overflow-x为hidden，overflow-y不为hidden，则overflow-y将会自动重置为auto，所以这里不能这样改，但<code>overflow: hidden;</code>还是得注释掉，不然上层div撑不开，而且不增加高度的话，还是不能完全显示3D地球，因为超出就隐藏了嘛；因为注释掉之后会出现横向滚动条，而又不能修改.switch-area的overflow-x，所以就只能改更上层的div，这里本人突然想起上次给左栏添加滚动条时，在.left-col下添加了<code>overflow: auto;</code>，这次不如还修改这里，毕竟本人只想要竖直滚动条（其实不要滚动条却能滚动最好，但本人目前还没找到好的解决方案(╯﹏╰)b），不要横向滚动条，于是将其修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">overflow-y</span>: <span class="selector-tag">auto</span>;</div><div class="line"><span class="selector-tag">overflow-x</span>: <span class="selector-tag">hidden</span>;</div></pre></td></tr></table></figure><p>没想到这样也能解决问题，虽然还是会在左栏出现滚动条，但这样感觉比增加.switch-area的高度要好（嗯，应该要好吧(～ o ～)Y）。看以后能不能改成点击“<strong>访问情况</strong>”时才出现滚动条，点击其它列表则不出现滚动条（其实把滚动条隐藏最好，但网上那个两个div嵌套的方法本人尝试过会出现一些奇怪的问题，等以后再试试吧↖((&#94;ω^)↗）。</p></li></ol><hr><p>待续。。。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　目前就添加这些小组件，以后应该会陆续添加一些其它的小东西↖(&#94;ω&#94;)↗。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://jingyan.baidu.com/article/dca1fa6fb5b637f1a44052b4.html" target="_blank" rel="external">如何在自己网站上或者博客上放置QQ邮箱联系反馈</a>（<a href="http://jingyan.baidu.com/tag?tagName=%E9%82%AE%E7%AE%B1" target="_blank" rel="external">http://jingyan.baidu.com/tag?tagName=%E9%82%AE%E7%AE%B1</a> ）</p><p>[2] <a href="http://www.29mo.com/wltg/363.html" target="_blank" rel="external">如何在自己的博客添加QQ组件</a>（<a href="http://www.29mo.com/category/wltg" target="_blank" rel="external">http://www.29mo.com/category/wltg</a> ）</p><p>[3] <a href="http://www.feizl.com/html/29610.htm" target="_blank" rel="external">一步一步教你给自己博客添加QQ在线</a>（<a href="http://www.feizl.com/feizhuliu/QQbaodian/" target="_blank" rel="external">http://www.feizl.com/feizhuliu/QQbaodian/</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本人目前还在使用对Hexo的主题&lt;strong&gt;SPFK&lt;/strong&gt;自行魔改的那个主题（所谓的魔改也就是对照着&lt;strong&gt;black-blue&lt;/strong&gt;主题修改了部分CSS，然后又添加了一个站内搜索功能(&amp;gt;&amp;#94;ω&amp;#94;&amp;lt;)），主题SPFK主体的东西其实都没改变。现在正逐渐将其完善中，遂有此文。&lt;/p&gt;
    
    </summary>
    
      <category term="建站小记" scheme="http://cniter.github.io/categories/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV中显著性检测算法的使用</title>
    <link href="http://cniter.github.io/posts/fd0f8195.html"/>
    <id>http://cniter.github.io/posts/fd0f8195.html</id>
    <published>2017-09-12T10:36:26.000Z</published>
    <updated>2017-12-09T12:57:13.759Z</updated>
    
    <content type="html"><![CDATA[<font color="#FA8072">本文所用的OpenCV版本为opencv-3.2.0，编程语言为C++。</font><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　OpenCV中实现了两种显著性检测算法，分别为Spectral Residual算法,出自<strong>Xiaodi Hou and Liqing Zhang. Saliency detection: A spectral residual approach. In <em>Computer Vision and Pattern Recognition, 2007. CVPR’07. IEEE Conference on</em>, pages 1–8. IEEE, 2007.</strong> 和 Fine Grained Saliency算法,出自<strong>Sebastian Montabone and Alvaro Soto. Human detection using a mobile platform and novel features derived from a visual saliency mechanism. In <em>Image and Vision Computing, Vol. 28 Issue 3</em>, pages 391–402. Elsevier, 2010.</strong>。这两种算法同样是在扩展包opencv_contrib-3.2.0中，也是由于opencv<a href="https://github.com/opencv/opencv_contrib/blob/master/modules/saliency/samples/computeSaliency.cpp" target="_blank" rel="external">官方示例程序</a>对初学者不友好（主要是本人境界不够o(╯□╰)o），所以本人对照其<a href="http://docs.opencv.org/3.2.0/d8/d65/group__saliency.html" target="_blank" rel="external">官方文档</a>重新整理了一下。</p><a id="more"></a><h2 id="说明篇"><a href="#说明篇" class="headerlink" title="说明篇"></a>说明篇</h2><p>　　<strong>使用OpenCV中实现的显著性检测算法进行显著性检测十分方便简洁，利用以下三个函数就可以：</strong></p><p>创建Spectral Residual算法显著性检测对象：<code>static Ptr&lt;StaticSaliencySpectralResidual&gt; cv::saliency::StaticSaliencySpectralResidual::create();</code></p><p>Spectral Residual算法计算显著性图：<code>bool cv::saliency::StaticSaliencySpectralResidual::computeSaliency(InputArray image, OutputArray saliencyMap);</code></p><p>Fine Grained Saliency算法显著性检测对应的函数声明同Spectral Residual算法类似。</p><p>计算显著性图的二值图：<code>bool cv::saliency::StaticSaliency::computeBinaryMap(InputArray _saliencyMap, OutputArray _binaryMap) ;</code></p><p>具体使用方法可参考实例篇。</p><h2 id="实例篇"><a href="#实例篇" class="headerlink" title="实例篇"></a>实例篇</h2><p>　　使用OpenCV中的显著性检测算法需要包含头文件<code>#include &lt;opencv2/saliency.hpp&gt;</code>，具体示例程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/saliency.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//******************************************************</span></div><div class="line"><span class="comment">// [opencv_contrib/modules/saliency/src/saliency.cpp](https://github.com/opencv/opencv_contrib/blob/b7dcf141507edbe544e75820c76769a7769223ac/modules/saliency/src/saliency.cpp)</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//Ptr&lt;Saliency&gt; Saliency::create(const String&amp; saliencyType)</span></div><div class="line"><span class="comment">//&#123;</span></div><div class="line"><span class="comment">//	if (saliencyType == "SPECTRAL_RESIDUAL")</span></div><div class="line"><span class="comment">//		return makePtr&lt;StaticSaliencySpectralResidual&gt;();  //computeSaliency返回的是32FC1</span></div><div class="line"><span class="comment">//	else if (saliencyType == "FINE_GRAINED")</span></div><div class="line"><span class="comment">//		return makePtr&lt;StaticSaliencyFineGrained&gt;();	 //computeSaliency返回的是8UC1</span></div><div class="line"><span class="comment">//	else if (saliencyType == "BING")</span></div><div class="line"><span class="comment">//		return makePtr&lt;ObjectnessBING&gt;();</span></div><div class="line"><span class="comment">//	else if (saliencyType == "BinWangApr2014")</span></div><div class="line"><span class="comment">//		return makePtr&lt;MotionSaliencyBinWangApr2014&gt;();</span></div><div class="line"><span class="comment">//	return Ptr&lt;Saliency&gt;();</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// [opencv_contrib/modules/saliency/src/staticSaliency.cpp](https://github.com/opencv/opencv_contrib/blob/41b0a71ac826b1489d3e5c208ac7a95e58556caf/modules/saliency/src/staticSaliency.cpp)</span></div><div class="line"><span class="comment">//computeBinaryMap()要求输入的saliencyMap为浮点数（eg:32FC1）</span></div><div class="line"><span class="comment">//*****************************************************</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spectralResidualTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);	<span class="comment">// 载入最真实的原始图像</span></div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">// [OpenCV实现显著性检测中的谱残差法（Spectral Residual Method）涉及到了傅立叶正反变换](http://blog.csdn.net/kena_m/article/details/49406687)</span></div><div class="line">	<span class="keyword">if</span> (src_img.empty())</div><div class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (src_img.channels() == <span class="number">3</span>)</div><div class="line">		cv::cvtColor(src_img, src_img, CV_BGR2GRAY);</div><div class="line">	cv::Mat planes[] = &#123; cv::Mat_&lt;<span class="keyword">float</span>&gt;(src_img), cv::Mat::zeros(src_img.size(), CV_32F) &#125;;</div><div class="line">	cv::Mat complex_img; <span class="comment">//复数矩阵</span></div><div class="line">	merge(planes, <span class="number">2</span>, complex_img); <span class="comment">//把单通道矩阵组合成复数形式的双通道矩阵</span></div><div class="line">	dft(complex_img, complex_img);  <span class="comment">// 使用离散傅立叶变换</span></div><div class="line"></div><div class="line">	<span class="comment">//对复数矩阵进行处理，方法为谱残差</span></div><div class="line">	cv::Mat magnitude, phase_angle, mag_mean;</div><div class="line">	cv::Mat real_part, imaginary_part;</div><div class="line">	split(complex_img, planes); <span class="comment">//分离复数到实部和虚部</span></div><div class="line">	real_part = planes[<span class="number">0</span>]; <span class="comment">//实部</span></div><div class="line">	imaginary_part = planes[<span class="number">1</span>]; <span class="comment">//虚部</span></div><div class="line">	cv::magnitude(real_part, imaginary_part, magnitude); <span class="comment">//计算幅值</span></div><div class="line">	phase(real_part, imaginary_part, phase_angle); <span class="comment">//计算相角</span></div><div class="line"></div><div class="line">	<span class="keyword">float</span> *pre, *pim, *pm, *pp;</div><div class="line">	<span class="comment">//对幅值进行对数化</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magnitude.rows; i++)</div><div class="line">	&#123;</div><div class="line">		pm = magnitude.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; magnitude.cols; j++)</div><div class="line">		&#123;</div><div class="line">			*pm = <span class="built_in">log</span>(*pm);</div><div class="line">			pm++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	blur(magnitude, mag_mean, cv::Size(<span class="number">5</span>, <span class="number">5</span>)); <span class="comment">//对数谱的均值滤波</span></div><div class="line">	magnitude = magnitude - mag_mean; <span class="comment">//求取对数频谱残差</span></div><div class="line">	<span class="comment">//把对数谱残差的幅值和相角划归到复数形式</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magnitude.rows; i++)</div><div class="line">	&#123;</div><div class="line">		pre = real_part.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		pim = imaginary_part.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		pm = magnitude.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		pp = phase_angle.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; magnitude.cols; j++)</div><div class="line">		&#123;</div><div class="line">			*pm = <span class="built_in">exp</span>(*pm);</div><div class="line">			*pre = *pm * <span class="built_in">cos</span>(*pp);</div><div class="line">			*pim = *pm * <span class="built_in">sin</span>(*pp);</div><div class="line">			pre++;</div><div class="line">			pim++;</div><div class="line">			pm++;</div><div class="line">			pp++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	cv::Mat planes1[] = &#123; cv::Mat_&lt;<span class="keyword">float</span>&gt;(real_part), cv::Mat_&lt;<span class="keyword">float</span>&gt;(imaginary_part) &#125;;</div><div class="line"></div><div class="line">	merge(planes1, <span class="number">2</span>, complex_img); <span class="comment">//重新整合实部和虚部组成双通道形式的复数矩阵</span></div><div class="line">	idft(complex_img, complex_img, cv::DFT_SCALE); <span class="comment">// 傅立叶反变换</span></div><div class="line">	split(complex_img, planes); <span class="comment">//分离复数到实部和虚部</span></div><div class="line">	real_part = planes[<span class="number">0</span>];</div><div class="line">	imaginary_part = planes[<span class="number">1</span>];</div><div class="line">	cv::magnitude(real_part, imaginary_part, magnitude); <span class="comment">//计算幅值和相角</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magnitude.rows; i++)</div><div class="line">	&#123;</div><div class="line">		pm = magnitude.ptr&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; magnitude.cols; j++)</div><div class="line">		&#123;</div><div class="line">			*pm = (*pm) * (*pm);</div><div class="line">			pm++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	GaussianBlur(magnitude, magnitude, cv::Size(<span class="number">7</span>, <span class="number">7</span>), <span class="number">2.5</span>, <span class="number">2.5</span>);</div><div class="line">	cv::Mat invDFT, invDFTcvt;</div><div class="line">	normalize(magnitude, invDFT, <span class="number">0</span>, <span class="number">255</span>, cv::NORM_MINMAX); <span class="comment">//归一化到[0,255]供显示</span></div><div class="line">	invDFT.convertTo(invDFTcvt, CV_8U); <span class="comment">//转化成CV_8U型</span></div><div class="line">	cv::namedWindow(<span class="string">"SpectualResidual"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"SpectualResidual"</span>, invDFTcvt);</div><div class="line"></div><div class="line">	cv::Mat thresholded;</div><div class="line">	cv::threshold(invDFTcvt, thresholded, <span class="number">0</span>, <span class="number">255</span>, CV_THRESH_OTSU);</div><div class="line">	cv::namedWindow(<span class="string">"Thresholded Image"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"Thresholded Image"</span>, thresholded);</div><div class="line"></div><div class="line">	cv::Mat eroded;</div><div class="line">	<span class="comment">// 纵向腐蚀</span></div><div class="line">	cv::erode(thresholded, eroded, cv::Mat(<span class="number">5</span>, <span class="number">1</span>, CV_8UC1, cv::Scalar(<span class="number">1</span>)), cv::Point(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">3</span>);	<span class="comment">// cv::Point(-1,-1)为默认参数，代表原点（描点）为矩阵中心</span></div><div class="line">	cv::namedWindow(<span class="string">"eroded Image"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"eroded Image"</span>, eroded);</div><div class="line"></div><div class="line">	<span class="comment">//cv::Mat thresholded;</span></div><div class="line">	cv::threshold(eroded, thresholded, <span class="number">60</span>, <span class="number">255</span>, CV_THRESH_BINARY);</div><div class="line">	cv::namedWindow(<span class="string">"Thresholded eroded Image"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"Thresholded eroded Image"</span>, thresholded);</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">// 显著性检测算法基类</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">saliencyTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);</div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (src_img.empty())</div><div class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (src_img.channels() == <span class="number">3</span>)</div><div class="line">		cv::cvtColor(src_img, src_img, CV_BGR2GRAY);</div><div class="line"></div><div class="line">	cv::Ptr&lt;cv::saliency::Saliency&gt; saliency_algorithm = cv::saliency::Saliency::create(<span class="string">"SPECTRAL_RESIDUAL"</span>);	<span class="comment">// FINE_GRAINED为Fine Grained Saliency算法</span></div><div class="line">	cv::Mat saliency_map;</div><div class="line">	<span class="keyword">if</span> (saliency_algorithm-&gt;computeSaliency(src_img, saliency_map))	<span class="comment">// 计算显著性图</span></div><div class="line">	&#123;</div><div class="line">		cv::namedWindow(<span class="string">"SR saliency map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">		cv::imshow(<span class="string">"SR saliency map"</span>, saliency_map);</div><div class="line"></div><div class="line">		cv::Mat saliency_map_show(saliency_map.size(), CV_8UC1);</div><div class="line">		normalize(saliency_map, saliency_map_show, <span class="number">0</span>, <span class="number">255</span>, CV_MINMAX); <span class="comment">//归一化到[0,255]供显示</span></div><div class="line">		saliency_map_show.convertTo(saliency_map_show, CV_8U); <span class="comment">//转化成CV_8U型</span></div><div class="line">		cv::namedWindow(<span class="string">"saliency_map_show"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">		cv::imshow(<span class="string">"saliency_map_show"</span>, saliency_map_show);</div><div class="line"></div><div class="line">		cv::Mat binary_map;</div><div class="line">		cv::saliency::StaticSaliencySpectralResidual spec;</div><div class="line">		<span class="keyword">if</span> (spec.computeBinaryMap(saliency_map, binary_map))	<span class="comment">// 对显著性图进行二值化</span></div><div class="line">		&#123;</div><div class="line">			cv::namedWindow(<span class="string">"binary map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">			cv::imshow(<span class="string">"binary map"</span>, binary_map);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Fine Grained Saliency算法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGSTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);</div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (src_img.empty())</div><div class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (src_img.channels() == <span class="number">3</span>)</div><div class="line">		cv::cvtColor(src_img, src_img, CV_BGR2GRAY);</div><div class="line"></div><div class="line">	cv::Ptr&lt;cv::saliency::StaticSaliencyFineGrained&gt; fgs = cv::saliency::StaticSaliencyFineGrained::create();</div><div class="line">	cv::Mat fgs_saliency_map;</div><div class="line">	fgs-&gt;computeSaliency(src_img, fgs_saliency_map);</div><div class="line">	cv::namedWindow(<span class="string">"FGS saliency map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"FGS saliency map"</span>, fgs_saliency_map);</div><div class="line">	<span class="comment">//cv::imwrite("../data/T_S.png", fgs_saliency_map);</span></div><div class="line"></div><div class="line">	cv::Mat binary_map;</div><div class="line">	cv::threshold(fgs_saliency_map, binary_map, <span class="number">0</span>, <span class="number">255</span>, CV_THRESH_OTSU);</div><div class="line">	cv::namedWindow(<span class="string">"binary map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"binary map"</span>, binary_map);</div><div class="line">	<span class="comment">//cv::imwrite("../data/T_S_B.png", binary_map);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Spectral Residual算法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SRTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);</div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (src_img.empty())</div><div class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (src_img.channels() == <span class="number">3</span>)</div><div class="line">		cv::cvtColor(src_img, src_img, CV_BGR2GRAY);</div><div class="line"></div><div class="line">	cv::Ptr&lt;cv::saliency::StaticSaliencySpectralResidual&gt; sr = cv::saliency::StaticSaliencySpectralResidual::create();</div><div class="line">	cv::Mat sr_saliency_map;</div><div class="line">	sr-&gt;computeSaliency(src_img, sr_saliency_map);</div><div class="line">	cv::namedWindow(<span class="string">"SR saliency map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"SR saliency map"</span>, sr_saliency_map);</div><div class="line"></div><div class="line">	cv::Mat binary_map;</div><div class="line">	sr-&gt;computeBinaryMap(sr_saliency_map, binary_map);</div><div class="line">	cv::namedWindow(<span class="string">"binary map"</span>, CV_WND_PROP_ASPECTRATIO);</div><div class="line">	cv::imshow(<span class="string">"binary map"</span>, binary_map);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">//spectralResidualTest();</span></div><div class="line">	<span class="comment">//saliencyTest();</span></div><div class="line">	<span class="comment">//FGSTest();</span></div><div class="line">	SRTest();</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (cv::waitKey(<span class="number">0</span>) != <span class="number">27</span>) &#123; &#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　这里面有个小东西需要注意，就是<code>computeBinaryMap()</code>函数，看其文档描述其中使用<em>K-means</em>算法和<em>Otsu</em>算法对显著性图进行二值化处理，其输入的显著性图数据类型应该为浮点数，OpenCV中Spectral Residual算法computeSaliency()返回的结果为浮点数，而Fine Grained Saliency算法computeSaliency()返回的结果却是整型数据，所以这一点需要注意Fine Grained Saliency算法返回的结果不能直接使用computeBinaryMap()函数，一般对其结果直接使用OTSU算法进行阈值分割即可。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本文使用的这两种算法在本人的电脑上运行时间都较长，基本不可能用来处理视频流，而且在本人的这次实验中效果也不太理想，毕竟这是用来处理静态图像的两种显著性方法。不过OpenCV中也有用来处理视频流的显著性检测算法，其为BING算法,出自<strong>Ming-Ming Cheng, Ziming Zhang, Wen-Yan Lin, and Philip Torr. Bing: Binarized normed gradients for objectness estimation at 300fps. In <em>IEEE CVPR</em>, 2014.</strong>，实际上这是一种快速提取目标候选框的算法。</p>]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;#FA8072&quot;&gt;本文所用的OpenCV版本为opencv-3.2.0，编程语言为C++。&lt;/font&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　OpenCV中实现了两种显著性检测算法，分别为Spectral Residual算法,出自&lt;strong&gt;Xiaodi Hou and Liqing Zhang. Saliency detection: A spectral residual approach. In &lt;em&gt;Computer Vision and Pattern Recognition, 2007. CVPR’07. IEEE Conference on&lt;/em&gt;, pages 1–8. IEEE, 2007.&lt;/strong&gt; 和 Fine Grained Saliency算法,出自&lt;strong&gt;Sebastian Montabone and Alvaro Soto. Human detection using a mobile platform and novel features derived from a visual saliency mechanism. In &lt;em&gt;Image and Vision Computing, Vol. 28 Issue 3&lt;/em&gt;, pages 391–402. Elsevier, 2010.&lt;/strong&gt;。这两种算法同样是在扩展包opencv_contrib-3.2.0中，也是由于opencv&lt;a href=&quot;https://github.com/opencv/opencv_contrib/blob/master/modules/saliency/samples/computeSaliency.cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方示例程序&lt;/a&gt;对初学者不友好（主要是本人境界不够o(╯□╰)o），所以本人对照其&lt;a href=&quot;http://docs.opencv.org/3.2.0/d8/d65/group__saliency.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;重新整理了一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV中Selective Search算法的使用</title>
    <link href="http://cniter.github.io/posts/35132cb7.html"/>
    <id>http://cniter.github.io/posts/35132cb7.html</id>
    <published>2017-09-10T12:31:03.000Z</published>
    <updated>2017-12-09T12:57:13.754Z</updated>
    
    <content type="html"><![CDATA[<font color="#FA8072">本文所用的OpenCV版本为opencv-3.2.0，编程语言为C++。</font><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　OpenCV-3.2中的Selective Search算法是在其扩展包中，所以要想使用该算法需自行编译opencv_contrib-3.2.0。由于扩展包中的示例程序有点简陋，对初学者也不友好（本人编程水平有限，粗浅评价，勿怪(*&#94;__&#94; *) 嘻嘻……），所以本人参考其<a href="http://docs.opencv.org/3.2.0/d5/df0/group__ximgproc__segmentation.html" target="_blank" rel="external">官方文档</a>及其<a href="https://github.com/opencv/opencv_contrib/blob/master/modules/ximgproc/samples/selectivesearchsegmentation_demo.cpp" target="_blank" rel="external">官方示例程序</a>写下此文。</p><a id="more"></a><h2 id="说明篇"><a href="#说明篇" class="headerlink" title="说明篇"></a>说明篇</h2><p>　　该算法是选取region proposal（一般翻译成候选区域 / 区域建议）领域中的<em>state-of-the-art</em>。其算法具体思想出自<strong>Jasper RR Uijlings, Koen EA van de Sande, Theo Gevers, and Arnold WM Smeulders. Selective search for object recognition. <em>International journal of computer vision</em>, 104(2):154–171, 2013.</strong>，若英文水平不够，还想了解其中文思想请参考文末参考资料。</p><p>　　<strong>OpenCV中实现的相应函数：</strong></p><p><code>void cv::ximgproc::segmentation::SelectiveSearchSegmentation::addGraphSegmentation(Ptr&lt;GraphSegmentation&gt; g);</code>：添加相应的图割算法；</p><p><code>void cv::ximgproc::segmentation::SelectiveSearchSegmentation::addImage(InputArray img) ;</code> ：添加待处理的图片；</p><p><code>void cv::ximgproc::segmentation::SelectiveSearchSegmentation::addStrategy(Ptr&lt;SelectiveSearchSegmentationStrategy&gt; s);</code> ：添加相应的策略（颜色相似度、纹理相似度、尺寸相似度和填充相似度）；</p><p><code>void cv::ximgproc::segmentation::SelectiveSearchSegmentation::process(std::vector&lt;Rect&gt; &amp;rects);</code>：结合图割算法和相应策略进行处理，返回候选框。</p><h2 id="实例篇"><a href="#实例篇" class="headerlink" title="实例篇"></a>实例篇</h2><p>　　使用Selective Search算法需包含<code>#include &lt;opencv2/ximgproc.hpp&gt;</code>，完整示例程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/ximgproc.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SSTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// [Image segmentation](http://docs.opencv.org/3.2.0/d5/df0/group__ximgproc__segmentation.html#ga5e3e721c5f16e34d3ad52b9eeb6d2860) </span></div><div class="line"></div><div class="line">	cv::Mat src_img = cv::imread(<span class="string">"../data/true.png"</span>, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);	<span class="comment">// 载入原始图像</span></div><div class="line">	cv::namedWindow(<span class="string">"src_img"</span>, CV_WINDOW_KEEPRATIO);</div><div class="line">	cv::imshow(<span class="string">"src_img"</span>, src_img);</div><div class="line"></div><div class="line">	<span class="comment">//// 转换为灰度图</span></div><div class="line">	<span class="comment">//cv::Mat gray_img;</span></div><div class="line">	<span class="comment">//cvtColor(src_img, gray_img, cv::COLOR_BGR2GRAY);</span></div><div class="line"></div><div class="line">	<span class="comment">// 图割算法</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::GraphSegmentation&gt; gs = cv::ximgproc::segmentation::createGraphSegmentation();</div><div class="line">	cv::Mat graph_segmented;</div><div class="line">	gs-&gt;processImage(src_img, graph_segmented);</div><div class="line">	normalize(graph_segmented, graph_segmented, <span class="number">0</span>, <span class="number">255</span>, CV_MINMAX); <span class="comment">// 归一化到[0,255]供显示</span></div><div class="line">	graph_segmented.convertTo(graph_segmented, CV_8U); <span class="comment">// 数据类型转化成CV_8U型</span></div><div class="line">	<span class="comment">// cvtColor(graph_segmented, graph_segmented, CV_GRAY2BGR);</span></div><div class="line">	cv::namedWindow(<span class="string">"graph_segmented"</span>, CV_WINDOW_KEEPRATIO);</div><div class="line">	imshow(<span class="string">"graph_segmented"</span>, graph_segmented);</div><div class="line"></div><div class="line">	<span class="comment">// 为selective search算法添加图割算法处理结果</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentation&gt; ss = cv::ximgproc::segmentation::createSelectiveSearchSegmentation();</div><div class="line">	ss-&gt;addGraphSegmentation(gs);</div><div class="line"></div><div class="line">	ss-&gt;addImage(src_img);	<span class="comment">// 添加待处理的图片</span></div><div class="line"></div><div class="line">	<span class="comment">// 自定义策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss_color = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyColor();	<span class="comment">// 颜色相似度策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss_texture = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyTexture();	<span class="comment">// 纹理相似度策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss_size = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategySize();	<span class="comment">// 尺寸相似度策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss_fill = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyFill();	<span class="comment">// 填充相似度策略</span></div><div class="line">	<span class="comment">// 添加策略</span></div><div class="line">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy&gt; sss = cv::ximgproc::segmentation::createSelectiveSearchSegmentationStrategyMultiple(sss_color, sss_texture, sss_size, sss_fill);	<span class="comment">// 合并以上4种策略</span></div><div class="line">	ss-&gt;addStrategy(sss);</div><div class="line"></div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Rect&gt; regions;</div><div class="line">	ss-&gt;process(regions);	<span class="comment">// 处理结果</span></div><div class="line"></div><div class="line">	<span class="comment">// 显示结果</span></div><div class="line">	cv::Mat show_img = src_img.clone();</div><div class="line">	<span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Rect&gt;::iterator it_r = regions.begin(); it_r != regions.end(); ++it_r)</div><div class="line">	&#123;</div><div class="line">		cv::rectangle(show_img, *it_r, cv::Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>);</div><div class="line">	&#125;</div><div class="line">	cv::namedWindow(<span class="string">"show_img"</span>, CV_WINDOW_KEEPRATIO);</div><div class="line">	imshow(<span class="string">"show_img"</span>, show_img);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">// -------忽略上述步骤，直接采用方便算法提取候选区域------------------------</span></div><div class="line">	<span class="comment">/***************************************************************************</span></div><div class="line"><span class="comment">	cv::Ptr&lt;cv::ximgproc::segmentation::SelectiveSearchSegmentation&gt; ss = cv::ximgproc::segmentation::createSelectiveSearchSegmentation();</span></div><div class="line"><span class="comment">	ss-&gt;setBaseImage(src_img);	// 采用switch* functions提取候选区域</span></div><div class="line"><span class="comment">	ss-&gt;switchToSelectiveSearchFast();	// 快速提取区域</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">	std::vector&lt;cv::Rect&gt; rects;</span></div><div class="line"><span class="comment">	ss-&gt;process(rects);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">	int nb_rects = 10;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">	char c = (char)cv::waitKey();</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">	while (c != 'q')</span></div><div class="line"><span class="comment">	&#123;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		cv::Mat wimg = src_img.clone();</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		int i = 0;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		for (std::vector&lt;cv::Rect&gt;::iterator it = rects.begin(); it != rects.end(); ++it)</span></div><div class="line"><span class="comment">		&#123;</span></div><div class="line"><span class="comment">			if (i++ &lt; nb_rects)</span></div><div class="line"><span class="comment">			&#123;</span></div><div class="line"><span class="comment">				cv::rectangle(wimg, *it, cv::Scalar(0, 0, 255), 3);</span></div><div class="line"><span class="comment">			&#125;</span></div><div class="line"><span class="comment">		&#125;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		cv::namedWindow("Output", CV_WINDOW_KEEPRATIO);</span></div><div class="line"><span class="comment">		imshow("Output", wimg);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		c = (char)cv::waitKey();</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		if (c == 'd')</span></div><div class="line"><span class="comment">		&#123;</span></div><div class="line"><span class="comment">			nb_rects += 10;</span></div><div class="line"><span class="comment">		&#125;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">		if (c == 'a' &amp;&amp; nb_rects &gt; 10)</span></div><div class="line"><span class="comment">		&#123;</span></div><div class="line"><span class="comment">			nb_rects -= 10;</span></div><div class="line"><span class="comment">		&#125;</span></div><div class="line"><span class="comment">	&#125;</span></div><div class="line"><span class="comment">	********************************************************/</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	SSTest();</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (cv::waitKey(<span class="number">0</span>) != <span class="number">27</span>) &#123;&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　使用该算法，要想达到理想效果，一般需要调整图割算法的参数或注释中方法<code>switchToSelectiveSearchFast()</code>的参数。本人的这次实验为了达到理想的选取的效果，其调整参数花了不少时间，而且该算法运行时间在本人电脑上略显长。GitHub上也有大神自己用opencv实现了该算法，参考<a href="https://github.com/watanika/selective-search-cpp" target="_blank" rel="external">watanika/selective-search-cpp</a>，该算法的参数感觉比OpenCV自带的Selective Search算法要好调一些，但优化效果没有opencv好，其运行时间在本人电脑上更长。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://jermmy.xyz/2017/05/04/2017-5-4-paper-notes-selective-search/" target="_blank" rel="external">论文笔记：Selective Search for Object Recognition</a>（<a href="http://jermmy.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/" target="_blank" rel="external">http://jermmy.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/</a> ）</p><p>[2] <a href="http://blog.csdn.net/langb2014/article/details/52575507" target="_blank" rel="external">Selective Search for Object Recognition(阅读)</a>（<a href="http://blog.csdn.net/langb2014/article/category/5772811" target="_blank" rel="external">http://blog.csdn.net/langb2014/article/category/5772811</a> ）</p><p>[3] <a href="http://blog.csdn.net/csyhhb/article/details/50425114" target="_blank" rel="external">论文笔记 《Selective Search for Object Recognition》</a>（<a href="http://blog.csdn.net/csyhhb/article/category/6048588" target="_blank" rel="external">http://blog.csdn.net/csyhhb/article/category/6048588</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;#FA8072&quot;&gt;本文所用的OpenCV版本为opencv-3.2.0，编程语言为C++。&lt;/font&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　OpenCV-3.2中的Selective Search算法是在其扩展包中，所以要想使用该算法需自行编译opencv_contrib-3.2.0。由于扩展包中的示例程序有点简陋，对初学者也不友好（本人编程水平有限，粗浅评价，勿怪(*&amp;#94;__&amp;#94; *) 嘻嘻……），所以本人参考其&lt;a href=&quot;http://docs.opencv.org/3.2.0/d5/df0/group__ximgproc__segmentation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;及其&lt;a href=&quot;https://github.com/opencv/opencv_contrib/blob/master/modules/ximgproc/samples/selectivesearchsegmentation_demo.cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方示例程序&lt;/a&gt;写下此文。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Win10以树形结构显示文件目录结构</title>
    <link href="http://cniter.github.io/posts/c3f26b1.html"/>
    <id>http://cniter.github.io/posts/c3f26b1.html</id>
    <published>2017-09-05T09:08:34.000Z</published>
    <updated>2017-12-09T12:57:13.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　<del>本文其实可以算是标题党，Windows本身并不能以树形结构显示文件目录结构，一般需要借助第三方工具</del>（后面去网上搜索了一下，发现Windows居然也有一个tree命令o(╯□╰)o），Windows虽然能用命令行显示树形结构文件目录，但不像Linux那样可以输入一些参数控制其输出。Win10有个特殊的功能，就是可以使用Ubuntu的bash，只需要开启这个有趣的功能，就可以将Win10当Ubuntu使用，从而像Linux那样只输入相关命令即可显示树形结构文件目录。</p><font color="#FA8072">*注：值得注意的是Win10中的bash目前不支持中文输入，只能切换到英文输入才能正常输入。</font><a id="more"></a><h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>首先需要在Win10下开启bash功能。具体开启方法为：</p><ol><li>打开 <strong>Win图标</strong> ==》 <strong>设置</strong> ==》 <strong>更新和安全</strong> ==》 <strong>针对开发人员</strong>（左侧），选中<strong>开发人员模式</strong>，</li><li>打开 <strong>Win图标</strong> ==》 <strong>设置</strong> ==》 <strong>应用</strong> ==》 <strong>应用和功能</strong>（左侧） ==》 <strong>程序和功能</strong>（最下面的相关设置中） ==》 <strong>启用或关闭Windows功能</strong>（左侧），选中<strong>适用于Linux的Windows子系统(Beta)</strong>后点击确定。</li><li>重启计算机。打开bash，打开bash的方法很多，这里列出三种：1、直接在微软小娜中输入关键字”<strong>bash</strong>“搜索Bash on Ubuntu on Windows；2、<code>Win键+R</code>，输入bash，点击确定即可打开bash；3、<code>Win键+R</code>，输入cmd，在cmd中输入bash，回车即可打开bash。打开bash后将会提示你是否下载安装Ubuntu on Windows，输入y继续，稍等片刻即可完成下载安装。</li></ol><h2 id="设置篇"><a href="#设置篇" class="headerlink" title="设置篇"></a>设置篇</h2><p>　　安装完成后系统将会提示你设置用户名和密码。（如果这一步设置成功可以直接跳过设置篇直接看使用篇）。不知道怎的，本人这一步没有完成，每次系统都是直接以root用户登录，而且没有密码，为了安全考虑，也幸好登录时是root用户，可以自由对系统修改。所以本人需要对root密码进行修改，并创建新的用户。具体过程需执行以下命令：</p><p>root用户下，修改用户密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd 用户名 (修改密码)</div></pre></td></tr></table></figure><p>　　由于本人需要修改root密码，所以该用户名即为root，执行之后需要输入新密码（在*nix哲学中，密码是不会显示在输入屏幕中的，所以如果在输入密码时发现屏幕没有任何变化是没关系的，只管输入即可↖(&#94;ω&#94;)↗），两次输入完成后会显示密码更新成功。</p><p>接下来需要创建新的普通用户，在root用户下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adduser xxx <span class="comment"># 这样的命令会在home目录下添加一个帐号</span></div></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd xxx <span class="comment">#仅仅是添加用户，不会在home目录添加帐号</span></div></pre></td></tr></table></figure><p>　　推荐使用前者，这样可以很明确已经成功创建新用户，而且如果用户需要存放一些文件也更安全和方便。</p><p>　　在*nix中，绝对不推荐直接使用root用户对系统执行各种命令，毕竟其权限太大，一旦误操作将造成无法挽回的后果。有些命令普通用户可能没有权限执行，这时需要提高其权限，普通用户临时获取root权限的方法为：在需要执行的命令前添加<code>sudo</code>，像上文中如果普通用户需要创建新用户xxx则需要执行<code>sudo adduser xxx</code>，执行以上命令后同样需要输入新用户的密码。</p><h2 id="使用篇"><a href="#使用篇" class="headerlink" title="使用篇"></a>使用篇</h2><p>　　先切换至普通用户，执行<code>su xxx</code>切换用户，即可发现shell提示符由<code>#</code>变为<code>$</code>，前面的用户名由<code>root</code>变为<code>xxx</code>；执行<code>cd ~</code>切换至用户目录。由于Ubuntu系统中本身没有tree这个命令，需要执行以下命令安装tree命令工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install tree</div></pre></td></tr></table></figure><p>　　直接输入<code>tree</code>命令，系统将会自动以树形结构列出当前目录中所有文件及文件夹；执行<code>tree -L N</code> 命令，以树形结构查看当前N级的目录和文件，eg：以树形结构查看当前目录二级文件结构，则执行<code>tree -L 2</code>。若想将输出的2级文件结构保存至上一层文件的tree.txt文件中，可执行<code>tree -L 2 &gt; ../tree.txt</code>，进入上一层目录<code>cd ..</code>，打开tree.txt即可发现该目录的文件结构。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　遇事还是需要多查证一下啊，想当然果然是会出问题的，文章开头差点就犯错误了~(≧▽≦)/~。本文其实是在写<a href="https://cniter.github.io/2017/08/28/Win10%EF%BC%8BVS2013%EF%BC%8BCMake-gui%E7%BC%96%E8%AF%91%E5%92%8C%E9%85%8D%E7%BD%AEOpenCV-3-2-0/">Win10＋VS2013＋CMake-gui编译和配置OpenCV-3.2.0</a>时，为了方便显示输出文件结构而查找的相关资料。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<a href="http://jingyan.baidu.com/article/acf728fd19c7eff8e510a3eb.html" target="_blank" rel="external">linux tree命令以树形结构显示文件目录结构</a>（<a href="http://jingyan.baidu.com/tag?tagName=linux" target="_blank" rel="external">http://jingyan.baidu.com/tag?tagName=linux</a> ）</p><p>[2] <a href="http://jingyan.baidu.com/article/b24f6c822acbbb86bee5da75.html" target="_blank" rel="external">win tree命令 tree导出目录 tree显示树形结构</a>（<a href="http://jingyan.baidu.com/tag?tagName=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">http://jingyan.baidu.com/tag?tagName=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F</a> ）</p><p>[3] <a href="http://jingyan.baidu.com/article/39810a23957df3b636fda6cb.html" target="_blank" rel="external">win10下linux系统的安装（开启）和使用</a></p><p>[4] <a href="http://www.linuxidc.com/Linux/2012-06/62985.htm" target="_blank" rel="external">Ubuntu建立和删除用户</a></p><p>[5] <a href="http://www.jb51.net/article/46429.htm" target="_blank" rel="external">linux修改root密码和linux忘记root密码后找回密码的方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　&lt;del&gt;本文其实可以算是标题党，Windows本身并不能以树形结构显示文件目录结构，一般需要借助第三方工具&lt;/del&gt;（后面去网上搜索了一下，发现Windows居然也有一个tree命令o(╯□╰)o），Windows虽然能用命令行显示树形结构文件目录，但不像Linux那样可以输入一些参数控制其输出。Win10有个特殊的功能，就是可以使用Ubuntu的bash，只需要开启这个有趣的功能，就可以将Win10当Ubuntu使用，从而像Linux那样只输入相关命令即可显示树形结构文件目录。&lt;/p&gt;&lt;font color=&quot;#FA8072&quot;&gt;*注：值得注意的是Win10中的bash目前不支持中文输入，只能切换到英文输入才能正常输入。&lt;/font&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="unix-like" scheme="http://cniter.github.io/tags/unix-like/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加站内本地搜索</title>
    <link href="http://cniter.github.io/posts/4f6225b7.html"/>
    <id>http://cniter.github.io/posts/4f6225b7.html</id>
    <published>2017-09-01T08:23:39.000Z</published>
    <updated>2017-12-09T12:57:13.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　虽然本人博客目前数量不多，质量也不高，但抱着搞事的心态，先弄它一个站内本地搜索再说。</p><a id="more"></a><h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>　　要想使用本地搜索功能，首先需要安装相应的搜索插件<code>hexo-generator-searchdb</code>，网上可能大多数用的是hexo-generator-search这个插件，也有都装的，但本人就只安装这一个了，好像<code>hexo-generator-searchdb</code>更完善一点，由于本人前端接触的极少，所以就没有一一对比了，网上也没查到具体对比情况，有兴趣的童靴可以试试(╯▽╰)。至于具体安装如下，在站点根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure><p>　　安装完之后重新生成页面，将会发现<strong>public文件夹</strong>下多出一个<code>search.xml</code>文件。然后在配置文件<code>_config.yml</code>中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 站点本地搜索</span></div><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></div><div class="line"><span class="attr">  field:</span> <span class="string">all</span></div></pre></td></tr></table></figure><p>其中：</p><ul><li><strong>path</strong> - 指定生成的索引数据的文件名。默认为 search.xml 。</li><li><strong>field</strong> - 指定索引数据的生成范围。可选值包括：<ul><li><strong>post</strong> - 只生成博客文章（post）的索引（默认）；</li><li><strong>page</strong> - 只生成其他页面（page）的索引；</li><li><strong>all</strong> - 生成所有文章和页面的索引。</li></ul></li></ul><p>　　至于是在<strong>主题配置文件</strong>，还是在<strong>站点配置文件</strong>中添加，个人觉得都没关系，附：本人是在主题配置文件中添加的。</p><p>接下来就需要修改原主题的代码了。</p><h2 id="改码篇"><a href="#改码篇" class="headerlink" title="改码篇"></a>改码篇</h2><p>　　由于本人博客主题是基于<strong>SPFK</strong>对照着<strong>black-blue</strong>进行修改的，而且因为<strong>black-blue</strong>是有搜索的（本人不知道<strong>black-blue</strong>主题的作者是如何完成的，借助了什么技术），所以本人就看<strong>black-blue</strong>的搜索功能是修改了<strong>SPFK</strong>哪个地方，再将相应的代码添加至<strong>SPFK</strong>中（其中相应的代码来自<a href="http://moxfive.xyz/2016/05/31/hexo-local-search/" target="_blank" rel="external">让 Hexo 博客支持本地站内搜索</a>），从而逐渐完成本次搜索功能。</p><p>首先找到spfk主题下的<code>left-col.ejs</code>文件，对其修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.search_box)&#123; %&gt;</div><div class="line">            &lt;!-- &lt;form&gt;</div><div class="line">                &lt;input type=&quot;text&quot; class=&quot;st-default-search-input search&quot; id=&quot;search&quot; placeholder=&quot; Search...&quot;&gt;</div><div class="line">            &lt;/form&gt; --&gt;</div><div class="line"></div><div class="line">            &lt;form id=&quot;search-form&quot;&gt; &lt;!-- 搜索框相关 --&gt;</div><div class="line">                &lt;input type=&quot;text&quot; id=&quot;local-search-input&quot; name=&quot;q&quot; results=&quot;0&quot; placeholder=&quot;Search...&quot; class=&quot;search form-control&quot; autocomplete=&quot;off&quot; autocorrect=&quot;off&quot;/&gt;</div><div class="line">                &lt;i class=&quot;fa fa-times&quot; onclick=&quot;resetSearch()&quot;&gt;&lt;/i&gt; &lt;!-- 清空/重置搜索框 --&gt;</div><div class="line">            &lt;/form&gt;</div><div class="line">            &lt;div id=&quot;local-search-result&quot;&gt;&lt;/div&gt; &lt;!-- 搜索结果区 --&gt;</div><div class="line">            &lt;p class=&apos;no-result&apos;&gt;No results found &lt;/p&gt; &lt;!-- 无匹配时显示，注意请在 CSS 中设置默认隐藏 --&gt;</div><div class="line">        &lt;%&#125;%&gt;</div></pre></td></tr></table></figure><p>其次找到spfk主题下的<code>after-footer.ejs</code>文件，将其修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.search_box)&#123; %&gt;</div><div class="line">    &lt;!-- &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">      window.onload = function()&#123;</div><div class="line">        document.getElementById(&quot;search&quot;).onclick = function()&#123;</div><div class="line">            console.log(&quot;search&quot;)</div><div class="line">            search();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      function search()&#123;</div><div class="line">        (function(w,d,t,u,n,s,e)&#123;w[&apos;SwiftypeObject&apos;]=n;w[n]=w[n]||function()&#123;</div><div class="line">        (w[n].q=w[n].q||[]).push(arguments);&#125;;s=d.createElement(t);</div><div class="line">        e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);</div><div class="line">        &#125;)(window,document,&apos;script&apos;,&apos;//s.swiftypecdn.com/install/v2/st.js&apos;,&apos;_st&apos;);</div><div class="line"></div><div class="line">        _st(&apos;install&apos;,&apos;A1Pz-LKMXbrzcFg2FWi6&apos;,&apos;2.0.0&apos;);</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt; --&gt;</div><div class="line"></div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">      // 激活搜索框时才搜索</div><div class="line">        var inputArea = document.querySelector(&quot;#local-search-input&quot;);</div><div class="line">        var getSearchFile = function()&#123;</div><div class="line">          // 调用搜索函数</div><div class="line">          var search_path = &quot;&lt;%- config.search.path %&gt;&quot;;</div><div class="line">          if (search_path.length == 0) &#123;</div><div class="line">             search_path = &quot;search.xml&quot;;</div><div class="line">          &#125;</div><div class="line">          var path = &quot;&lt;%- config.root %&gt;&quot; + search_path;</div><div class="line">          searchFunc(path, &apos;local-search-input&apos;, &apos;local-search-result&apos;);</div><div class="line">        &#125;</div><div class="line">        inputArea.onfocus = function()&#123; getSearchFile() &#125;</div><div class="line">  </div><div class="line">        // 搜索重置</div><div class="line">        var $resetButton = $(&quot;#search-form .fa-times&quot;);</div><div class="line">        var $resultArea = $(&quot;#local-search-result&quot;);</div><div class="line">        inputArea.oninput = function()&#123; $resetButton.show(); &#125;</div><div class="line">        resetSearch = function()&#123;</div><div class="line">          $resultArea.html(&quot;&quot;);</div><div class="line">          document.querySelector(&quot;#search-form&quot;).reset();</div><div class="line">          $resetButton.hide();</div><div class="line">          $(&quot;.no-result&quot;).hide();</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        // 屏蔽回车</div><div class="line">        inputArea.onkeydown = function()&#123; if(event.keyCode==13) return false&#125;</div><div class="line">  </div><div class="line">        // 无搜索结果</div><div class="line">        $resultArea.bind(&quot;DOMNodeRemoved DOMNodeInserted&quot;, function(e) &#123;</div><div class="line">          if (!$(e.target).text()) &#123;</div><div class="line">            $(&quot;.no-result&quot;).show(200); </div><div class="line">          &#125; else &#123;</div><div class="line">            $(&quot;.no-result&quot;).hide();</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">  </div><div class="line">        // 搜索函数</div><div class="line">        var searchFunc = function(path, search_id, content_id) &#123;</div><div class="line">          &apos;use strict&apos;;</div><div class="line">          $.ajax(&#123;</div><div class="line">            url: path,</div><div class="line">            dataType: &quot;xml&quot;,</div><div class="line">            success: function( xmlResponse ) &#123;</div><div class="line">                // get the contents from search data</div><div class="line">                var datas = $( &quot;entry&quot;, xmlResponse ).map(function() &#123;</div><div class="line">                    return &#123;</div><div class="line">                        title: $( &quot;title&quot;, this ).text(),</div><div class="line">                        content: $(&quot;content&quot;,this).text(),</div><div class="line">                        url: $( &quot;url&quot; , this).text()</div><div class="line">                    &#125;;</div><div class="line">                &#125;).get();</div><div class="line">                var $input = document.getElementById(search_id);</div><div class="line">                var $resultContent = document.getElementById(content_id);</div><div class="line">                $input.addEventListener(&apos;input&apos;, function()&#123;</div><div class="line">                    var str=&apos;&lt;ul class=\&quot;search-result-list\&quot;&gt;&apos;;                </div><div class="line">                    var keywords = this.value.trim().toLowerCase().split(/[\s\-]+/);</div><div class="line">                    $resultContent.innerHTML = &quot;&quot;;</div><div class="line">                    if (this.value.trim().length &lt;= 0) &#123;</div><div class="line">                        return;</div><div class="line">                    &#125;</div><div class="line">                    // perform local searching</div><div class="line">                    datas.forEach(function(data) &#123;</div><div class="line">                        var isMatch = true;</div><div class="line">                        var content_index = [];</div><div class="line">                        var data_title = data.title.trim().toLowerCase();</div><div class="line">                        var data_content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g,&quot;&quot;).toLowerCase();</div><div class="line">                        var data_url = data.url;</div><div class="line">                        var index_title = -1;</div><div class="line">                        var index_content = -1;</div><div class="line">                        var first_occur = -1;</div><div class="line">                        // only match artiles with not empty titles and contents</div><div class="line">                        if(data_title != &apos;&apos; &amp;&amp; data_content != &apos;&apos;) &#123;</div><div class="line">                            keywords.forEach(function(keyword, i) &#123;</div><div class="line">                                index_title = data_title.indexOf(keyword);</div><div class="line">                                index_content = data_content.indexOf(keyword);</div><div class="line">                                if( index_title &lt; 0 &amp;&amp; index_content &lt; 0 )&#123;</div><div class="line">                                    isMatch = false;</div><div class="line">                                &#125; else &#123;</div><div class="line">                                    if (index_content &lt; 0) &#123;</div><div class="line">                                        index_content = 0;</div><div class="line">                                    &#125;</div><div class="line">                                    if (i == 0) &#123;</div><div class="line">                                        first_occur = index_content;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line">                        &#125;</div><div class="line">                        // show search results</div><div class="line">                        if (isMatch) &#123;</div><div class="line">                            str += &quot;&lt;li&gt;&lt;a href=&apos;/&quot;+ data_url +&quot;&apos; class=&apos;search-result-title&apos; target=&apos;_blank&apos;&gt;&quot;+ &quot;&gt; &quot; + data_title +&quot;&lt;/a&gt;&quot;;</div><div class="line">                            var content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g,&quot;&quot;);</div><div class="line">                            if (first_occur &gt;= 0) &#123;</div><div class="line">                                // cut out characters</div><div class="line">                                var start = first_occur - 6;</div><div class="line">                                var end = first_occur + 6;</div><div class="line">                                if(start &lt; 0)&#123;</div><div class="line">                                    start = 0;</div><div class="line">                                &#125;</div><div class="line">                                if(start == 0)&#123;</div><div class="line">                                    end = 10;</div><div class="line">                                &#125;</div><div class="line">                                if(end &gt; content.length)&#123;</div><div class="line">                                    end = content.length;</div><div class="line">                                &#125;</div><div class="line">                                var match_content = content.substr(start, end); </div><div class="line">                                // highlight all keywords</div><div class="line">                                keywords.forEach(function(keyword)&#123;</div><div class="line">                                    var regS = new RegExp(keyword, &quot;gi&quot;);</div><div class="line">                                    match_content = match_content.replace(regS, &quot;&lt;em class=\&quot;search-keyword\&quot;&gt;&quot;+keyword+&quot;&lt;/em&gt;&quot;);</div><div class="line">                                &#125;)</div><div class="line">                                str += &quot;&lt;p class=\&quot;search-result\&quot;&gt;&quot; + match_content +&quot;...&lt;/p&gt;&quot;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                    $resultContent.innerHTML = str;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;%&#125;%&gt;</div></pre></td></tr></table></figure><p>最后找到spfk主题下的<code>main.styl</code>文件，在其末尾添加：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*搜索框*/</span></div><div class="line"><span class="selector-class">.search</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">68%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">18px</span>;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">font-family</span>: inherit;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid transparent;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0.65</span>;</div><div class="line">  <span class="attribute">background</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.search</span>:hover &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*搜索重置按钮*/</span></div><div class="line"><span class="selector-id">#search-form</span> <span class="selector-class">.fa-times</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">0.7em</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.15</span>);</div><div class="line">  <span class="attribute">cursor</span>: pointer;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#4094c7</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#search-form</span> <span class="selector-class">.fa-times</span>:active &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#d3d3d3</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#search-form</span> <span class="selector-class">.fa-times</span>:hover &#123;</div><div class="line">  zoom: <span class="number">1.1</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">0.6em</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.25</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*搜索结果区*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> &#123;</div><div class="line">  <span class="comment">//margin: auto -12% auto -6%;</span></div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</div><div class="line">  <span class="attribute">text-align</span>: left;</div><div class="line">  <span class="attribute">word-break</span>: break-all;</div><div class="line"></div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">6px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.46</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">ul</span><span class="selector-class">.search-result-list</span> <span class="selector-tag">li</span>:hover &#123;</div><div class="line">  <span class="attribute">font-weight</span>: normal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*单条搜索结果*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0.5em</span> auto;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-class">.search-result-list</span> <span class="selector-tag">li</span>:hover &#123;</div><div class="line">  <span class="attribute">background</span>: rgba(<span class="number">47</span>,<span class="number">46</span>,<span class="number">46</span>,<span class="number">0.8</span>);</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*匹配的标题*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">a</span><span class="selector-class">.search-result-title</span> &#123;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#4094c7</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*搜索预览段落*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">p</span><span class="selector-class">.search-result</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0.4em</span> auto;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.2em</span>;</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">3.6em</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</div><div class="line">  <span class="attribute">text-align</span>: justify;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ffffffb3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*匹配的关键词*/</span></div><div class="line"><span class="selector-id">#local-search-result</span> <span class="selector-tag">em</span><span class="selector-class">.search-keyword</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f58e90</span>;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#f58e90</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*无匹配搜索结果时显示*/</span></div><div class="line"><span class="selector-tag">p</span><span class="selector-class">.no-result</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">2em</span> <span class="number">0</span> <span class="number">2em</span> <span class="number">6%</span>;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0.5em</span>;</div><div class="line">  <span class="attribute">text-align</span>: left;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</div><div class="line">  <span class="attribute">font-family</span>: font-serif serif;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#d3d3d3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　这里请注意，当对<code>main.styl</code>文件做以上修改时，可能会发现有两个<code>.search</code>样式，而且相差不大，这时，不要对其原有的<code>.search</code>进行修改，更不要去注释掉它，只做上述修改就不用管了，不然可能会发生一些奇怪的事o(&gt;﹏&lt;)o。本人当时做以上修改时，将其原有的<code>.search</code>样式注释掉之后，整个页面的css布局全部都乱了(╯﹏╰)，不知道为什么(⊙_⊙?)，这两个同名样式看起来明明差不多的，最后只能维持现状了，等以后有机会再看看吧，业余前端伤不起啊!╮(╯_╰)╭。</p><p>　　至此整个站内本地搜索功能基本完成，勉强可以使用站内搜索功能了。</p><h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><p>　　*注：以下问题目前都没解决╮(╯▽╰)╭。</p><font color="#FA8072">1、搜索函数返回的url地址有问题。</font><p>　　问题描述：当点击搜索结果时，新弹出的标签页地址栏中url地址会有部分乱码情况；当鼠标移到搜索的结果列表上时，浏览器左下角显示的url地址虽然没有乱码情况，但其中有一个重复的<code>/</code>符号。所幸这两个问题并没有造成浏览器解析错误，浏览器还是可以正常显示页面的。</p><font color="#FA8072">2、搜索结果区布局有问题。</font><p>　　问题描述：当显示搜索结果时，搜索结果区会上下扩张，从而将其上下本来存在的一些布局挤开，造成布局混乱。这其实不算是一个spfk主题或者新添加的搜索功能的问题，而是新添加的一个东西又没有相应的和原本布局结合的布局文件，那就极大可能会有布局混乱的问题，至于这个要和原本布局契合的搜索结果区布局文件就只有等本人以后有机会有时间再完善去喽╮(╯▽╰)╭。</p><font color="#FA8072">3、搜索框激活问题。</font><p>　　问题描述：搜索框激活延迟很大，有时过很久或者需要切换站内页面它才能激活，给人的感觉就是好像没有搜索功能似的。添加搜索框激活功能据作者<a href="http://moxfive.xyz/" target="_blank" rel="external">MOxFIVE</a>所说是为了不让索引文件影响页面加载速度，MOxFIVE同时也在文末指出了一些不足之处，如果索引文件太大，可能还是会造成一些问题，但本人的博客数量又不多，所以估计还是本人的代码混合问题，而且MOxFIVE的博客搜索功能好像没这个问题（至少本人目前没发现）。这个问题同样只有等以后再说了(*&#94;__&#94;*) 嘻嘻……。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本文添加的本地搜索还很粗糙，还有很多地方需要以后去完善。但这好歹是一个好的开始，搜索功能至少勉强能够正常使用，总比以前是个空壳要好，以后有机会再慢慢去去完善吧↖(&#94;ω&#94;)↗。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://www.hahack.com/codes/local-search-engine-for-hexo/" target="_blank" rel="external">jQuery-based Local Search Engine for Hexo</a>（<a href="http://www.hahack.com/categories/codes/" target="_blank" rel="external">http://www.hahack.com/categories/codes/</a> ）</p><p>[2] <a href="http://moxfive.xyz/2016/05/31/hexo-local-search/" target="_blank" rel="external">让 Hexo 博客支持本地站内搜索</a>（<a href="http://moxfive.xyz/tags/Hexo/" target="_blank" rel="external">http://moxfive.xyz/tags/Hexo/</a> ）</p><p>[3] <a href="https://www.ezlippi.com/blog/2017/02/hexo-search.html" target="_blank" rel="external">Hexo博客添加站内搜索</a>（<a href="https://www.ezlippi.com/categories/hexo/" target="_blank" rel="external">https://www.ezlippi.com/categories/hexo/</a> ）</p><p>[4] <a href="https://www.oyohyee.com/post/Note/LocalSearch.html" target="_blank" rel="external">Hexo本地搜索及部分SEO优化</a> （<a href="https://www.oyohyee.com/categories/Note/" target="_blank" rel="external">https://www.oyohyee.com/categories/Note/</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　虽然本人博客目前数量不多，质量也不高，但抱着搞事的心态，先弄它一个站内本地搜索再说。&lt;/p&gt;
    
    </summary>
    
      <category term="建站小记" scheme="http://cniter.github.io/categories/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://cniter.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>用OpenCV显示OpenGL图形</title>
    <link href="http://cniter.github.io/posts/302a6244.html"/>
    <id>http://cniter.github.io/posts/302a6244.html</id>
    <published>2017-08-31T01:40:31.000Z</published>
    <updated>2017-12-09T12:57:13.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本文就是一个小实验，试验OpenCV到底能不能支持OpenGL图形显示。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>　　如果在OpenCV用CMake编译时勾选<strong>WITH_OPENGL</strong>且编译一切顺利的话，编译和配置的具体步骤和情况可以看本人写的一篇文档：<a href="https://cniter.github.io/2017/08/28/Win10%EF%BC%8BVS2013%EF%BC%8BCMake-gui%E7%BC%96%E8%AF%91%E5%92%8C%E9%85%8D%E7%BD%AEOpenCV-3-2-0/">Win10＋VS2013＋CMake-gui编译和配置OpenCV-3.2.0</a> ，那么就可以用OpenCV窗口显示OpenGL图形。</p><p>　　在VS下使用Windows原有的OpenGL函数需要包含以下头文件和库文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/gl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glu.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"OpenGL32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"glu32.lib"</span>)</span></div></pre></td></tr></table></figure><p>　　在OpenCV中显示OpenGL图形需要<code>cv::namedWindow(openGLWindowName, cv::WINDOW_OPENGL)</code>，在namedWindow函数中添加cv::WINDOW_OPENGL参数说明该窗口支持OpenGL图形。</p><p>附示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/gl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glu.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"OpenGL32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"glu32.lib"</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> vertex_list[][<span class="number">3</span>] =</div><div class="line">&#123;</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">-0.5f</span>,</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">	<span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">	<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 将要使用的顶点的序号保存到一个数组里面 </span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> GLint index_list[][<span class="number">2</span>] =</div><div class="line">&#123;</div><div class="line">	&#123; <span class="number">0</span>, <span class="number">1</span> &#125;,</div><div class="line">	&#123; <span class="number">2</span>, <span class="number">3</span> &#125;,</div><div class="line">	&#123; <span class="number">4</span>, <span class="number">5</span> &#125;,</div><div class="line">	&#123; <span class="number">6</span>, <span class="number">7</span> &#125;,</div><div class="line">	&#123; <span class="number">0</span>, <span class="number">2</span> &#125;,</div><div class="line">	&#123; <span class="number">1</span>, <span class="number">3</span> &#125;,</div><div class="line">	&#123; <span class="number">4</span>, <span class="number">6</span> &#125;,</div><div class="line">	&#123; <span class="number">5</span>, <span class="number">7</span> &#125;,</div><div class="line">	&#123; <span class="number">0</span>, <span class="number">4</span> &#125;,</div><div class="line">	&#123; <span class="number">1</span>, <span class="number">5</span> &#125;,</div><div class="line">	&#123; <span class="number">7</span>, <span class="number">3</span> &#125;,</div><div class="line">	&#123; <span class="number">2</span>, <span class="number">6</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">float</span> rotate = <span class="number">0</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line"></div><div class="line">GLint windowWidth = <span class="number">800</span>;</div><div class="line">GLint windowHeight = <span class="number">800</span>;</div><div class="line"></div><div class="line">GLfloat xRotAngle = <span class="number">-75.0f</span>;</div><div class="line">GLfloat yRotAngle = <span class="number">0.0f</span>;</div><div class="line">GLfloat zRotAngle = <span class="number">-135.0f</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> MIN_X = <span class="number">-200</span>;</div><div class="line"><span class="keyword">float</span> MAX_X = <span class="number">200</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> MIN_Y = <span class="number">-200</span>;</div><div class="line"><span class="keyword">float</span> MAX_Y = <span class="number">200</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> MIN_Z = <span class="number">-200</span>;</div><div class="line"><span class="keyword">float</span> MAX_Z = <span class="number">200</span>;</div><div class="line"></div><div class="line">GLfloat coordinatesize = <span class="number">200.0f</span>;</div><div class="line">GLfloat ratio = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> z1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2, <span class="keyword">float</span> z2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	glBegin(GL_LINES);</div><div class="line">	glVertex3f(x1, y1, z1);</div><div class="line">	glVertex3f(x2, y2, z2);</div><div class="line">	glEnd();</div><div class="line">	glFlush();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 绘制立方体</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawCube</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> i, j;</div><div class="line">	glBegin(GL_LINES);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) <span class="comment">// 12 条线段</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) <span class="comment">// 每条线段 2个顶点</span></div><div class="line">		&#123;</div><div class="line">			glVertex3fv(vertex_list[index_list[i][j]]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	glEnd();</div><div class="line">	glFlush();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshapeOperate</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	glMatrixMode(GL_PROJECTION);</div><div class="line">	glLoadIdentity();</div><div class="line">	<span class="keyword">if</span> (ratio &lt; <span class="number">1</span>)</div><div class="line">		glOrtho(-coordinatesize, coordinatesize, -coordinatesize / ratio, coordinatesize / ratio, -coordinatesize, coordinatesize);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		glOrtho(-coordinatesize*ratio, coordinatesize*ratio, -coordinatesize, coordinatesize, -coordinatesize, coordinatesize);</div><div class="line"></div><div class="line">	glMatrixMode(GL_MODELVIEW);</div><div class="line">	glLoadIdentity();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshape</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> ((w == <span class="number">0</span>) || (h == <span class="number">0</span>))</div><div class="line">		<span class="keyword">return</span>;</div><div class="line"></div><div class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line"></div><div class="line">	ratio = (GLfloat)w / (GLfloat)h;</div><div class="line"></div><div class="line">	reshapeOperate();</div><div class="line">&#125;</div><div class="line"></div><div class="line">GLfloat AngleX = <span class="number">45.0f</span>;</div><div class="line">GLfloat AngleY = <span class="number">315.0f</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshape1</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	GLfloat aspect = (GLfloat)w / (GLfloat)h;</div><div class="line">	GLfloat nRange = <span class="number">100.0f</span>;</div><div class="line"></div><div class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line"></div><div class="line">	glMatrixMode(GL_PROJECTION); <span class="comment">//将当前矩阵指定为投影模式  </span></div><div class="line">	glLoadIdentity();</div><div class="line"></div><div class="line">	<span class="comment">//设置三维投影区  </span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (w &lt;= h)</div><div class="line">	&#123;</div><div class="line">		glOrtho(-nRange, nRange, -nRange * aspect, nRange * aspect, -nRange, nRange);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		glOrtho(-nRange, nRange, -nRange / aspect, nRange / aspect, -nRange, nRange);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(<span class="keyword">void</span>*)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// Draw something using OpenGL here  </span></div><div class="line">	<span class="comment">//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	 //清除所有的像素</span></div><div class="line"></div><div class="line">	<span class="comment">//glMatrixMode(GL_MODELVIEW);</span></div><div class="line">	<span class="comment">//glLoadIdentity();</span></div><div class="line">	<span class="comment">//glPushMatrix();</span></div><div class="line"></div><div class="line">	<span class="comment">////glTranslatef(-0.2, 0, 0); // 平移</span></div><div class="line">	<span class="comment">////glScalef(2, 1, 1);    // 缩放</span></div><div class="line"></div><div class="line">	<span class="comment">//glRotatef(xRotAngle, 1.0f, 0.0f, 0.0f);</span></div><div class="line">	<span class="comment">//glRotatef(yRotAngle, 0.0f, 1.0f, 0.0f);</span></div><div class="line">	<span class="comment">//glRotatef(zRotAngle, 0.0f, 0.0f, 1.0f);</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(1, 0, 0);</span></div><div class="line">	<span class="comment">//drawLine(0, 0, 0, MAX_X, 0, 0); //x轴</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(0, 1, 0);</span></div><div class="line">	<span class="comment">//drawLine(0, 0, 0, 0, MAX_Y, 0); //y轴</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(0, 0, 1);</span></div><div class="line">	<span class="comment">//drawLine(0, 0, 0, 0, 0, MAX_Z); //z轴</span></div><div class="line"></div><div class="line">	<span class="comment">//times++;</span></div><div class="line">	<span class="comment">//if (times &gt; 1)</span></div><div class="line">	<span class="comment">//&#123;</span></div><div class="line">	<span class="comment">//	times = 0;</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line"></div><div class="line">	<span class="comment">//if (times % 1 == 0)</span></div><div class="line">	<span class="comment">//&#123;</span></div><div class="line">	<span class="comment">//	rotate += 0.3;</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line"></div><div class="line">	<span class="comment">//glRotatef(rotate, 0, 1, 0);</span></div><div class="line">	<span class="comment">//glRotatef(rotate, 1, 0, 0);</span></div><div class="line"></div><div class="line">	<span class="comment">//glColor3f(0, 1, 1);</span></div><div class="line"></div><div class="line">	<span class="comment">//DrawCube();</span></div><div class="line"></div><div class="line">	<span class="comment">//glPopMatrix();</span></div><div class="line"></div><div class="line">	reshape1(windowWidth, windowHeight);</div><div class="line">	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</div><div class="line">	glMatrixMode(GL_MODELVIEW);</div><div class="line">	glLoadIdentity();</div><div class="line">	AngleX++;</div><div class="line">	AngleY++;</div><div class="line">	glPushMatrix();</div><div class="line">	&#123;</div><div class="line">		glRotatef(AngleX, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</div><div class="line">		glRotatef(AngleY, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//前表面  </span></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为黄色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//后表面  </span></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为青色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为绿色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为黑色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为蓝色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//上表面  </span></div><div class="line">		glColor3d(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为青色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3d(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3d(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为品红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3d(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//颜色设置为蓝色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//下表面  </span></div><div class="line">		glColor3ub(<span class="number">0u</span>, <span class="number">255u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为绿色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub(<span class="number">255u</span>, <span class="number">255u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为黄色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub(<span class="number">255u</span>, <span class="number">0u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub(<span class="number">0u</span>, <span class="number">0u</span>, <span class="number">0u</span>);<span class="comment">//颜色设置为黑色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//左表面  </span></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为白色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>);<span class="comment">//颜色设置为青色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">0</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为绿色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3ub((GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">255</span>, (GLubyte)<span class="number">0</span>);<span class="comment">//颜色设置为黄色  </span></div><div class="line">		glVertex3f(<span class="number">50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line">		glEnd();</div><div class="line"></div><div class="line">		glBegin(GL_POLYGON); <span class="comment">//右表面  </span></div><div class="line">		glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为品红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);<span class="comment">//颜色设置为蓝色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为黑色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">-50.0f</span>);</div><div class="line"></div><div class="line">		glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//颜色设置为红色  </span></div><div class="line">		glVertex3f(<span class="number">-50.0f</span>, <span class="number">-50.0f</span>, <span class="number">50.0f</span>);</div><div class="line">		glEnd();</div><div class="line">	&#125;</div><div class="line">	glPopMatrix();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">opencvWithOpenGLTest</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> openGLWindowName = <span class="string">"OpenGL Test"</span>;</div><div class="line">	cv::namedWindow(openGLWindowName, cv::WINDOW_OPENGL);</div><div class="line">	cv::resizeWindow(openGLWindowName, windowWidth, windowHeight);</div><div class="line">	cv::setOpenGlContext(openGLWindowName);</div><div class="line">	cv::setOpenGlDrawCallback(openGLWindowName, onDraw, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (cv::waitKey(<span class="number">30</span>) != <span class="number">27</span>)</div><div class="line">	&#123;</div><div class="line">		cv::updateWindow(openGLWindowName);	<span class="comment">// when needed  </span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	opencvWithOpenGLTest();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行成功后可看到一个旋转的彩色立方体。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>　　从实验结果来看，OpenCV确实能支持OpenGL图形的显示，但其不足之处也很明显：没有提供鼠标和键盘的交互操作（可能是本人还没发现，毕竟只是尝试一下看它能不能显示），仅仅只是提供一个显示窗口。如果真想用OpenGL做一些好玩的东西，还是用glut和glew吧，不过glut已经停止更新许久，glew在调试时可能会出现一些莫名其妙的错误，所以网上有人用freeglut代替glut，glee代替glew，具体的东西本人也没试过，本人目前还没做过OpenGL相关的事，这次用OpenCV显示OpenGL图形纯粹是为了好玩(*&#94;__&#94; *) 嘻嘻……。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本篇文档也是上次编译配置完OpenCV-3.2后做的一次小实验，但当时并没有记录，所以还有一些参考资料也已经不知道了:-(。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://blog.csdn.net/yang_xian521/article/details/8531058" target="_blank" rel="external">OpenCV学习笔记（六十一）——建立支持OpenGL的OpenCV工程“Master OpenCV”chp.3</a>（<a href="http://blog.csdn.net/yang_xian521/article/category/910716" target="_blank" rel="external">http://blog.csdn.net/yang_xian521/article/category/910716</a> ）</p><p>[2] <a href="http://blog.csdn.net/bcbobo21cn/article/details/51058836" target="_blank" rel="external">几个opengl立方体绘制案例</a>（<a href="http://blog.csdn.net/bcbobo21cn/article/category/3104565" target="_blank" rel="external">http://blog.csdn.net/bcbobo21cn/article/category/3104565</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本文就是一个小实验，试验OpenCV到底能不能支持OpenGL图形显示。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
      <category term="opengl" scheme="http://cniter.github.io/tags/opengl/"/>
    
  </entry>
  
  <entry>
    <title>Win10＋VS2013＋CMake-gui编译和配置OpenCV-3.2.0</title>
    <link href="http://cniter.github.io/posts/7df528b4.html"/>
    <id>http://cniter.github.io/posts/7df528b4.html</id>
    <published>2017-08-28T07:38:39.000Z</published>
    <updated>2017-12-09T12:57:13.764Z</updated>
    
    <content type="html"><![CDATA[<p>本人系统环境：Win10_x64 英文企业版；VS2013-update5 英文旗舰版；CMake-3.6.3-win64-x64 免安装版；Qt-opensource-windows-x86-msvc2013-5.6.2。</p><p>　　*注：本人写的这篇文档主要用来编译x86版的动态debug库，想编译其它类型的库请自行参考其它资料，做相关改变。（其实如果想编译x64版的可以在用VS2013编译时将上方的Win32平台选择x64平台；想编译release版的可以在用VS2013编译时将上方的Debug模式选择Release模式；想编译静态库的可以在用CMake生成时取消勾选<strong>BUILD_SHARED_LIBS</strong>选项即可。:-P）</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　因为OpenCV-3.2官方的release版只有支持VS2015的库，而且不包括扩展包（opencv_contrib）中的库，而由于某些历史原因，本人目前使用的编译器还是VS2013，又想用用扩展包中一些有趣的算法，在加上上个月opencv-3.3还没有正式release，所以上个月本人就利用VS2013对opencv-3.2进行编译。具体编译过程如下：</p><a id="more"></a><h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>　　先在GitHub上下载对应的opencv源码包：<a href="https://github.com/opencv/opencv/archive/3.2.0.zip" target="_blank" rel="external">opencv-3.2.0</a>和<a href="https://github.com/opencv/opencv_contrib/archive/3.2.0.zip" target="_blank" rel="external">opencv_contrib-3.2.0</a>（<a href="https://github.com/opencv" target="_blank" rel="external">https://github.com/opencv</a> ），扩展包版本一定要和opencv版本相同。本人为了添加Qt后端显示支持（为了好看和方便:-P），所以还下载安装了支持VS2013的<a href="http://download.qt.io/archive/qt/5.6/5.6.2/qt-opensource-windows-x86-msvc2013-5.6.2.exe" target="_blank" rel="external">Qt-5.6.2</a>（<a href="http://download.qt.io/archive/qt/" target="_blank" rel="external">http://download.qt.io/archive/qt/</a> ）。再<a href="https://cmake.org/files/v3.6/cmake-3.6.3-win64-x64.zip" target="_blank" rel="external">下载CMake-3.6.3-win64-x64 免安装版</a>（<a href="https://cmake.org/files/" target="_blank" rel="external">https://cmake.org/files/</a> ）。至于微软的东西，推荐直接去<a href="https://msdn.itellyou.cn/" target="_blank" rel="external">MSDN 我告诉你</a>去下载。</p><p>　　由于网上有的资料（具体是哪篇文章本人忘记了o(╯□╰)o）说编译时的文件结构可能会影响编译是否成功，再加上为了方便编译管理，本人的编译时的文件结构为：</p><blockquote><p>opencv-3.2.0_build<br>├── build<br>└── sources<br>​ 　　├── opencv-3.2.0<br>​ 　　└── opencv_contrib-3.2.0</p><p>4 directories, 0 files</p></blockquote><p>其中opencv-3.2.0用来装opencv-3.2.0.zip解压后的源码；opencv_contrib-3.2.0用来装opencv_contrib-3.2.0.zip解压后的源码；build用来装CMake编译完成后的文件。</p><h2 id="编译篇"><a href="#编译篇" class="headerlink" title="编译篇"></a>编译篇</h2><p>　　打开/cmake-3.6.3-win64-x64/bin/cmake-gui.exe，在<strong>Where is the source code</strong>文本框中选择/opencv-3.2.0_build/sources/opencv-3.2.0；在<strong>Where to build the binaris</strong>文本框中选择/opencv-3.2.0_build/build，点击<strong>Configure</strong>，在弹出的编译器选择框中选择<strong>Visual Studio 12 2013</strong>，一直<strong>Configure</strong>直到红色的条变白。</p><p>　　网上有人在这一步可能会出现<code>ffmpeg not downloaded</code>和<code>“ippicv_windows_20151201.zip”not downloaded</code>这两个问题，本人没出现这两个问题，所以没有机会验证<a href="http://livezingy.com/compile-opencv-and-opencv_contrib/" target="_blank" rel="external">cmake-gui和vs2013编译opencv和opencv_contrib源码</a>中的解决办法是否正确。</p><p>　　接下来就是添加扩展包，在白色条中找到<strong>OPENCV_EXTRA_MODULES_PATH</strong>文本框，在其中选择opencv_contrib源码中modeles所在路径：/opencv-3.2.0_build/sources/opencv_contrib-3.2.0/modules。</p><p>　　至于想要支持OpenGL和Qt就需要勾选<strong>WITH_OPENGL</strong>和<strong>WITH_QT</strong>并<strong>Configure</strong>后选择好Qt的安装目录，如果配置好Qt的环境变量Cmake将会自动选择好Qt所在路径。</p><p>　　随后再次反复<strong>Configure</strong>直到界面不再出现红色背景，之后单击<strong>Generate</strong>。不出意外的话，你会看到<strong>Configure done</strong>和<strong>Generate done</strong>。</p><p>　　本人在这一步出现了<a href="http://livezingy.com/build_shared_libs/" target="_blank" rel="external">VS2013_CMake_opencv3.1动态库与静态库的配置与编译</a>中的问题，原因是同时勾选了同时勾选了<strong>BUILD_opencv_world</strong>和<strong>BUILD_opencv_contirb_world</strong>，本人的解决办法是将它们全部取消勾选，再次<strong>Configure</strong>和<strong>Generate</strong>。</p><p>　　如果上面一切顺利的话就可以进行下一步了：使用VS2013编译OpenCV。打开/opencv-3.2.0_build/build目录，将会看到一大堆文件和文件夹，双击/opencv-3.2.0_build/build目录下的<strong>OpenCV.sln</strong>，用VS2013打开。找到<strong>CMakeTargets</strong>中的<strong>INSTALL</strong>，然后右键选择“Project Only”–&gt;“Build Only INSTALL”。</p><p>漫长的等待。。。。。。(╯﹏╰)b</p><p>　　本人在这一步出现了一个问题，具体问题和解决方法详见问题篇。</p><p>　　一切顺利的话，应该会比本人下面的库多两个，本人最后生成的Debug库为：</p><blockquote><p>opencv_aruco320d.lib</p><p>opencv_bgsegm320d.lib</p><p>opencv_bioinspired320d.lib</p><p>opencv_calib3d320d.lib</p><p>opencv_ccalib320d.lib</p><p>opencv_core320d.lib</p><p>opencv_datasets320d.lib</p><p>opencv_dnn320d.lib</p><p>opencv_dpm320d.lib</p><p>opencv_face320d.lib</p><p>opencv_features2d320d.lib</p><p>opencv_flann320d.lib</p><p>opencv_fuzzy320d.lib</p><p>opencv_highgui320d.lib</p><p>opencv_imgcodecs320d.lib</p><p>opencv_imgproc320d.lib</p><p>opencv_line_descriptor320d.lib</p><p>opencv_ml320d.lib</p><p>opencv_objdetect320d.lib</p><p>opencv_optflow320d.lib</p><p>opencv_phase_unwrapping320d.lib</p><p>opencv_photo320d.lib</p><p>opencv_plot320d.lib</p><p>opencv_reg320d.lib</p><p>opencv_rgbd320d.lib</p><p>opencv_saliency320d.lib</p><p>opencv_shape320d.lib</p><p>opencv_stereo320d.lib</p><p>opencv_stitching320d.lib</p><p>opencv_structured_light320d.lib</p><p>opencv_superres320d.lib</p><p>opencv_surface_matching320d.lib</p><p>opencv_text320d.lib</p><p>opencv_tracking320d.lib</p><p>opencv_video320d.lib</p><p>opencv_videoio320d.lib</p><p>opencv_videostab320d.lib</p><p>opencv_xfeatures2d320d.lib</p><p>opencv_ximgproc320d.lib</p><p>opencv_xobjdetect320d.lib</p><p>opencv_xphoto320d.lib</p><p>共41个。</p></blockquote><h2 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h2><p>　　因为本人只编译了x86版动态debug库，所以以下环境配置都只针对x86版动态debug库。（其实要配置x64的库就只需将x86换成x64即可；要配置release模式的库就只需在添加附加依赖项中的库文件选择release模式的库（即数字后没有d的lib）；若要配置静态库就需要选择静态库文件夹以及在附加依赖项中添加相应的静态库文件。:-P）</p><p>　　首先把/opencv-3.2.0_build/build/install中的文件都提取出来，这和OpenCV官方release的opencv文件结构差不多，具体两层结构如下</p><blockquote><p>.<br>├── bin<br>│　&ensp;└── opencv_waldboost_detectord.exe<br>├── etc<br>│　&ensp;├── haarcascades<br>│　&ensp;└── lbpcascades<br>├── include<br>│　&ensp;├── opencv<br>│　&ensp;└── opencv2<br>├── LICENSE<br>├── OpenCVConfig.cmake<br>├── OpenCVConfig-version.cmake<br>└── x86<br>​ 　　└── vc12</p><p>9 directories, 4 files</p></blockquote><p>x86文件夹就是VS2013生成的对应VS版本32位的各种库，include文件夹就是opencv的各项模块。本人将其中提取出的文件全部放入了C:\Program Files\OpenCV\3.2.0\build文件夹中。</p><p>　　首先配置环境变量，系统（或用户）环境变量如下：</p><table><thead><tr><th style="text-align:center">变量名</th><th>变量值</th></tr></thead><tbody><tr><td style="text-align:center">Path</td><td>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\bin</td></tr><tr><td style="text-align:center">OPENCV</td><td>C:\Program Files\OpenCV\3.2.0\build</td></tr></tbody></table><p>不然可能会报错：<font color="#FA8072">程序“XXXXXX”已退出，返回值为 -1073741701 (0xc000007b)</font>。其中下面那行可以选择不要添加。</p><p>　　然后在VS中配置环境。新建工程，然后在“<strong>属性管理器</strong>”中对应项目下<strong>Debug | Win32</strong>文件夹右键“<strong>添加新项目属性表</strong>”。（方便一次配置，多次使用，以后再使用只要在相应项目下右键“<strong>添加现有属性表</strong>”即可），本人新项目属性表取名为：opencv-3.2.0_msvc2013_x86d.props。</p><p>接下来就是真正的VS环境配置了：</p><p>　　双击打开刚才新建的属性表，选中“<strong>VC++目录</strong>”，<font color="#FA8072">注意在进行以下配置时建议都勾选左下角的“<strong>从父级或项目默认设置继承</strong>”</font></p><p>“<strong>可执行文件目录</strong>”中添加：</p><blockquote><p>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\bin</p></blockquote><p>“<strong>包含目录</strong>”中添加：</p><blockquote><p>C:\Program Files\OpenCV\3.2.0\build\include</p><p>C:\Program Files\OpenCV\3.2.0\build\include\opencv</p><p>C:\Program Files\OpenCV\3.2.0\build\include\opencv2</p></blockquote><p>“<strong>库目录</strong>”中添加：</p><blockquote><p>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\lib</p></blockquote><p>选中“<strong>链接器</strong>” –&gt; “<strong>常规</strong>”，“<strong>附加库目录</strong>”中添加：</p><blockquote><p>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\lib</p></blockquote><p>“<strong>链接器</strong>” –&gt; “<strong>输入</strong>”，“<strong>附加依赖项</strong>”中添加<code>C:\Program Files\OpenCV\3.2.0\build\x86\vc12\lib</code>中数字后带d的库文件，即编译篇中本人最后生成的41个库文件。</p><p>　　<font color="#FA8072">配置完之后不要忘了右键该属性表进行保存处理</font>，以便下个项目直接使用，不需要再重复进行配置。</p><p>最后附示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;  </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	cv::Mat lena = cv::imread(<span class="string">"lena.jpg"</span>); <span class="comment">//载入图像到Mat，jpg文件和该cpp在同一文件夹</span></div><div class="line">	cv::namedWindow(<span class="string">"lena"</span>); <span class="comment">//创建一个名为 "lean"的窗口   </span></div><div class="line">	cv::imshow(<span class="string">"lena"</span>, lena);    <span class="comment">//显示名为 "lena"的窗口</span></div><div class="line">	cv::waitKey(<span class="number">5000</span>);  <span class="comment">// 只对窗口机制起作用（显示5000ms，随后返回-1，即窗口关闭），若在此期间有按键按下，则马上返回按键的ASCII码。</span></div><div class="line">	<span class="comment">//system("pause");</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里必须在imshow后加入waitkey，因为WaitKey不止是Wait Key 而已，它其实还涉及到消息响应，有这个函数cv内部的WndProc函数才能起作用，才会更新窗口。</p><p>　　最后程序运行成功并显示lena图，则说明编译和配置没问题。</p><h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><font color="#FA8072">1、用VS2013编译OpenCV在漫长的等待阶段出现的问题。</font><p>　　<strong>问题描述：</strong>CVV模块报错，TS模块编译不出来，好在这两个模块都不是很重要，可以忽略，本人强迫症也没到这种程度O(∩_∩)O~。</p><p>　　<strong>解决办法：</strong> 在CVV模块报错后可在CMake（不知道具体是<strong>INSTALL</strong>下的<strong>CMake Rules</strong>中的<strong>INSTALL_force.rule</strong>，还是<strong>ALL_BUILD</strong>下的<strong>CMakeLists.txt</strong>，忘记了o(╯□╰)o）中添加<code>-DBUILD_opencv_cvv=OFF</code>忽略CVV模块，从而正常编译其它模块。参考<a href="https://github.com/opencv/opencv_contrib/issues/577" target="_blank" rel="external">errors on build opencv with cvv module and qt5 #577</a>。如果实在不行的话就在CMake生成的时候取消勾选出错模块，若是用CMake重新生成的话不要忘了先把/opencv-3.2.0_build/build目录下的文件全部删除干净。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　这是以前写的两篇文档，现在再来整理成一篇。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>　　既然能看到这里，说明是想在VS下使用OpenCV，这里推荐一款VS下OpenCV开发调试神器：<a href="https://marketplace.visualstudio.com/items?itemName=WolfKienzle.ImageWatch" target="_blank" rel="external">Image Watch</a>，效果谁用谁知道。Image Watch是VS的一个插件，不过它只支持VS2012及以上版本。使用方法为先设置断点（F9），随后在调试（F5）模式下，鼠标指针悬停在<code>cv::Mat</code>类型变量上，即可出现<img src="http://img.blog.csdn.net/20161115134305655" alt="插件调试标签">，点击查看图标即可显示相应图像。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="http://livezingy.com/compile-opencv-and-opencv_contrib/" target="_blank" rel="external">cmake-gui和vs2013编译opencv和opencv_contrib源码</a>（<a href="http://livezingy.com/category/opencv/" target="_blank" rel="external">http://livezingy.com/category/opencv/</a> ）</p><p>[2] <a href="http://livezingy.com/build_shared_libs/" target="_blank" rel="external">VS2013_CMake_opencv3.1动态库与静态库的配置与编译</a>（<a href="http://livezingy.com/category/opencv/" target="_blank" rel="external">http://livezingy.com/category/opencv/</a> ）</p><p>[3] <a href="https://wenku.baidu.com/view/ef3081e3a5e9856a561260d1.html" target="_blank" rel="external">使用VS2015编译以及静态编译opencv3记录</a></p><p>[4] <a href="https://github.com/opencv/opencv_contrib/issues/577" target="_blank" rel="external">errors on build opencv with cvv module and qt5 #577</a></p><p>[5] <a href="http://blog.csdn.net/fengbingchun/article/details/46756373" target="_blank" rel="external">VS2013中Image Watch插件的使用(OpenCV)</a>（<a href="http://blog.csdn.net/fengbingchun/article/category/721609" target="_blank" rel="external">http://blog.csdn.net/fengbingchun/article/category/721609</a> ）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人系统环境：Win10_x64 英文企业版；VS2013-update5 英文旗舰版；CMake-3.6.3-win64-x64 免安装版；Qt-opensource-windows-x86-msvc2013-5.6.2。&lt;/p&gt;&lt;p&gt;　　*注：本人写的这篇文档主要用来编译x86版的动态debug库，想编译其它类型的库请自行参考其它资料，做相关改变。（其实如果想编译x64版的可以在用VS2013编译时将上方的Win32平台选择x64平台；想编译release版的可以在用VS2013编译时将上方的Debug模式选择Release模式；想编译静态库的可以在用CMake生成时取消勾选&lt;strong&gt;BUILD_SHARED_LIBS&lt;/strong&gt;选项即可。:-P）&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　因为OpenCV-3.2官方的release版只有支持VS2015的库，而且不包括扩展包（opencv_contrib）中的库，而由于某些历史原因，本人目前使用的编译器还是VS2013，又想用用扩展包中一些有趣的算法，在加上上个月opencv-3.3还没有正式release，所以上个月本人就利用VS2013对opencv-3.2进行编译。具体编译过程如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://cniter.github.io/categories/Study/"/>
    
    
      <category term="opencv" scheme="http://cniter.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>MyThoughts</title>
    <link href="http://cniter.github.io/posts/17017530.html"/>
    <id>http://cniter.github.io/posts/17017530.html</id>
    <published>2017-08-27T08:16:16.000Z</published>
    <updated>2017-12-23T11:54:03.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本篇主要用来记录本人的心路历程。</p><a id="more"></a><h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><table><thead><tr><th style="text-align:center">日期</th><th style="text-align:center">Thought</th></tr></thead><tbody><tr><td style="text-align:center">2017-12-21</td><td style="text-align:center">世界很渺小，差的只是一个引路人。</td></tr><tr><td style="text-align:center">2017-12-20</td><td style="text-align:center">无知是福，不谈国是 :）。</td></tr><tr><td style="text-align:center">2017-12-07</td><td style="text-align:center">社会工程学，有意思的领域。——观《我是谁：没有绝对安全的系统》</td></tr><tr><td style="text-align:center">2017-11-29</td><td style="text-align:center">知道的越多，不知道的也越多。</td></tr><tr><td style="text-align:center">2017-11-15</td><td style="text-align:center">我所理解的编程就是用尽可能简单的方法得到想要的变量值。</td></tr><tr><td style="text-align:center">2017-10-24</td><td style="text-align:center">读研究生两个月，最大的改变就是对人对事都比以前有更大的耐心了 :）。</td></tr><tr><td style="text-align:center">2017-10-21</td><td style="text-align:center">无论什么事，当ta成为一种任务的时候，都是一种负担。</td></tr><tr><td style="text-align:center">2017-10-20</td><td style="text-align:center">键盘侠就该看看《黑镜》S03E06，真看热闹不嫌事大啊 😒。</td></tr><tr><td style="text-align:center">2017-10-19</td><td style="text-align:center">人类基因组计划，真不知道是好是坏，希望是好的吧 😶。——观《黑镜》S03E05</td></tr><tr><td style="text-align:center">2017-10-15</td><td style="text-align:center">镇定，面不改色；节奏很快，就一个晚上的事，音乐和光影也很赞 👍。——观《暗花》</td></tr><tr><td style="text-align:center">2017-10-07</td><td style="text-align:center">国家意志啊，让人不由得想起那年春夏之交（5月35日）的一场风波╮(╯▽╰)╭。——观《出租车司机》</td></tr><tr><td style="text-align:center">2017-10-04</td><td style="text-align:center">什么时候能控制情绪了，什么时候就成熟了。——观《头脑特工队》</td></tr><tr><td style="text-align:center">2017-10-03</td><td style="text-align:center">所谓的朋友（ta）只是在正确的时间正确的地点遇到的正确的人。</td></tr><tr><td style="text-align:center">2017-09-29</td><td style="text-align:center">1. 有些事不知道比知道要好，但真相总还是知道要好。<br>2. 不同层次的人心态不同，难以相互理解。</td></tr><tr><td style="text-align:center">2017-09-28</td><td style="text-align:center">各大（网络）小说家的风格真的很难改变啊！ 😪</td></tr><tr><td style="text-align:center">2017-09-23</td><td style="text-align:center">1. 你想成为什么样的人，必须自己决定。——《虫师》<br>2. 情感是最不可控的。——观《宝莱坞机器人之恋》<br>3. 人或许只有善恶，没有好坏。</td></tr><tr><td style="text-align:center">2017-08-29</td><td style="text-align:center">科研之上，如何能成为一个挖坑人（开创性的结果）？ 😕</td></tr><tr><td style="text-align:center">2017-08-11</td><td style="text-align:center">学生最重要的两种能力是学习能力和解决问题的能力。</td></tr><tr><td style="text-align:center">2017-08-10</td><td style="text-align:center">爱情是需要理由的。</td></tr><tr><td style="text-align:center">2017-08-05</td><td style="text-align:center">无能是万恶之源。</td></tr><tr><td style="text-align:center">2017-07-20</td><td style="text-align:center">有些话，自己心里明白就行，绝对不能说出来，否则可能存在某种未知的危险。</td></tr><tr><td style="text-align:center">2017-07-18</td><td style="text-align:center">很多东西是不能向别人推荐的，比如音乐，电影，小说等自己喜欢的东西。</td></tr><tr><td style="text-align:center">2017-07-14</td><td style="text-align:center">有些事是交给别人判断的，自己心里知道就行；有些事是交给自己判断的，自己心里知道就行。</td></tr><tr><td style="text-align:center">2017-07-11</td><td style="text-align:center">走进一个学科之前，最先应该知道的是该学科的研究对象、研究方法，以及当前研究中的热点难点问题，而不应该被广告一样的花哨演示糊弄住。——《上海交通大学学生生存手册》</td></tr><tr><td style="text-align:center">2017-04-09</td><td style="text-align:center">真正的独立，应该是离开任何人你都能活的好好的；真正的自由，应该是任何人都不能让你做违背你意志的事。</td></tr><tr><td style="text-align:center">2017-02-08</td><td style="text-align:center">小提琴，悠扬，忧伤。</td></tr><tr><td style="text-align:center">2017-01-27</td><td style="text-align:center">唉！渐行渐远╮(╯▽╰)╭。</td></tr><tr><td style="text-align:center">2017-01-18</td><td style="text-align:center">不能飞的猪，就只是猪而已。——《红猪》</td></tr><tr><td style="text-align:center">2016-12-30</td><td style="text-align:center">梦想还是要有的，万一实现了呢，试一下又不吃亏。——观《百日梦想家》</td></tr><tr><td style="text-align:center">2016-12-26</td><td style="text-align:center">过去的如果就这么过去了，那以后只会越来越糟。——《驴得水》</td></tr><tr><td style="text-align:center">2016-12-25</td><td style="text-align:center">只有人才是最重要的。</td></tr><tr><td style="text-align:center">2016-12-10</td><td style="text-align:center">与人相处之道，不外乎尊重和坚强。</td></tr><tr><td style="text-align:center">2016-11-06</td><td style="text-align:center">烈日灼心，片如其名。——观《烈日灼心》</td></tr><tr><td style="text-align:center">2016-11-04</td><td style="text-align:center">后来我发现，教授们貌似不喜欢有自己想法的学生，他们更希望找到愿意“打下手”的学生，帮助实现他们自己的想法。——《王垠：我和权威的故事》</td></tr><tr><td style="text-align:center">2016-10-31</td><td style="text-align:center">为何总要责怪自己？为何要为没必要的人改变自己？不需要做老好人，做好自己，随便别人。——观《被嫌弃的松子的一生》</td></tr><tr><td style="text-align:center">2016-10-30</td><td style="text-align:center">3~7的小孩的自主谎言最可怕，撒谎乃人之天性，远离无脑之人。——观《狩猎》</td></tr><tr><td style="text-align:center">2016-10-27</td><td style="text-align:center">世界上有三种人，一种是人渣，一种愚漠的人，还有一种是所谓的好人。第二种人最多，参考正态分布。——观《熔炉》</td></tr><tr><td style="text-align:center">2016-10-22</td><td style="text-align:center">面对长者（诸如领导，老师等），要多听他们说，自己尽量少说，绝对不要找理由，要多说嗯，是的，对的，没错，明白，可以等肯定语句，绝对不要说由于，因为等原因语句。更重要的是尽量少说自己不知道，忘记了，了解一点等否定语句，不要把自己差的一面表现出来；要说自己会，行，知道等肯定语句，一定要把自己好的一面表现120%出来。（※附：以本人2017-12-21的眼光来看这段话还是不妥）</td></tr><tr><td style="text-align:center">2016-10-02</td><td style="text-align:center">平静中的悲和喜，最悲痛。——观《那年夏天，宁静的海》</td></tr><tr><td style="text-align:center">2016-09-22</td><td style="text-align:center">韩国好的电影对人性的把握比较到位，但有时为了突出人性好的一面，而做的有点婊了，为了剧情而剧情。——观《摩天楼》《流感》《铁线虫入侵》《釜山行》</td></tr><tr><td style="text-align:center">2016-09-13</td><td style="text-align:center">这世上有很多事，不试一下永远不会知道结果。</td></tr><tr><td style="text-align:center">2016-09-05</td><td style="text-align:center">公式本就存在，就等有天赋的人去感知并发现它。——观《知无涯者》</td></tr><tr><td style="text-align:center">2016-09-03</td><td style="text-align:center">管理者需要心平气和，更要沉得住气，有耐心。</td></tr><tr><td style="text-align:center">2016-08-12</td><td style="text-align:center">自紧力，自紧扳手，和初中做的物理实验：把两本书夹在一起后，无论怎么用力向两边拉都拉不开，估计有点类似吧。（※附：以本人2017-12-21的眼光来看这个事感觉有点玄学）</td></tr><tr><td style="text-align:center">2016-08-10</td><td style="text-align:center">为什么人们总认为小孩（弱者）说的是对的？有没有想过，有时候小孩并不小，弱者并不弱。</td></tr><tr><td style="text-align:center">2016-08-09</td><td style="text-align:center">《人工智能》，好可怖的一个世界。——观《人工智能》</td></tr><tr><td style="text-align:center">2016-08-06</td><td style="text-align:center">一起做一件事能很好的增进感情。（※附：以本人2017-12-21的眼光来看也有可能增加矛盾╮(╯▽╰)╭）</td></tr><tr><td style="text-align:center">2016-08-04</td><td style="text-align:center">尽量不要去接手别人已经做了一部分的事物。（※附：以本人2017-12-21的眼光来看如果别人做的很好理解的话接手也可以）</td></tr><tr><td style="text-align:center">2016-08-02</td><td style="text-align:center">1. 有时候很难理解他人，只是因为没有和他人类似的经历而已。<br>2. 让人的本性被改变咋就这么难？读大学是掉噶果？（※附：以本人2017-12-21的眼光来看ta确实老了，也变了，或许时间能改变一切吧）</td></tr><tr><td style="text-align:center">2016-07-29</td><td style="text-align:center">《计算机：一部历史》，很有意思的一本计算机史。</td></tr><tr><td style="text-align:center">2016-07-26</td><td style="text-align:center">人们总是习惯于用固有的标准看待新事物。</td></tr><tr><td style="text-align:center">2016-07-24</td><td style="text-align:center">《妖尾》的世界观简直不敢苟同，世界上真有那种人，杀了或要杀自己朋友的人还能做伙伴？每遇到boss第一次总被秒杀，第二次才能完胜？这尼玛是什么逻辑。</td></tr><tr><td style="text-align:center">2016-07-17</td><td style="text-align:center">1. 不要嘲笑别人的梦想，也不要轻易说出自己的梦想。<br>2. 看完《活着》，心情有点沉重，难道生命的意义就在于为活着而活着？或者还是太年轻了。</td></tr><tr><td style="text-align:center">2016-07-16</td><td style="text-align:center">1. 是待人以诚，人待以诚，还是人待以诚，待人以诚？不好说。<br>2. 游戏能代表计算机应用技术的最高水平。</td></tr><tr><td style="text-align:center">2016-07-13</td><td style="text-align:center">情景不同，分类不同。</td></tr><tr><td style="text-align:center">2016-07-12</td><td style="text-align:center">下属（泛指），多看，多听，多想，多做，少说话。</td></tr><tr><td style="text-align:center">2016-07-10</td><td style="text-align:center">1. 世上最痛苦的事莫过于对着自己不想看到的人谄媚。<br>2. 不同的时刻，不同的场景，不同的心情，喜好不一样。</td></tr><tr><td style="text-align:center">2016-06-29</td><td style="text-align:center">口吃可能不是遗传的，也可能是婴儿学习过程中的一种畸形。</td></tr><tr><td style="text-align:center">2016-06-23</td><td style="text-align:center">1. 何不让自己的人生多些经历。<br>2. 世上大多数的猜忌、争论，都是由于每个人总是认为自己是对的。</td></tr><tr><td style="text-align:center">2016-06-16</td><td style="text-align:center">1. 多媒体识别的关键在于提取图像、视频和音频的“特征”（即向量）。<br>2. 我们周围的人是否在演戏？我们是否在戏中？人生入戏，戏如人生。——观《楚门的世界》</td></tr><tr><td style="text-align:center">2016-06-13</td><td style="text-align:center">1. 不管变成什么样，问心无愧就好。<br>2. 人越成熟就藏得越深。<br>3. 完全不需要和别人比，只需和昨天的自己比。</td></tr><tr><td style="text-align:center">2016-06-09</td><td style="text-align:center">1. 在公共环境（贴吧，评论区等）下发言，首先要做好被喷的准备，网络上从来不缺少键盘侠。<br>2. 眼中世界不同的人，终究会分开。</td></tr><tr><td style="text-align:center">2016-05-27</td><td style="text-align:center">有些东西是让人看到会产生反感的，而有些东西明明被人讨厌，却因为它没有那么张扬的外面，所以很容易被人忽视的。——七月寒风《幻灵》</td></tr><tr><td style="text-align:center">2016-05-20</td><td style="text-align:center">1. 不要随便对别人说出你的想法和理解，因为可能在别人看来，你的想法和理解完全就是个笑话和讽点。最后，最重要的是看清他人是不是和你是一个世界的，世界不同，观念，观点很难相同。<br>2. 绝大部分老师只看结课论文的排版如何。</td></tr><tr><td style="text-align:center">2016-05-18</td><td style="text-align:center">儒家治国，道家处事。（※附：以本人2017-12-22的眼光来看有点不敢苟同）</td></tr><tr><td style="text-align:center">2016-05-16</td><td style="text-align:center">人们或多或少都有一种同情弱者的心态，所以有时候适当的处于弱势并不是一件坏事。</td></tr><tr><td style="text-align:center">2016-05-09</td><td style="text-align:center">大学里的成绩更多的是取决于你了不了解老师，你知不知道老师真正想要你写什么，讲什么。</td></tr><tr><td style="text-align:center">2016-05-02</td><td style="text-align:center">看完《浪潮之巅》才明白“软件即服务”，软件提供的实际上是某种功能，某种作用，而这种功能是软件所在平台没有的，但是却是人们使用时不可或缺的，那么企业提供这个软件，就是在提供一种服务。就像饭店里的服务员一样，上菜时饭店提供的一种服务，但不是饭店本身就有的，饭店真正提供的只是一个场所和食物。<br>使用的人数决定市场，不管是付费还是免费，只要能抓住更多的用户，就是胜者。</td></tr><tr><td style="text-align:center">2016-04-29</td><td style="text-align:center">世界上有两种程序员，一种是写技术的，另一种是用技术的。（※附：以本人2017-12-22的眼光来看写者和用者并没有很明确的界线，更像是一种心态吧）</td></tr><tr><td style="text-align:center">2016-04-24</td><td style="text-align:center">真没想到，最近看到“人生若只如初见”才知道是什么意思，高中老师曾出了个作文题就叫这个，当时傻傻的不知道什么意思，呵呵，当年的阅历实在太浅。</td></tr><tr><td style="text-align:center">2016-04-07</td><td style="text-align:center">你强ta越怕，你弱ta越欺。</td></tr><tr><td style="text-align:center">2016-04-02</td><td style="text-align:center">黑色幽默，挺有意思的！比较推荐的有：《黑镜》、《蛮荒故事》。</td></tr><tr><td style="text-align:center">2016-03-31</td><td style="text-align:center">1. 两个公司在技术上的竞争，除了人的竞争，就是执行力的竞争。——吴军《浪潮之巅》雅虎、惠普精兵简政<br>2. 托尔斯泰讲，幸福的家庭都是相似的，不幸的家庭都是各有各的不幸。在信息工业中，这句话要反过来讲，成功的公司各有各的绝招，失败的公司到是有不少的共同之处。——吴军《浪潮之巅》思科 留住早期员工</td></tr><tr><td style="text-align:center">2016-03-24</td><td style="text-align:center">有时候，我们想要的东西就在我们面前，我们却因年代久远可能不认得，反而可能亲手毁了ta。——观《SINTEL》</td></tr><tr><td style="text-align:center">2016-03-21</td><td style="text-align:center">每次去以前贾里尼克都要确认我们报告的每一页内容都是已经公开发表过的。原因很简单，IBM有世界最好的科学家和工程师，他们可以用比你还快的速度将你还没发表的想法实现、申请专利并发表。<br>盖茨意识到只要垄断了操作系统，就间接垄断了整个行业。——吴军《浪潮之巅》Microsoft<br>在商业领域，保密性是十分重要的，尤其是一个新颖的想法。<br>在积累了一定的用户量之后，商业化也是很简单的。商业的前提是用户。</td></tr><tr><td style="text-align:center">2016-03-20</td><td style="text-align:center">整个信息技术（Information Technologies，简称IT）产业包括很多领域、很多环节，这些环节之间都是互相关联的。和世界上任何事物同样，IT产业也是不断变化和发展并且有着它自身发展规律的。——吴军《浪潮之巅》IT Law<br>万物发展自有其规律，但这个规律只是一种趋势，趋势总有其临界点，到临界点时将呈现另一种趋势，比如Moore’s Law，功耗就是其临界点。</td></tr><tr><td style="text-align:center">2016-03-20</td><td style="text-align:center">英特尔公司做事情非常专注，直到今天，它一直集中精力于个人微机的处理器，每一代产品的研发都是集中大量的人力和资金，每一次都是只能成功不能失败。——吴军《浪潮之巅》Intel<br>专一，虽然能保证做好，但面太窄，一旦市场发生变化，讲很难应对。</td></tr><tr><td style="text-align:center">2016-03-19</td><td style="text-align:center">时不时调整内部结构，将一些非核心的、长期效益不好的部门卖掉，同时扩大核心的利润高的生意。——吴军《浪潮之巅》IBM<br>认清自己的定位，抓牢自己的核心业务，同时开拓创新。</td></tr><tr><td style="text-align:center">2016-03-19</td><td style="text-align:center">当一个公司没有人对它有完全控制时，它的长期发展就会有问题。——吴军《浪潮之巅》AT&amp;T<br>合则生，分则死。</td></tr><tr><td style="text-align:center">2016-03-19</td><td style="text-align:center">社会在发展，人也在发展，社会的发展体现在人周围事物的变化，而人的发展体现在人自身的变化，这种变化是好是坏，每个人的观点可能不同，没人能预料变化将带来什么，我们唯一所能判断的就是变化给我们现在带来了什么，以此判断以前的变化是好是坏，此时的变化将由未来的人判断。</td></tr><tr><td style="text-align:center">2016-03-19</td><td style="text-align:center">大学生和高中生的本质区别在于大学生更会思考，更加注重自学能力，遇到问题是主动去寻找解决方案，而不是像高中生那样被动的等老师来讲解。</td></tr><tr><td style="text-align:center">2016-03-11</td><td style="text-align:center">时间使人安稳，失去时间将使人迷失，疯狂。</td></tr><tr><td style="text-align:center">2016-02-17</td><td style="text-align:center">别人肯不肯帮忙主要取决于你自身的实力基础。</td></tr><tr><td style="text-align:center">2016-02-03</td><td style="text-align:center">生而不养，养而不教，不如不生。</td></tr><tr><td style="text-align:center">2016-01-26</td><td style="text-align:center">为人子女，与父母相处的机会，其实都是见一次少一次的。——罗森《万界天王》</td></tr><tr><td style="text-align:center">2016-01-24</td><td style="text-align:center">四十多岁的父母是最能包容你的人。（※附：以本人2017-12-22的眼光来看这里有点欠妥）</td></tr><tr><td style="text-align:center">2016-01-23</td><td style="text-align:center">以己度人，更多的是指包容别人的缺点，而不是抱怨别人没有的缺点。</td></tr><tr><td style="text-align:center">2016-01-16</td><td style="text-align:center">人之为人，在于自制。</td></tr><tr><td style="text-align:center">2016-01-08</td><td style="text-align:center">读高中时，我接触到靠自己；读大学时，我逐渐学会靠自己；步入社会时，我将真正靠自己。（※附：以本人2017-12-22的眼光来看是不可能真正靠自己的，总要与外界交互）</td></tr><tr><td style="text-align:center">2015-12-30</td><td style="text-align:center">读大学，选择不同的专业，就是选择不同的圈子，而圈子决定话题。</td></tr><tr><td style="text-align:center">2015-12-28</td><td style="text-align:center">1. 很多时候，我们买一件东西只是因为心血来潮，而不是真正需要它。<br>2. 贯彻落实“尽量学习”理念。尽量学习有两个方面：尽量多学和尽量精学。</td></tr><tr><td style="text-align:center">2015-12-07</td><td style="text-align:center">人生充满太多的偶然性。</td></tr><tr><td style="text-align:center">2015-11-09</td><td style="text-align:center">所谓杀心，就是去除仇恨。恨一个人也常常意味着怕这个人，只有克服了“怕”之后，“恨”才能转化为杀心，化为力量。—— 冰临神下《死人经》</td></tr><tr><td style="text-align:center">2015-11-08</td><td style="text-align:center">每天都学一点小知识</td></tr><tr><td style="text-align:center">2015-11-05</td><td style="text-align:center">有没有想过，人类也是一种寄生虫，寄生在地球，依靠于太阳，而太阳和地球也只是宇宙里的一粒微尘。——观《宇宙的奇迹》</td></tr><tr><td style="text-align:center">2015-09-15</td><td style="text-align:center">虽然这不是你理想中的大学，但你可以选择过理想的大学生活。</td></tr><tr><td style="text-align:center">2015-09-05</td><td style="text-align:center">没有对生明的敬畏，就永远无法体会到生命的可怕。</td></tr><tr><td style="text-align:center">2015-09-01</td><td style="text-align:center">因为在乎，所以在意。</td></tr><tr><td style="text-align:center">2015-05-16</td><td style="text-align:center">我虽然现在不知道，但我可以学。（※附：以本人2017-12-22的眼光来看这句话在大部分情况下行不通）</td></tr><tr><td style="text-align:center">2015-05-15</td><td style="text-align:center">唉！这次回去，已是物是人非，院子不再是院子。</td></tr><tr><td style="text-align:center">2015-05-15</td><td style="text-align:center">自杀乃傻之至极。</td></tr><tr><td style="text-align:center">2015-05-15</td><td style="text-align:center">1. 不抱怨，不找理由。（面对教、训之终极奥义）<br>2. 一本书，读过之后如果没有思考，相当于没读。<br>3. 前人的言行是我们的指路明灯。</td></tr><tr><td style="text-align:center">2015-05-15</td><td style="text-align:center">鹿角杀死了冰原狼预示着拜拉席恩将导致史塔克的死亡。<br>不会玩的游戏不要硬去玩，否则终将害人害己。<br>当大雪降下，冷风吹起，独行狼死，群聚狼生。夏天时可以争吵，但一到冬天，我们必须保卫彼此，相互温暖，共享力量。——《冰与火之歌：权利的游戏》</td></tr><tr><td style="text-align:center">2015-05-15</td><td style="text-align:center">1. 海贼王的海军每个人都有自己坚守的正义。<br>2. 尊重不是别人施舍的，而是自己争取的。<br>3. 环境决定年龄。<br>4. 和平利于知识传播交流，战争利于知识创新突破。</td></tr><tr><td style="text-align:center">2015-05-15</td><td style="text-align:center">1. 不要等到老师教，尽量去学自己想学的，要学的。<br>2. 介绍和学习是两码事，介绍可以用PPT，而学习用板书更好。<br>3. 电给人方便，也使人孤独，人与人的联系似存而亡。</td></tr><tr><td style="text-align:center">2015-04-15</td><td style="text-align:center">是为自己而活？还是为他人而活？</td></tr><tr><td style="text-align:center">2015-04-03</td><td style="text-align:center">有时候，人对自己的东西会突然莫名其妙的产生一种厌烦感，从而不想要，从而做错事，但其实这种厌烦感只是暂时的，过一段时间又会恢复成以前那样。</td></tr><tr><td style="text-align:center">2015-03-10</td><td style="text-align:center">人当想人之不能。</td></tr><tr><td style="text-align:center">2014-10-04</td><td style="text-align:center">1. 人之成长，取决于见。<br>2. 世风日下，好人难做。<br>3. 在社会这个大染缸里，我只想做我自己。<br>4. 有些雷区是不能碰的，碰，就会惹火上身。<br>5. 每个人的注重点不一样，带出来的人也不一样。</td></tr><tr><td style="text-align:center">2014-09-20</td><td style="text-align:center">How did we escape from the prison? It was the work of generations of searchers who took five simple rules to heart . Question authority. No idea is true just because someone says so. Think for yourself . Question yourself. Don’t believe anything just because you want to. Believing something doesn’t make it so. Test ideas by the evidence gained from observation and experiment. If a favorite idea fails a well-desidned test, it’s wrong! Get over it. Follow the evidence, wherever it leads. If you have no evidence , reserve judgment. And perhaps the most important rule of all…… Rember, you could be wrong. Even the best scientists have been wrong about somethings. Newton, Einstein, and every other great scientist in history, they all made mistakes. of course they did – they were human, Science is a way to keep from fooling ourselves and each other. Have scientists known sin? of course. We have misused science, just as we have every other tool at our disposal, and that’s why we can’t afford to leave it in the hands of a powerful few. The more science belongs to all of us, the less likely it is to be misused. These values undermine the appeals of fanaticism and ignorance. ——《Cosmos: A Spacetime Odyssey》<br>我们如何逃出囚笼？是因为世世代代探索者的不懈努力，并且他们发自内心地遵从这5条简单规则。质疑权威。不轻信人言。独立思考。自我质疑。不因自己想要相信，而相信任何事。相信不代表能成为现实。以依靠观察和实验得来的证据来检验想法。如果自己喜欢的想法没有通过全面的检验，它就是错的！ 乐观一点。遵循证据，无论它指向哪里。如果没有证据，不妄下结论。也许最重要的规则就是，要记住，你也会犯错。牛顿、爱因斯坦，还有历史上每一位伟大的科学家，他们都犯过错，这很正常，是人都会犯错。科学让我们不再欺骗别人和自己。科学家们有罪吗？有的。我们曾滥用科学就像手边的工具一样随意使用，因此我们不能把科学放在少数的掌权者手中。当科学更多的属于全人类时，它就越不会被乱用。科学的价值在于能阻止狂热和无知。 ——纪录片《宇宙时空之旅》</td></tr><tr><td style="text-align:center">2014-09-20</td><td style="text-align:center">Telling someone your goal makes it less likely to happen.<br>告诉别人你的目标反而使目标不能实现。 ——网易公开课《不要公开宣布个人目标》</td></tr><tr><td style="text-align:center">2014-09-14</td><td style="text-align:center">每一个客户都是一群客户。</td></tr><tr><td style="text-align:center">2014-08-22</td><td style="text-align:center">快做眼前事，未来不可知。</td></tr><tr><td style="text-align:center">2014-08-13</td><td style="text-align:center">既然扎根于此，何不刻苦努力！</td></tr><tr><td style="text-align:center">2014-07-31</td><td style="text-align:center">这个世界很大，你总能找到你的伙伴。<br>既然出生到这个世上，你绝不会总是孤身一人的。 ——《One Piece》</td></tr><tr><td style="text-align:center">2014-07-26</td><td style="text-align:center">There’s a time when a man needs to fight and a time when he needs to accept that his destiny’s lost. 人有必须奋战的时刻，也有必须接受现实的时刻。 ——《Big Fish》</td></tr><tr><td style="text-align:center">2014-07-23</td><td style="text-align:center">每个人的一生都是一部独有的长篇小说。</td></tr><tr><td style="text-align:center">2014-07-11</td><td style="text-align:center">就算你讨厌ta，也不要在背后议论ta的是非，毕竟议论是非之事必是是非之人。</td></tr><tr><td style="text-align:center">2014-06-29</td><td style="text-align:center">世事无常，计划赶不上变化，无须太过伤感。</td></tr><tr><td style="text-align:center">2014-06-27</td><td style="text-align:center">大 极，小 极，差，和，无大无小。</td></tr><tr><td style="text-align:center">2014-06-25</td><td style="text-align:center">荣耀只属于特定的时空。</td></tr><tr><td style="text-align:center">2014-06-16</td><td style="text-align:center">1. 一个秘密有两个人知道，也便不是秘密。<br>2. 没有做好准备就准备失败。<br>3. 初学计算机语言，多敲代码。<br>4. 不要太在乎别人对你的看法（不管是好是坏），不然你会活的很累。</td></tr><tr><td style="text-align:center">2014-06-11</td><td style="text-align:center">分数是老师给的，东西才是自己学的。</td></tr><tr><td style="text-align:center">2014-06-06</td><td style="text-align:center">参数——来自另一维度的手（上帝之手）（二维中的蚂蚁、三维中的蚂蚁、轻易逃脱囚笼）</td></tr><tr><td style="text-align:center">2014-05-30</td><td style="text-align:center">1. 有些话（事）能说（做），有些话（事）不能说（做）。（要会判断）<br>2. 不要在心情极端时做出让自己后悔的事。<br>3. 相比于自律自觉能力，考上一个好大学显得并不是那么重要。<br>4. 在这个人人都装逼的社会，对不对需要自己判断！</td></tr><tr><td style="text-align:center">2014-05-26</td><td style="text-align:center">“取法乎下，得乎下下；取法乎中，得乎其下；取法乎上，得乎其中；取法上上，得乎其上。” —— 《读大学怎么读》</td></tr><tr><td style="text-align:center">2014-05-21</td><td style="text-align:center">1. 其实学校是第一个教会我们说谎的地方。<br>2. 成绩只是老师给的，更重要地是在于你自己有没有学到东西，大学注重的不应是分数，而应是你真正学到的东西！</td></tr><tr><td style="text-align:center">2014-05-12</td><td style="text-align:center">每个人都是自己生活的主角。</td></tr><tr><td style="text-align:center">2014-04-21</td><td style="text-align:center">1. 闲事为何事，何事为闲事！<br>2. 距离！ 适度！<br>3. 人生总有种种不如意之事，但也会有种种如意之事！<br>4. 一般而言，抄不如乱写，乱写不如不写！</td></tr><tr><td style="text-align:center">2014-04-21</td><td style="text-align:center">1. 世上的事很多，只是看你去不去做，所以何来无聊之说！<br>2. 上大学易，读大学难，且读且珍惜！</td></tr><tr><td style="text-align:center">2014-04-19</td><td style="text-align:center">浑浑噩噩的一天，糊糊涂涂的人。</td></tr><tr><td style="text-align:center">2014-04-01</td><td style="text-align:center">1. 不去争的话就什么都不会有！<br>2. 因为在意，所以紧张！<br>3. 人生就是一个奋斗的过程，人生也因奋斗而精彩！</td></tr><tr><td style="text-align:center">2014-04-01</td><td style="text-align:center">1. 永远都不要以为你的时间很多！<br>2. 深沉一点！<br>3. 真搞不懂为什么这么多人喜欢听假话，假话比真话真的管用吗？也难怪现在有这么多假冒伪劣产品，连个话都是假的好。（※附：以本人2017-12-23的眼光来看在多数情况下假话确实比真话管用，说话也是一门学问啊）</td></tr><tr><td style="text-align:center">2014-04-01</td><td style="text-align:center">1. 有些路还是自己走得好！<br>2. 天下哪里有白吃的午餐，只有白痴的人。<br>3. 做人可以懒，但不能傻！</td></tr></tbody></table><p>以上均为本人当时感想，也算是记录一下本人的心智成长过程吧，有不同意见请保持理智(๑•̀ㅁ•́ฅ)。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　哪来的后记，本人的这一生还没过完呢(╯°□°）╯︵ ┻━┻，（#-_-)┯━┯ 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本篇主要用来记录本人的心路历程。&lt;/p&gt;
    
    </summary>
    
      <category term="Share" scheme="http://cniter.github.io/categories/Share/"/>
    
    
      <category term="thought" scheme="http://cniter.github.io/tags/thought/"/>
    
      <category term="record" scheme="http://cniter.github.io/tags/record/"/>
    
  </entry>
  
</feed>
